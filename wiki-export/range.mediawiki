{{Type|<source inline>range :: Num a => Pattern a -> Pattern a -> Pattern a -> Pattern a</source>}}

'''range''' will take a pattern which goes from 0 to 1 (such as [[sine]]), and scale it to a different range - between the first and second arguments. In the below example, <source inline>range 1 1.5</source> shifts the range of sine from 0 - 1 to 1 - 1.5.

<source>
d1 $ jux (iter 4) $ sound "arpy arpy:2*2"
  |+ speed (slow 4 $ range 1 1.5 sine)
</source>

The above is equivalent to the following:

<source>
d1 $ jux (iter 4) $ sound "arpy arpy:2*2"
  |+ speed (slow 4 $ sine * 0.5 + 1)
</source>

= rangex =
{{Type|<source inline>rangex :: (Floating b, Functor f) => b -> b -> f b -> f b</source>}}

'''rangex''' is an exponential version of range described above, good to use for frequencies. For example, <source inline>range 20 2000 "0.5"</source> will give <source inline>1010</source> - halfway between 20 and 2000. But <source inline>rangex 20 2000 0.5</source> will give <source inline>200</source> - halfway between on a logarithmic scale. This usually sounds better if you’re using the numbers as pitch frequencies. Since rangex uses logarithms, don’t try to scale things to zero or less!

[[Category:Functions]]