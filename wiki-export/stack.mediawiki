{{DISPLAYTITLE:stack}} 
[[Type signature|Type]]: <source inline>stack :: [Pattern a] -> Pattern a</source>

'''stack''' takes a list of patterns and combines them into a new pattern by layering them up - effectively playing all of the patterns in the list simultaneously.

<source>
d1 $ stack [ 
  sound "bd bd*2", 
  sound "hh*2 [sn cp] cp future*4", 
  sound "arpy" +| n "0 .. 15"
]
</source>

This is particularly useful if you want to apply a function or synth control pattern to multiple patterns at once:

<source>
d1 $ whenmod 5 3 (striate 3) $ stack [ 
  sound "bd bd*2", 
  sound "hh*2 [sn cp] cp future*4", 
  sound "arpy" +| n "0 .. 15"
] # speed "[[1 0.8], [1.5 2]*2]/3"
</source>

= overlay =
[[Type signature|Type]]: <source inline>overlay :: Pattern a -> Pattern a -> Pattern a</source>

The '''overlay''' function is similar to [[cat]] described above, but combines two patterns, rather than a list of patterns. For example:

<source>
d1 $ sound (overlay "bd sn:2" "cp*3")
</source>

...is the same as...

<source>
d1 $ sound "[bd sn:2, cp*3]"
</source>

= <> =
[[Type signature|Type]]: <source inline>(<>) :: Pattern a -> Pattern a -> Pattern a</source>

'''<>''' is the same as [[cat#overlay|overlay]] described above but in operator form. For example:

<source>
d1 $ sound ("bd sn:2" <> "cp*3")
</source>

'''See also: [[cat]]'''

[[Category:Functions]]