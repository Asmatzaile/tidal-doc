{{DISPLAYTITLE:struct}} 
[[Type signature|Type]]: <source inline>struct :: Pattern Bool -> Pattern a -> Pattern a</source>

'''struct''' places a rhythmic 'boolean' structure on the pattern you give it.

For example:

<source>
d1 $ struct ("t ~ t*2 ~") $ sound "cp"
</source>

... is the same as ...

<source>
d1 $ sound "cp ~ cp*2 ~"
</source>

The structure comes from a ''boolean'' pattern, i.e. a binary one containing true or false values. Above we only used true values, denoted by <source inline>t</source>. It's also possible to include false values with <source inline>f</source>, which <source inline>struct</source> will simply treat as silience. For example, this would have the same outcome as the above:

<source>
d1 $ struct ("t f t*2 f") $ sound "cp"
</source>

These true/false binary patterns become useful when you conditionally manipulate them, for example 'inverting' the values using [[every]] and [[inv]]:

<source>
d1 $ struct (every 3 inv "t f t*2 f") $ sound "cp"
</source>

In the above, the boolean values will be 'inverted' every third cycle, so that the structure comes from the <source inline>f</source>s rather than <source inline>t</source>.

Note that euclidean patterns also create true/false values, for example:

<source>
d1 $ struct (every 3 inv "t(3,8)") $ sound "cp"
</source>

In the above, the euclidean pattern creates <source inline>"t f t f t f f t"</source> which gets inverted to <source inline>"f t f t f t t f"</source> every third cycle.

Note that if you prefer you can use <source inline>1</source> and <source inline>0</source> instead of <source inline>t</source> and <source inline>f</source>.

See also [[mask]].

[[Category:Functions]]