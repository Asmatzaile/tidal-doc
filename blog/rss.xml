<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Tidal Cycles Blog</title>
        <link>https://doc.tidalcycles.org/blog</link>
        <description>Tidal Cycles Blog</description>
        <lastBuildDate>Sat, 08 Apr 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Tidal Profile - digital selves]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_digitalselves</link>
            <guid>/tidal_profile_digitalselves</guid>
            <pubDate>Sat, 08 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[|          Tidal Cyclist | digital selves                                               |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">digital selves</th></tr></thead><tbody><tr><td align="right">Location</td><td align="left">London, UK</td></tr><tr><td align="right">Years with Tidal</td><td align="left">5ish yrs</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">Supercollider, p5.js, hydra, marching.js,Max (and/or) pd</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://soundcloud.com/digitalselves" target="_blank" rel="noopener noreferrer">SoundCloud</a>, <!-- -->[Bandcamp]<!-- --> (<a href="https://digitalselves.bandcamp.com/" target="_blank" rel="noopener noreferrer">https://digitalselves.bandcamp.com/</a>)</td></tr><tr><td align="right">Code online</td><td align="left"><a href="https://github.com/lwlsn" target="_blank" rel="noopener noreferrer">GitHub</a></td></tr><tr><td align="right">Other music/audio sw</td><td align="left">Audacity, Renoise Tracker DAW @_@</td></tr><tr><td align="right">Comments</td><td align="left"><a href="https://club.tidalcycles.org/t/autonomous-tidal-code-generation/1064/2" target="_blank" rel="noopener noreferrer">Autonomous Computer Music Tidal Forum Thread</a></td></tr></tbody></table><img loading="lazy" src="/assets/images/digitalSelves-med-66175f427eb54821e18d14101613d0db.jpg" alt="digital selves" width="600" class="img_ev3q"><p>photo credit: Antonio Roberts</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><p><strong>What do you like about livecoding in Tidal? What inspires you?</strong>   </p><p>I think the main thing that I like about Tidal for me is working, transforming, shaping and shifting patterns, and listening to the changes in real time. I recently co-ran a workshop with Iván Paz, Alex McLean and Dave Griffiths in Sheffield and at Hangar in Barcelona (we did it remotely at the same time- thanks to On The Fly for having us :) ). We talked a lot about patterns in the context of other traditions, like weaving. To me, it's interesting to think about computer music in this way.</p><p>I'm also super inspired by everyone else who is contributing through making music, creating forums for discussion, or working hard to make it an inclusive space. The community has always been one of the best things about TidalCyles &lt;3</p><p><strong>How do you approach your livecoding sessions?</strong>  </p><p>I feel like I have two "modes" when it comes to live coding- testing things out and performing things. They're not mutually exclusive though, and often I will test things live on stage, or perform things to nobody else but me.</p><p><strong>What functions and coding approaches do you like to use?</strong>  </p><p>I find it hard to have more than one or two functions in my head at the same time, and tend to go through phases when perfoming live of only using the same ones because they're the ones I remember under pressure.</p><p>Some of my favourites recently are using <a href="https://tidalcycles.org/docs/reference/time/#press" target="_blank" rel="noopener noreferrer">press</a> and <a href="https://tidalcycles.org/docs/reference/audio_effects/#frequency-shifter" target="_blank" rel="noopener noreferrer">fshift</a> on drum patterns:  </p><p>(All of the samples I use are available to download <a href="https://github.com/lwlsn/Misc_Samples" target="_blank" rel="noopener noreferrer">here</a>)</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">rarely</span><span class="token plain"> </span><span class="token hvariable">press</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">almostAlways</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">jux</span><span class="token plain"> </span><span class="token hvariable">rev</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">stack</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sfe-fx/4"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain">&nbsp;</span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">irand</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"1*8?"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">choose</span><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">"idmhit2"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"revkit"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">irand</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">16</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain">&nbsp;</span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[0.75 0.5]/16"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain">&nbsp;</span><span class="token hvariable">fshift</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token builtin" style="color:rgb(130, 170, 255)">range</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">100</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">300</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">16</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sine</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1.124</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[1, 1.02]"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">krush</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I also wrote a piece for the <a href="https://theposthumanist.com/" target="_blank" rel="noopener noreferrer">posthumanist magazine</a> recently, as they had an issue on "rhythms", where I tried to compose some prose text embedded with TidalCycles functions, and it re-ignited my interest in the use of the <a href="https://tidalcycles.org/docs/reference/conditions/#sew" target="_blank" rel="noopener noreferrer">sew</a> and <a href="https://tidalcycles.org/docs/reference/conditions/#stitch" target="_blank" rel="noopener noreferrer">stitch</a> functions, which I think is a super cool way to add sonic variation to patterns. E.g.   </p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sew</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">iter</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"1 0"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"> </span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0 .. 7"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">sound</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"cps1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0 .. 7"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">sound</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"cpu"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">orbit</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>and</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">stitch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">binary</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;127 63&gt;"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">sound</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"hjdsynth:12"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">sound</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"hjdsynth"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cutoff</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token builtin" style="color:rgb(130, 170, 255)">range</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">200</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4000</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">saw</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">resonance</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token builtin" style="color:rgb(130, 170, 255)">range</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.1</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">saw</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">note</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">choose</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">9</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">12</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">16</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">17</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">19</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">room</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.89</span><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">orbit</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Using the <a href="https://tidalcycles.org/docs/patternlib/tutorials/course2/#lesson-2-binary-patterns" target="_blank" rel="noopener noreferrer">binary</a> pattern notation to calculate where the two melodic sounds counteract with each other is super fun!</p><p><strong>Do you use Tidal with other tools / environments?</strong>  </p><p>Tidal is super cool as it doesn't have to be used with Supercollider and it's been fun to work on how to pattern sources other than just samples or synthesisers.</p><p>I've had a go in the recent past at using it to try and program the sounds of an artificial voice. Alex and I worked on first using it to pattern the Pink Trombone vocal synthesis - if you've not heard it, worth checking out <a href="https://dood.al/pinktrombone/" target="_blank" rel="noopener noreferrer">here</a> - and then more recently working on creating a voice model using "Neural Audio Synthesis", with a tool called <a href="https://github.com/acids-ircam/RAVE" target="_blank" rel="noopener noreferrer">RAVE</a> which has come out of research at IRCAM, and then live programming this artificial voice from Tidal.</p><p>We don't have any public facing documentation at the moment, but hoping to be able to share something more extensive on this soon 👀</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tidal-contributions">Tidal Contributions<a class="hash-link" href="#tidal-contributions" title="Direct link to heading">​</a></h2><p><strong>How do you contribute to Tidal Cycles? What have you worked on?</strong>  </p><p>A little while ago now, I worked on creating an autonomous agent that created its own patterns of Tidal code. This was a fun project during the summer of 2020, which I wrote up a bit about on the old TidalCycles blog <a href="https://blog.tidalcycles.org/index.html%3Fp=1280.html" target="_blank" rel="noopener noreferrer">here</a>. This was part of the <a href="https://summer.haskell.org/" target="_blank" rel="noopener noreferrer">Summer of Haskell</a> project, which I would encourage anyone who wants to work on the Tidal development to be a part of!</p><p>I guess the other way I have contributed is through running workshops on TidalCycles, which I've done in the past but not so many recently. It's always a nice way to get more people engaged and the install part has become much easier in recent years :)</p><p><strong>What motivates you to work on Tidal?</strong>   </p><p>Being part of a friendly community and wanting to help make new and exciting ways for humans to interact with algorithms.</p><p>Also I want to help inspire other women to be a part of the process of developing software! If there are any women out there that would be interested but don't know where to start please reach out and I'd love to help in any way I can.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music.</strong>  </p><p>I would say my music is meant to be equal measures fun and playful but also serious and emotional. I like to tow this line in the sounds that I make, making people confused if they can dance to the music or not. Been super insipered by some other artists that do the same kind of thing, e.g. Aeoi, sv1, DJH, Asia otus, 5ubaruu &amp; saves, +777000, sleepsang.</p><p><strong>How has your music evolved since you have been livecoding?</strong>  </p><p>I've learnt a lot about creating complexity in rhythms, how to elicit surprise in listeners by introducing random variations in both structure and timbre. I've learnt a lot about collaboration too from the people I've worked with since I started live coding! And from working with my machine partner sometimes too └<!-- -->[∵┌]</p><p>Also I find myself trying to recreate a lot of rhythms I hear into TidalCycles structures, which is a part of my brain I can't turn off now :S</p><p><strong>What samples or instruments do you like to work with?</strong>  </p><p>I basically pick up a lot of samples here and there that I like to work with. I think Lucy's <a href="https://tidalcycles.org/blog/tidal_profile_heavylifting" target="_blank" rel="noopener noreferrer">recent post</a> about this outlines a lot of the similarity with her practice in being a sample collector.</p><p>I have been using the Serum VST for some midi sounds recently too, as it's a nice tool to work with for shaping melodic sounds.</p><p><strong>What projects are you currently working on or planning? What's next?</strong></p><p>I'm having a bit of an unplanned creative hiatus at the moment due to a lot of work (have to finish a PhD at some point in the near future) but I've got a few bits that I was working on before that I'm hoping at some point can turn into another release.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h3><ul><li><a href="https://cherche-encore.bandcamp.com/album/error-topography" target="_blank" rel="noopener noreferrer">Error Topography E.P.</a></li><li><a href="https://digitalselves.bandcamp.com/album/introversion-of-sacrifice" target="_blank" rel="noopener noreferrer">Introversion of Sacrifice E.P.</a></li><li><a href="https://soundcloud.com/datafruits/digital-selves-dxdf" target="_blank" rel="noopener noreferrer">Live On DataFruits Radio</a></li><li><a href="https://www.youtube.com/watch?v=t2KeNblKSFM&amp;t=1s" target="_blank" rel="noopener noreferrer">FACT - Artist DIY</a></li><li><a href="https://www.youtube.com/watch?v=9iPRPIe_PbQ" target="_blank" rel="noopener noreferrer">FACT - Sonic Futures: How Technology is Guiding Electronic Music</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Working with samples the Heavy Lifting way]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_heavylifting</link>
            <guid>/tidal_profile_heavylifting</guid>
            <pubDate>Fri, 31 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Thinking about approaches to from-scratch improvised live code performance.]]></description>
            <content:encoded><![CDATA[<blockquote><p><em>Thinking about approaches to <code>from-scratch</code> improvised live code performance.</em><br>
<!-- -->(As I write this it's sort of turning out to be everything I think about Tidal!)</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a class="hash-link" href="#intro" title="Direct link to heading">​</a></h2><p>Hi, I'm Lucy, and I'm a live coder. In this blog post I'm going to be talking about some of my strategies for using samples and approaches to <code>from-scratch</code> or <code>blank-screen</code> live coded performance.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-from-scratch-anyway">What is 'from-scratch' anyway?<a class="hash-link" href="#what-is-from-scratch-anyway" title="Direct link to heading">​</a></h2><p>Some things to bear in mind:</p><ul><li>I didn't build my software, or my computer</li><li>I've listened to music before</li><li>I practice</li><li>I have 'ideas'</li><li>Why do we even care?</li></ul><p>I dunno where the original idea came from that live coding performances should start with a blank screen. I thought it might be from the <a href="https://toplap.org/wiki/ManifestoDraft" target="_blank" rel="noopener noreferrer">toplap manifesto</a> or the <a href="https://slab.org/2015/07/28/the-generative-manifesto-august-2000/" target="_blank" rel="noopener noreferrer">generative manifesto</a>, but I looked back through both of those and don't think they're really saying that.</p><p>At any rate, when I started live coding, and in the context I was in (Sheffield, 2015) it felt like blank-screen was the only way. It excited me (and continues to excite me) but it doesn't excite everyone. I feel (maybe wrongly?) that the emphasis on fully from-scratch performances can be a barrier for some people, and when I run workshops I always try to emphasize that while I start from a blank screen, it's not compulsory. But I do feel that the Algorave/live coding approach of starting with a blank screen, and <strong>embracing error</strong> is really exciting and necessary - without this forum for experimental risky performances I wouldn't be able to do what I do.</p><p>Lately it seems the blank-screeners have decreased in number and I see more and more pre-prepared performances. I'm often the only blank-screener at a gig.</p><blockquote><p><strong>Disclaimer:</strong> I'm not a die hard - I have used pre prepared code in performances, and particularly if I'm using MIDI I have a few snippets prepped. And I have pre-prepped code in supercollider, and I've done performances where all the code was written in advance, and I've recorded performances and edited them and played them live in Ableton <em>(shh, don't tell the live code gods).</em></p></blockquote><p>I guess what I'm trying to say is it doesn't really matter anyway, it's just something I personally enjoy doing that I find exhilarating, and that I want other people to enjoy, while also recognising that it can be a bit scary.</p><p>I think I said this before in my <a href="https://buttondown.email/heavy-lifting" target="_blank" rel="noopener noreferrer">newsletter</a> - but here is an anecdote I like to remember when I'm thinking about this stuff:</p><blockquote><p>I mentioned in work that I needed to practice for a gig and my colleague said "if you make it all up, why do you need to practice?"</p></blockquote><p>-- which is such a great question! What I need to practice is <strong>making it up</strong> and here's how I do it.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-choosing-samples">1. Choosing samples<a class="hash-link" href="#1-choosing-samples" title="Direct link to heading">​</a></h2><p>While I often use (usually hardware) synths in my set, what drew me to Tidal in the first place (and what forms the core of my performance) is the seemingly limitless opportunities for sample manipulation.</p><p>Of course you have your drums, synths, loops, acapellas, whatever, but what I really like is incorporating non-musical sounds into my sets. My go-to resource for this is <a href="https://freesound.org/" target="_blank" rel="noopener noreferrer">freesound.org</a>.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">\m/ blessed be the freesound contributors \m/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I'll search for whatever I'm thinking about (bells, bats, woodwork, helicopters, notifications etc etc), have a listen and download a batch of sounds - anything that catches my interest. At this stage I don't know if they'll work or not, but that's ok.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="some-other-favourite-sources">Some other favourite sources:<a class="hash-link" href="#some-other-favourite-sources" title="Direct link to heading">​</a></h3><ul><li><a href="https://pickleddiscs.wordpress.com/2019/05/15/blood-sport-sample-pack/" target="_blank" rel="noopener noreferrer">Blood Sport sample pack</a></li><li><a href="http://legowelt.org/samples/" target="_blank" rel="noopener noreferrer">Legowelt</a></li><li>samples obtained from YouTube etc, legally or otherwise*</li><li>Plundering the sample libraries of collaborators (particularly <a href="https://grahamdunning.com/" target="_blank" rel="noopener noreferrer">Graham Dunning's</a> - sorry Graham)</li><li>Recording sounds on your phone (or fancier equipment if you have it)</li><li>Plundering friends' recordings for remix material (usually a good idea to ask first)</li></ul><blockquote><p><strong>*Side note on my ethics for sampling:</strong> if the person is extremely rich I will steal their sounds. If they are not then I don't. I don't feel bad about it. You should make your own mind up about this though.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-editing">2. Editing<a class="hash-link" href="#2-editing" title="Direct link to heading">​</a></h2><p>I usually do a bit of sample editing in Ableton or Reaper next - trimming off silences, roughly normalising volume, checking for loop-ability. I don't spend too long on this - tbh I probably should and it would make things sound better.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-experimentation">3. Experimentation<a class="hash-link" href="#3-experimentation" title="Direct link to heading">​</a></h2><p>This is the bulk of how I prepare. I usually update/refresh my samples every few months, but I might reach back into the archives for some oldies too. I don't use many of the standard Tidal/SuperDirt sounds (although I used to use them almost exclusively). I do a bunch of experimenting with my new sounds, combining them with old favourites and using my favourite functions to come up with some sketches that sound good to me. This is a semi-mystical process and obviously very personal, but I find this to be extremely enjoyable and almost hypnotic sometimes.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="my-favourite-functions">My favourite functions<a class="hash-link" href="#my-favourite-functions" title="Direct link to heading">​</a></h3><p>Over time I've come up with my 'favourite functions' - actually these haven't really changed very much from the ones I used in my early sets, which I chose by going through the entire <a href="https://tidalcycles.org/docs/reference/cycles" target="_blank" rel="noopener noreferrer">Tidal documentation</a> and trying everything - you can do this too! It's a bit tedious at times, but for me it really helped me get my head round how Tidal thinks.</p><p>I pull the new samples into Tidal, and try a few of my typical function combos to see how they feel.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="short-sounds">Short sounds<a class="hash-link" href="#short-sounds" title="Direct link to heading">​</a></h4><p>I'll use the mininotation and some simple functions to play with rhythms.</p><ul><li><code>{}</code> - for polyrhythms</li><li><code>speed</code> <code>hurry</code></li><li><code>chop</code></li><li><code>density</code> (aka <code>fast</code>/<code>slow</code>)</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="patterns">Patterns<a class="hash-link" href="#patterns" title="Direct link to heading">​</a></h4><p>I'll start playing around with putting some patterns/sequences together.</p><ul><li><code>iter</code></li><li><code>jux</code></li><li><code>sometimes</code>/<code>often</code>/<code>every</code></li><li><code>chunk</code></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="longer-sounds">Longer sounds<a class="hash-link" href="#longer-sounds" title="Direct link to heading">​</a></h4><p>I'll use the following functions to test out loops and textures.</p><ul><li><code>loopAt</code></li><li><code>slice</code>/<code>splice</code></li><li><code>chop</code>/<code>striate</code></li><li><code>randslice</code></li><li><code>legato</code></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="effects">Effects<a class="hash-link" href="#effects" title="Direct link to heading">​</a></h4><p>I'll try some simple effects to manipulate the sounds</p><ul><li><code>vowel</code>/<code>hpf</code>/<code>lpf</code></li><li><code>shape</code></li></ul><p>And honestly, those functions, plus a bit of randomness/continuous functions, make up 99% of what I do in performances. You can get so much complexity with just a very little bit of Tidal syntax! Having a limit on the functions and sounds I'm using, for me, really supports <code>from-scratch</code> improvisation! (<a href="https://club.Tidalcycles.org/t/lucys-favourite-functions-aka-Tidal-the-heavy-lifting-way/479" target="_blank" rel="noopener noreferrer">I actually wrote about this before on the Tidal forum</a>).</p><p>While I'm experimenting I'm not worrying too much about what it sounds like, or the timings, but I'm more looking for a feel, and thinking about how something might work in a set <em>(my criteria: do I like it?).</em> Often at this stage I will discard individual samples or whole groups of samples. I might go back and edit them, or I might go hunting for similar or complementary sounds. I can spend a few hours doing this, and usually when I'm in the zone I will break into sections that would be more like what I do live (which is essentially the same as the experimentation outlined above, but with more consideration to structure and timing).</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sketches">Sketches<a class="hash-link" href="#sketches" title="Direct link to heading">​</a></h3><p>So this way I come up with some little sketches which sort of act as the inspiration for my set. They won't be exactly what I play live (although I might refer to them if I have a panic), but they give me an idea of the approaches I might use with each sample or set of samples.</p><blockquote><p>All samples referenced below available <a href="https://drive.google.com/drive/folders/1Fkxwn8Fl8O53gv-7O0dwvGXxj8qKO5Ta?usp=share_link" target="_blank" rel="noopener noreferrer">here on google drive</a>).</p></blockquote><h4 class="anchor anchorWithStickyNavbar_LWe7" id="sketch-1">Sketch 1<a class="hash-link" href="#sketch-1" title="Direct link to heading">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">setcps (137/60/4)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ chunk 4 (hurry "&lt;2 0.5&gt;")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ slice 8 "7 6 5 4 3 2 1 0"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ loopAt 2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "skel:8 skel:8"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># legato 1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># gain 1.2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ chunk 4 (# gain 0)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ jux (iter 4)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "{kick kick kick kick, 9sd*3 ~ ~, ~ ~ 9hh 9hh*2 [9hh*2 9oh]}"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sometimes (hurry "0.5 2")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ chunk 4 (# speed (range 1 2 sine))</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "vkb*8"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># speed "0.5"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># legato 0.5</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># shape 0.8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="sketch-2">Sketch 2<a class="hash-link" href="#sketch-2" title="Direct link to heading">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">d4</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ every 2 (density 2)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ slice 8 "0 &lt;0 1 2 3&gt;"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "bev:1 bev:2"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># legato "0.5 1"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># gain 1.2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># shape 0.2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># speed 2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d5</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sometimes (hurry 2)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ chop "[1,4]"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "9rs*16?"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># shape 0.4</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d6</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ every 4 (density "8 1")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "vkl"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># speed (choose [1,1,1,4,7])</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d7 $ sound "kick kick(3,8)"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="sketch-3">Sketch 3<a class="hash-link" href="#sketch-3" title="Direct link to heading">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">d1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ striate 4</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "emub*8"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d2</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "{emud, emud*8}"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># n (irand 8)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># legato 1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># shape 0.4</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ iter 4</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ chunk 4 (# speed (range 1 2 saw))</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "emustab:1(&lt;3 5 6&gt;,8)"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># legato 1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">d4</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ sound "emupiano"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># n (irand 4)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># size 0.4</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># room 0.1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># cut 1</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-choosing-a-palette">4. Choosing a palette<a class="hash-link" href="#4-choosing-a-palette" title="Direct link to heading">​</a></h2><p>From my experiments above I choose a palette of sounds. I usually try to think about sounds in the following categories:</p><ul><li>Drums/percussion</li><li>Bass</li><li>Lead</li><li>'Weird'/texture</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-performing-the-set">5. Performing the set!<a class="hash-link" href="#5-performing-the-set" title="Direct link to heading">​</a></h2><p>Usually I don't practice a full set before the gig, but from my experiments I will have some ideas/sections that I want to go for. I used to always write myself a crib sheet but I've mainly stopped doing that now (although I often miss it - just laziness really!). Usually they look something like the below - prompts for a feel or a texture, or the names of specific samples.</p><ul><li>percussive bit</li><li><code>skel</code> (or name of another stand-out/central sample)</li><li>ambient synth bit</li><li>dense textures</li><li>degrade/breakdown</li><li>etc</li></ul><p>One thing I struggle with is transitions. Tidal has some functionality with this but I've never got on with it. <a href="https://soundcloud.com/digitalselves" target="_blank" rel="noopener noreferrer">digital selves</a> is amazing at this &lt;3 - I need to work on it!</p><p>Anyway, despite all this preparation, on the day I might do something totally different anyway. While I have ideas, it never sounds the same as it did in practice (particularly given the particulars of an individual PA or venue environment), and if there's a sound or a texture that pops up in the live environment that I really like then I'll follow that idea and see where it goes. I also try to pitch things in line with the other performers on the night, or where I am on the bill. If it's a chill vibe then I tend not to go in hard with like 180bpm harsh noise (and vice versa).</p><blockquote><p><strong>EMERGENCY TIP: If in doubt stick a big fat 4:4 kick under everything and it will probs sound decent :)</strong></p></blockquote><p>It doesn't always go well! But I usually enjoy myself regardless. If I have a crash or like accidentally set the BPM to like 120000 then it always feels like a very authentic live coding set and I enjoy that. It can be hard sometimes if you're the only blank-screener and everyone else's set is super polished and yours is a bit of a shit show, but I have to remind myself that's part of the fun. I find <code>from-scratch</code> live coding performances to be genuinely exhilarating and one of the best things in my life! (phew...)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-de-mystifying-the-blank-screen">6. De-mystifying the blank screen<a class="hash-link" href="#6-de-mystifying-the-blank-screen" title="Direct link to heading">​</a></h2><p>What I'm trying to say with all this - (and well done if you've made it this far) - is that while the <code>from-scratch</code> approach might seem super cool and gonzo, there is a degree of prep that goes into it that I really feel is a process anyone can follow if they want to get into performing in this way. I actually find it super freeing to plug my laptop into the PA and just see where the sound goes, and I think given the nature of Tidal this can be a very relaxing way to play, rather than starting with strong preconceived ideas about what you want something to sound like or how you might like the structure to be. For me there are better tools than Tidal for performing in that way.</p><p>I also find this approach to be a really beautiful way to develop my relationship with my computer - it's a wonderful tool that does so much for me, but it can also be a friend and musical collaborator - I learn so much from our performances together &lt;3.</p><p><code>From scratch</code> coding can also feel safer with a human collaborator - find a friend and use <a href="https://github.com/Qirky/Troop" target="_blank" rel="noopener noreferrer">Troop</a>, <a href="https://estuary.mcmaster.ca/" target="_blank" rel="noopener noreferrer">Estuary</a> or <a href="https://flok.cc/" target="_blank" rel="noopener noreferrer">Flok</a> to jam together. When you don't have to do everything yourself it can be easier to find the space and confidence to improvise.</p><p>Have a go from the safety of your favorite spot and try to enjoy the process!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-final-warning">7. Final warning<a class="hash-link" href="#7-final-warning" title="Direct link to heading">​</a></h2><p>Having said all the above - this approach does require a certain FU attitude!!!! I still can't believe that people actually want not only to watch me perform and to listen to my music but actually to write and talk and teach about it, when I'm doing all this for purely selfish and personal reasons! Of course it makes me so happy when people like my stuff, but honestly I would do it even if they didn't, and that's why I think the <code>from-scratch</code> approach works so well for me, it's pure expression and experimentation, with a good dose of on-stage adrenaline. I'm super grateful for all the friendships and experiences live coding has given me. TY!</p><p>And if anyone is still reading. . . If you want to check out more:</p><ul><li><a href="https://heavy-lifting.org/" target="_blank" rel="noopener noreferrer">heavy-lifting.org</a></li><li><a href="https://youtu.be/ezSdPIKkp98" target="_blank" rel="noopener noreferrer">from scratch session with Graham Dunning</a></li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="comments">Comments<a class="hash-link" href="#comments" title="Direct link to heading">​</a></h4><ul><li>What do you think? Does this <code>from-scratch</code> process resonate? Do you have different ideas? </li><li>Add your Comments in the <a href="https://club.tidalcycles.org/t/blog-post-working-with-samples-the-heavy-lifting-way/4643" target="_blank" rel="noopener noreferrer">Club Tidal thread</a>.</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidal Profile - djmelan3 (Mel Laubscher)]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_djmelan3</link>
            <guid>/tidal_profile_djmelan3</guid>
            <pubDate>Sat, 25 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[| Tidal Cyclist  | Mel Laubscher    |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">Mel Laubscher</th></tr></thead><tbody><tr><td align="right">aka</td><td align="left">djmelan3 (dee-jay-muh-lun-dree)</td></tr><tr><td align="right">Location</td><td align="left">Cape Town, South Africa</td></tr><tr><td align="right">Years with Tidal</td><td align="left">3  yrs</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">Estuary, SuperCollider</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://www.youtube.com/@djmelan3" target="_blank" rel="noopener noreferrer">YouTube - djmelan3</a></td></tr><tr><td align="right">Other music/audio sw</td><td align="left">Pure Data, Logic, ProTools and similar DAWs</td></tr><tr><td align="right">Comments</td><td align="left"><a href="/blog/[https://club.tidalcycles.org](https://club.tidalcycles.org/t/blog-profile-djmelan3/4635)">Club Tidal Forum Thread</a></td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><p><strong>What do you like about livecoding in Tidal? What inspires you?</strong>   </p><p>I love the community around live coding and TidalCycles. What inspires me is how welcoming the community is and how simple it is to become involved. If you're new to TidalCycles there's a large community keen to help. In terms of TidalCycles itself I really enjoy the interactive aspect of the language, something that traditional DAWs lack. Live coding allows me to express myself musically much faster than a DAW can offer. I also find it easier to make creative decisions with Tidal whereas using a DAW often leads to overthinking and never actually finishing any projects.</p><p><strong>How do you approach your livecoding sessions?</strong>  </p><p>I largely participate in collaborative work, in which the group I collaborate with will brainstorm and decide upon a variety of strategies to use when we're jamming together. In both solo and collaborative work, depending on the context, I'll take an improvisational approach and randomly select audio samples, functions or write patterns I'd like to use in combination with one another. This is mainly because I'd like to discover (and be surprised by) all kinds of musical possibilities that any combination of functions, samples and patterns can create in Tidal.</p><p><strong>What functions and coding approaches do you like to use?</strong>  </p><p>My approach is mostly improvisational/experimental, but recently I've been experimenting with longer form composition attempting to create more structured patterns - i.e. placing a few <code>stack</code> functions within a <code>cat</code> function or a few <code>cat</code> functions within a <code>stack</code> function and then proceeding to expand on these.</p><p>I also enjoy using a number of functions that control the loudness (e.g <code>#gain (range 0.35 0.85 fast 12 sine)</code>) and spatiality (<code>pan</code>) of the audio I work with within confines of stereo monitoring. To do this I combine <code>pan</code> and <code>gain</code> and place the audio at different areas within the stereo field. For example:</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d3</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">-- slow 2 $</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token hvariable">fast</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token hvariable">sometimes</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token hvariable">almostAlways</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.65</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[[x*2][~ x][x@2][x]]"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"hh27"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token hvariable">delay</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">choose</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token number" style="color:rgb(247, 140, 108)">12</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token hvariable">pan</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">fast</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sine</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1.15</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>Do you use Tidal with other tools / environments?</strong>  </p><p>I've mostly used MiniTidal in Estuary when collaborating simply because it's an easy-to-access platform, especially for non-programmers such as myself. When I work on my own I do experiments with SuperCollider and Tidal in VS code. I have some experience with Pure Data as well and it was actually through creating small patches in Pure Data that I became interested in using programming languages to solve musical problems.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music.</strong>  </p><p>Since 2020 I've been a co-collaborator of SuperContinent. We've performed together at various conferences, online events and even at an online meeting. Locally, I've worked alongside students in a small university ensemble where we performed in online environments as well. As with collaborative contexts, one has to be aware of others in the group at all times. I find this to be an exciting challenge, especially when my co-collaborators come from varying musical backgrounds. Using the predetermined strategies we improvise and live code our performances from scratch. When I do my own experiments the goal is to write pre-composed code that's ready to run and which will be adjusted throughout the performance to create as much variation as possible.</p><p><strong>How has your music evolved since you have been livecoding?</strong>  </p><p>I've experimented a lot through my use of the language and observed a lot through collaboration. Alongside learning from my collaborators, I taught myself how to code with Tidal by watching what everyone else did. I now find that I'm able to use Tidal as a tool to express ideas far clearer than I ever could with any other tool.</p><p><strong>What samples or instruments do you like to work with?</strong>  </p><p>I work with all kinds of samples. I don't limit myself to use particular samples, but when I am looking for a particular overall "sound" I'll usually pick samples that will fit with what I'm going for.</p><p><strong>What projects are you currently working on or planning? What's next?</strong>  </p><p>Currently, I have a series of upcoming talks hosted by the University of Cape Town's South African College of Music. In these I'll be demonstrating the technique of live coding as it is still very much a newer approach to performing music in South Africa. I'll also be performing solo for the first time ever as part of this demonstration. Subsequent talks in this series will cover some of the work I've done during collaborations, and I hope to meet new people who might take in interest in learning how to live code themselves.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions:<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h3><ul><li><a href="https://www.youtube.com/channel/UCh7EiGKEEnCSfZ8xzUJIsZw" target="_blank" rel="noopener noreferrer">YouTube Main Page</a></li><li><a href="https://www.youtube.com/playlist?list=PLroSCmh5yBWCr-U3h-0-HhxQ3tuq2qbpx" target="_blank" rel="noopener noreferrer">Solo streams/performances</a></li><li><a href="https://www.youtube.com/playlist?list=PLroSCmh5yBWAHsSjTMY3hXtNoVB1I8Snh" target="_blank" rel="noopener noreferrer">SuperContinent collaborations</a></li><li><a href="https://www.youtube.com/playlist?list=PLroSCmh5yBWCwxQ6jnR4Ott_1Dxt2kB7l" target="_blank" rel="noopener noreferrer">UPLOrc collaborations</a></li><li><a href="https://www.youtube.com/playlist?list=PLroSCmh5yBWDZk6zoW48jj-1WwP3HWhiA" target="_blank" rel="noopener noreferrer">WeekendJam collaborations</a></li></ul><p>Comments: <a href="/blog/[https://club.tidalcycles.org](https://club.tidalcycles.org/t/blog-profile-djmelan3/4635)">Club Tidal Forum Thread</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidal Profile - Atsushi Tadokoro]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_tadokoro</link>
            <guid>/tidal_profile_tadokoro</guid>
            <pubDate>Wed, 15 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[|          Tidal Cyclist | Atsushi Tadokoro                                             |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">Atsushi Tadokoro</th></tr></thead><tbody><tr><td align="right">aka</td><td align="left">tado, yoppa</td></tr><tr><td align="right">Location</td><td align="left">Maebashi Japan</td></tr><tr><td align="right">Years with Tidal</td><td align="left">7  yrs</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">SuperCollider, SonicPi, Hydra, Kodelife</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://soundcloud.com/tadokoro" target="_blank" rel="noopener noreferrer">SoundCluod</a>, <a href="https://vimeo.com/tadokoro" target="_blank" rel="noopener noreferrer">Vimeo</a></td></tr><tr><td align="right">Code online</td><td align="left"><a href="https://github.com/tado" target="_blank" rel="noopener noreferrer">GitHub</a></td></tr><tr><td align="right">Other music/audio sw</td><td align="left">Audacity, Pure Data, Ableton Live</td></tr><tr><td align="right">Comments</td><td align="left"><a href="https://club.tidalcycles.org/t/blog-profile-atsushi-tadokoro/4622" target="_blank" rel="noopener noreferrer">Club Tidal Forum Thread</a></td></tr></tbody></table><p><img loading="lazy" src="https://yoppa.org/wp-content/uploads/2023/03/hypergeek.jpg" class="img_ev3q"></p><p>photo: Phont @phont1105 (ANGRM™)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><p><strong>What do you like about livecoding in Tidal? What inspires you?</strong>   </p><p>What I like about live coding with TidalCycles is that I can improvise and change the pattern flexibly per-part basis (connections, d1, d2, d3).  It also combines musical and coding ideas at a high level.</p><p><strong>How do you approach your livecoding sessions?</strong>  </p><p>In my case, I pre-code a rough flow in TidalCycles according to the time I need to perform. However, I leave as much room for improvisational changes and extensions to the code, making for improvisational and varied performances.</p><p><strong>What functions and coding approaches do you like to use?</strong>  </p><p>The function I currently use most often is the combination of scale and remainder operations to generate various phrases. For example, the following code is used.</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"supersaw*16"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">sustain</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0.1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">note</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"minPent"</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"{-12..0}%5"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If the scale (minPent) used is changed to something else, the impression of the melody changes drastically. It is like improvisation in modal jazz.</p><p>Furthermore, by using the left and right channels effectively and by adding filters, you can add more depth to the performance.</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"supersaw*16"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">pan</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">rand</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain">  </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">sustain</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0.1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">note</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"indian"</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"{-12..[0, 5]}%[5, 7]"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">lpf</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token builtin" style="color:rgb(130, 170, 255)">range</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">200</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">10000</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sine</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">resonance</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0.2"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>More complex rhythmic swells can be generated by using functions such as "jux" and "rev" that create changes on the time axis.</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sometimesBy</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.3</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">jux</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">iter</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">16</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sometimesBy</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.1</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">rev</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"supersaw*16"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">pan</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">rand</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">sustain</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0.1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">note</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"indian"</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"{-12..[0, 5]}%[5, 7]"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">lpf</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token builtin" style="color:rgb(130, 170, 255)">range</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">200</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">10000</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sine</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">resonance</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0.2"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>Do you use Tidal with other tools / environments?</strong>  </p><p>I use TidalCycles in combination with other applications that generate visuals for audiovisual performance. Initially I used openFrameworks, but recently I have been using TouchDesigner.</p><p>However, it is difficult for one person to do live coding for sound and visuals at the same time. So I am currently using a method where the results of coding in TidalCycles are linked via OSC (Open Sound Control) to generate the visuals. I do the following.</p><p>First, I determine the names of the parameters to be sent from TidalCycles to TouchDesigner. For example, let's say we want to send out a numeric value of type Integer "td_s" that specifies the scene number in TouchDesigner. First, add the following statement to "BootTidal.hs"</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> </span><span class="token hvariable">td_s</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">pI</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"td_s"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Next, add the following statement to the SuperCollider initialization file "startup.scd". This instruction forwards the OSC from TidalCycles to SuperCollider to yet another application, specifying an OSC argument of "\tidalplay" and a port number of "3333".</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">a </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> NetAddr</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">new</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"localhost"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">3333</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">OSCdef</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">\tidalplay</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    arg msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">sendMsg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain">msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token char" style="color:rgb(130, 170, 255)">'/dirt/play'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This OSC is parsed and used by the application generating the visuals. For example, in the case of TouchDesigner, the number can be retrieved by writing the following Python script in OSC In DAT.</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> os </span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> times</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> time </span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> time</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">onReceiveOSC</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">dat</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> rowIndex</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> message</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">bytes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> timeStamp</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> address</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> args</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> peer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">    </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    lst </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> message</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">split</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">try</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        td_s </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> lst</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">lst</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'"td_s"'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        op</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'scene_no'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">par</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">value0 </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> td_s</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">except</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword" style="font-style:italic">pass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This allows for live-coded audiovisual performances with synchronized sound and visuals, as shown in the video below!</p><p><a href="https://youtu.be/cB_tm-NAYRk" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://github.com/tado/hypergeek23/raw/main/youtube.jpg" alt="youtube" class="img_ev3q"></a></p><p>For more details on the code, please refer to the Github repository below.</p><ul><li><a href="https://github.com/tado/hypergeek23" target="_blank" rel="noopener noreferrer">https://github.com/tado/hypergeek23</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tidal-contributions">Tidal Contributions<a class="hash-link" href="#tidal-contributions" title="Direct link to heading">​</a></h2><p><strong>How do you contribute to Tidal Cycles? What have you worked on?</strong>  </p><p>My focus is on education and the popularization of live coding with TidalCycles. I give lectures at universities on the central theme of live coding. The first half of the class covers the basics of live coding with Sonic Pi, and the second half is a full-scale live coding performance using TidalCycles. This type of lecture is rarely offered in Japan and has been well received.</p><p><strong>What motivates you to work on Tidal?</strong>   </p><p>The appeal of Tidal is its ability to generate very complex and diverse music and sounds with a few simple codes. The scalability of samples and instruments is also attractive.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music.</strong>  </p><p>As I mentioned in the Livecoding section, I am interested in audio-visual expression through livecoding. In addition to that, I am interested in rhythmic expressions that sound natural but are a little bit twisted. For example, I am interested in polyrhythms, polymeters, and asymmetrical rhythms.</p><p><strong>How has your music evolved since you have been livecoding?</strong>  </p><p>Livecoding has made me more sensitive to rhythmic structure than before. I used to use a lot of simple four-beat repetitions, but I have started to create rhythms with more complexity.</p><p><strong>What samples or instruments do you like to work with?</strong>  </p><p>I use the sound samples and instruments included in SuperDirt as well as adding my own original samples and instruments. I have made them available in the following Github repository.</p><ul><li><a href="https://github.com/tado/samples-extra" target="_blank" rel="noopener noreferrer">samples-extra</a> : Extra audio samples for SuperDirt</li><li><a href="https://github.com/tado/synth-extra" target="_blank" rel="noopener noreferrer">synth-extra</a> : Extra super collider instrument definitions</li></ul><p><strong>What projects are you currently working on or planning? What's next?</strong> </p><p>I am currently working on live coding of laser beams. I hope to show the results of my various experiments on Algorave. The current status is as shown in the video below.</p><p><a href="https://www.youtube.com/shorts/ITRwjJPO2dY" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://yoppa.org/wp-content/uploads/2023/03/hq720_2.webp" alt="youtube" class="img_ev3q"></a></p><p><a href="https://www.youtube.com/shorts/ITRwjJPO2dY" target="_blank" rel="noopener noreferrer">https://www.youtube.com/shorts/ITRwjJPO2dY</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h3><ul><li><a href="https://www.youtube.com/watch?v=cB_tm-NAYRk" target="_blank" rel="noopener noreferrer">Hyper Geek #5 (2023)</a></li><li>Show your mind on my screen (2022) - Audio Visual immersive dome live coding.<ul><li><a href="https://vimeo.com/manage/videos/779860395" target="_blank" rel="noopener noreferrer">excerpt</a></li><li><a href="https://vimeo.com/manage/videos/779998862" target="_blank" rel="noopener noreferrer">full</a></li></ul></li><li><a href="https://youtu.be/xPaJOdygJRA" target="_blank" rel="noopener noreferrer">Solstice Night Stream December (2022)</a></li><li><a href="https://www.youtube.com/watch?v=O4T-3wyfuOU" target="_blank" rel="noopener noreferrer">Algorave 10th Birthday (2022)</a></li><li>Danceable Polymeter (2019)<ul><li><a href="https://vimeo.com/manage/videos/362105456" target="_blank" rel="noopener noreferrer">excerpt</a></li><li><a href="https://vimeo.com/manage/videos/362100002" target="_blank" rel="noopener noreferrer">full</a></li></ul></li><li><a href="https://vimeo.com/manage/videos/179527428" target="_blank" rel="noopener noreferrer">Synesthesic Stream (2016)</a></li></ul><p>Comments: <a href="https://club.tidalcycles.org/t/blog-profile-atsushi-tadokoro/4622" target="_blank" rel="noopener noreferrer">Club Tidal Forum Thread</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidal Profile - froos]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_froos</link>
            <guid>/tidal_profile_froos</guid>
            <pubDate>Tue, 14 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[| Tidal Cyclist  | Felix    |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">Felix</th></tr></thead><tbody><tr><td align="right">aka</td><td align="left">froos</td></tr><tr><td align="right">Location</td><td align="left">France / Germany</td></tr><tr><td align="right">Years with Tidal</td><td align="left">1  yrs</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">Strudel</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://www.youtube.com/channel/UCCzL14wczvJyJaVYjh4nfJQ" target="_blank" rel="noopener noreferrer">YouTube</a></td></tr><tr><td align="right">Code online</td><td align="left"><a href="/blog/github.com/felixroos/">GitHub</a></td></tr><tr><td align="right">Other music/audio sw/hw</td><td align="left">Ableton, Trumpet, DIY Synth</td></tr><tr><td align="right">Comments</td><td align="left"><a href="https://club.tidalcycles.org/t/tidal-cycles-blog-returns-profile-from-froos/4577/10?u=highharmonics" target="_blank" rel="noopener noreferrer">Club Tidal Forum Thread</a></td></tr></tbody></table><p><img loading="lazy" src="https://i.imgur.com/5fClfIp.png" alt="srudel wac" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><p><strong>What do you like about livecoding in Tidal? What inspires you?</strong></p><p>There are many things that inspire me..
I generally like the minimalistic, text-based approach to music making, where everything is visible at all times on one screen. When I started making music with an MPC1000, menu-diving was a key part of the process.
A similar thing can be said about DAWs like Ableton (and Push), where there are many different UI layers and hidden items.
Combining Tidal's simplistic interface with a terse and nestable syntax, it becomes a powerful tool full of rabbit holes to explore. Also, I like the fact that it is open source and thus hackable + the community around it is really refreshing.</p><p><strong>How do you approach your livecoding sessions?</strong>  </p><p>Being fairly new to livecoding, I don't have a goto approach, but I tend to either just start with something really simple and go with the flow, or I am exploring a specific function or idea and build on that.
When I code for myself, I don't pay as much attention to the overall flow of the "performance",
but rather try to find a loop that I like to listen to. I guess much of my approach is still influenced by many years of making beats with a more traditional setup. That might change though...</p><p><strong>What functions and coding approaches do you like to use?</strong>  </p><p>I am really into chord voicings and "harmony hacking". While I also like music with simpler / less / no chords,
I sometimes miss the rich harmonic colors of the past. Writing (and changing) chord progressions in a DAW can be tedious, which is probably one of the reasons why they faded in general. If you don't play the piano fluently, you cannot quickly jot it down.. In a live coding setting, chord progressions and voicings can be automated and simulated, which has great potential. This is especially fun with arpeggios, for example:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token string" style="color:rgb(195, 232, 141)">"&lt;C^7 Dbo7 Dm7 C7&gt;"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">voicings</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'lefthand'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// voice chords</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">arp</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"0 3 &lt;2 0&gt; [1 3]"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">iter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">add</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">perlin</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">range</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">.5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// pitch warble</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">add</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;0 12&gt;/16,.1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// hippie chorus</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">sometimes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">add</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"12"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// vary octaves</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">almostNever</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">ply</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"2"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// little rhythmic glitches</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">note</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">s</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'sine'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">decay</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">.125</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">gain</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">.8</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">sustain</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">sine</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">range</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">.5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">slow</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">32</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">jux</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">rev</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">room</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">.8</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">fast</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://strudel.tidalcycles.org/?UPR-AlXfgSnh" target="_blank" rel="noopener noreferrer">Open in Strudel REPL</a></p><p>A while back I wrote 2 posts about <a href="https://loophole-letters.vercel.app/rhythmical-chords" target="_blank" rel="noopener noreferrer">voicing dictionaries</a> and <a href="https://loophole-letters.vercel.app/voicing-permutation" target="_blank" rel="noopener noreferrer">voicing permutation</a>, which now partly found their way into Strudel.</p><p><strong>Do you use Tidal with other tools / environments?</strong>  </p><p>Most of the time, I use Strudel to write Tidal patterns. Sometimes I visit my friend <a href="https://soundcloud.com/luimafuta" target="_blank" rel="noopener noreferrer">Lui Mafuta</a> where I use livecode stuff via MIDI. It's also fun to add <a href="https://www.youtube.com/watch?v=IcMSocdKwvw" target="_blank" rel="noopener noreferrer">some trumpet notes on top</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tidal-contributions">Tidal Contributions<a class="hash-link" href="#tidal-contributions" title="Direct link to heading">​</a></h2><p><strong>How do you contribute to Tidal Cycles? What have you worked on?</strong>  </p><p>In the last year, I was all in on developing Strudel!
I was exciting to see this lovely thing grow into what it is now.
Maybe you're interested in <a href="https://loophole-letters.vercel.app/strudel" target="_blank" rel="noopener noreferrer">the whole story</a> and the <a href="https://loophole-letters.vercel.app/strudel1year" target="_blank" rel="noopener noreferrer">recap after 1 year</a>.</p><p><strong>What led you to work on Tidal?</strong></p><p>Long before I found Tidal, I wanted to build a hackable backing track player. I've spent many hours practising the trumpet using iReal Pro, which is a popular practise software in the jazz / pop / improvised music sphere. I always dreamed of a software that could generate such tracks from minimal input (just chord progressions) whilst being able to freely control the musical style. After having built <a href="https://felixroos.github.io/jazzband/" target="_blank" rel="noopener noreferrer">several</a> <a href="https://felixroos.github.io/color-tunes/" target="_blank" rel="noopener noreferrer">prototypes</a>, I still was not satisisfied. Luckily, I found Tidal and its emerging JavaScript port, whose flexible abstractions are perfect to implement such a thing.
Being more involved in computer music now (practising trumpet less :P), the dream from a hackable backing track player morphed into a more general dream of an instrument that allows improvising electronic music, which is already becoming a reality!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music.</strong>  </p><p>I am still dipping my toes in, so far I am mostly translating and recontextualize things I've done prior to livecoding.
For example, I've created a video album of <a href="https://www.youtube.com/watch?v=KEndMf5udEw&amp;list=PL7oyavMs9sS9gLY8TR6n4ILi-_5uq5ix8" target="_blank" rel="noopener noreferrer">hip hop beats created with strudel</a>.
Apart from that, I really like making music with frequencies only, mostly <a href="https://strudel.tidalcycles.org/?uFDgT5d4pL_0" target="_blank" rel="noopener noreferrer">using pure intervals</a>.</p><p><strong>How has your music evolved since you have been livecoding?</strong>  </p><p>I am starting to appreciate the glitch! It will probably get worse..</p><p><strong>What samples or instruments do you like to work with?</strong>  </p><p>Samplewise, I love to sample single notes and sounds of old recordings, for example, I've used <a href="https://www.youtube.com/watch?v=jaWdVJO5H98" target="_blank" rel="noopener noreferrer">the first note of this lovely album</a> for the <code>pluck</code> sound in the last link above.
High quality sample banks are cool, but there is something special about single sample repitches, maybe they just trigger tiny doses of nostalgia to my inner child, which consumed wavetable synthesis while playing super nintendo for hours.</p><p><strong>What projects are you currently working on or planning? What's next?</strong>  </p><p>Still busy hacking on Strudel! I am not the type to plan too far ahead, but I am excited of what's to come</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h3><ul><li><a href="https://felixroos.github.io/strudel/swatch/" target="_blank" rel="noopener noreferrer">My Strudel Pattern Swatch</a></li><li><a href="https://www.youtube.com/channel/UCCzL14wczvJyJaVYjh4nfJQ" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a href="https://www.youtube.com/watch?v=IcMSocdKwvw" target="_blank" rel="noopener noreferrer">Algo10 Stream</a></li><li><a href="https://www.youtube.com/watch?v=P1DDsOvcyco" target="_blank" rel="noopener noreferrer">Solstice Night 2022 Stream</a></li><li><a href="https://loophole-letters.vercel.app/" target="_blank" rel="noopener noreferrer">My Blog</a></li></ul><p>Some non-livecoded music I did as Puste using mostly the trumpet:</p><ul><li><a href="https://soundcloud.com/friendlyconnections/karbana-showers-and-storms-1?in=luimafuta/sets/remixes" target="_blank" rel="noopener noreferrer">Karbana - Showers And Storms (Lui Mafuta &amp; Puste Brass Version)</a></li><li><a href="https://soundcloud.com/hugrecords/klangdruide-spoon-full-of-honey-lui-mafuta-puste-remix?in=luimafuta/sets/remixes" target="_blank" rel="noopener noreferrer">Klangdruide - A Spoon Full Of Honey (Lui Mafuta &amp; Puste Remix)</a></li><li><a href="https://soundcloud.com/ketoga/kunterweiss-manne-im-theater" target="_blank" rel="noopener noreferrer">Kunterweiß - Manne im Theater (Puste Edit)</a></li><li><a href="https://open.spotify.com/album/5MI78yNDgbhhxa2uA9CLot" target="_blank" rel="noopener noreferrer">Lui Mafuta &amp; Puste - Secret Spot EP</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="thanks">Thanks<a class="hash-link" href="#thanks" title="Direct link to heading">​</a></h3><p>Last but not least huge thanks to all the people that are part of this space!
Special thanks to Alex for building not only Tidal as a software but also as a community, making the world of digital music making a little less boring, one cycle at a time :)</p><p><img loading="lazy" src="https://i.imgur.com/QNLKOeC.jpg" alt="guy with fatty hair" class="img_ev3q"></p><p>Comments: <a href="https://club.tidalcycles.org/t/tidal-cycles-blog-returns-profile-from-froos/4577/10?u=highharmonics" target="_blank" rel="noopener noreferrer">Club Tidal Forum Thread</a> |</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidal Profile - polymorphic_engine]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_polymorphic_engine</link>
            <guid>/tidal_profile_polymorphic_engine</guid>
            <pubDate>Mon, 13 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[| Tidal Cyclist  | Martin Gius   |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">Martin Gius</th></tr></thead><tbody><tr><td align="right">aka</td><td align="left">polymorphic_engine</td></tr><tr><td align="right">Location</td><td align="left">Vienna</td></tr><tr><td align="right">Years with Tidal</td><td align="left">3  yrs</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">SuperCollider, Hydra, ORCA</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://flimmerhaar.bandcamp.com/album/cilia" target="_blank" rel="noopener noreferrer">Bandcamp</a></td></tr><tr><td align="right">Code online</td><td align="left"><a href="https://github.com/polymorphicengine" target="_blank" rel="noopener noreferrer">GitHub</a></td></tr><tr><td align="right">Other music/audio sw</td><td align="left">Reaper, PureData, Audacity</td></tr><tr><td align="right">Comments</td><td align="left"><a href="https://club.tidalcycles.org/t/new-blog-profile-polymorphic-engine/4616" target="_blank" rel="noopener noreferrer">Club Tidal Forum Thread</a></td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><p><strong>What do you like about livecoding in Tidal? What inspires you?</strong>   </p><p>I find the way Tidal allows me to approach music in a structural way fascinating. I like it's concise but still verbose syntax, especially combined with the mini-syntax.</p><p><strong>How do you approach your livecoding sessions?</strong></p><p>When I make music on my own, I like to start out with simple rhythmic patterns and start to layer them with different versions of themselves (slower &amp; lower / faster &amp; higher / ..). Now apply the MI clouds effect and you can have fun for hours adjusting the parameters! <em>(Note: see the clouds section in the <a href="https://tidalcycles.org/docs/reference/mi-ugens#clouds-global" target="_blank" rel="noopener noreferrer">Mi-UGens page</a> of the User docs.)</em></p><p>I also like to use a traditional game controller and map the controls to conditional functions or effects in the code. For example, playing a drum pattern twice as fast when I press the 'A' button, or adjust the pan according to a joystick. I like the thought that I am programming the functionality of a game live, while I am also playing it.</p><p><strong>What functions and coding approaches do you like to use?</strong>  </p><p>Probably my most used Tidal functions are <code>layer</code> and <code>while</code>. I also use the control bus feature a lot to manipulate the FX of longer sounds. I really like how randomness in Tidal works and how easy it is no generate arbitrary, but repeating sequences or rhythms.</p><p>Here is an example of a jungle inspired, abstract dance track. To make a four cycle loop, evaluate the line</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token builtin" style="color:rgb(130, 170, 255)">all</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">timeLoop</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">rotL</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>and change the number in rotL to shift the pattern. Try to play around with the parameters of the clouds effect aswell, but be careful, it might get loud! :)</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">let</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">setbpm</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">setcps</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">x</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token number" style="color:rgb(247, 140, 108)">60</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">_add</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Time</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Pattern</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Pattern</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Pattern</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">_add</span><span class="token plain"> </span><span class="token hvariable">t</span><span class="token plain"> </span><span class="token hvariable">value</span><span class="token plain"> </span><span class="token hvariable">pat</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">pure</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token hvariable">t</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">timeCat</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">shift</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token hvariable">pat</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token operator" style="color:rgb(137, 221, 255)">-</span><span class="token hvariable">shift</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token hvariable">value</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token keyword" style="font-style:italic">where</span><span class="token plain"> </span><span class="token hvariable">shift</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">t</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">add</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Pattern</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Time</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Pattern</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Pattern</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Pattern</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">add</span><span class="token plain"> </span><span class="token hvariable">pt</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token plain"> </span><span class="token hvariable">y</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">innerJoin</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">fmap</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">\</span><span class="token hvariable">t</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">_add</span><span class="token plain"> </span><span class="token hvariable">t</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token plain"> </span><span class="token hvariable">y</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token hvariable">pt</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">setbpm</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">160</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token builtin" style="color:rgb(130, 170, 255)">all</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">timeLoop</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">rotL</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token builtin" style="color:rgb(130, 170, 255)">all</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">while</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"t(4,16)"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">|+</span><span class="token plain"> </span><span class="token hvariable">krush</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">while</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[0 | 1]*16"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">superimpose</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">plyWith</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">|*</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1.25</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">.</span><span class="token plain"> </span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">layer</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token operator" style="color:rgb(137, 221, 255)">\</span><span class="token hvariable">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">degradeBy</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">16</span><span class="token plain"> </span><span class="token hvariable">perlin</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.75</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">shape</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token operator" style="color:rgb(137, 221, 255)">\</span><span class="token hvariable">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">add</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[0.5 | 0.25]*4"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"jungbass:1"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">shape</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">krush</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[2 | -2]*8"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[drum drum:1 [~ drum] drum:1, drum:3*[[8 | 16]*4]]"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">krush</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudswet</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudsgain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudspitch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">16</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">smooth</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[-1 | 1 | 0]*16"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudstex</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">16</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">smooth</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[0.3 | 0.1 | 0.9]*4"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudspos</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"[0 | 1]*8"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudssize</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudsfb</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudsspread</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudsdens</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudsrvb</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">cloudsfreeze</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>Do you use Tidal with other tools / environments?</strong></p><p>I like to use Tidal together with Hydra and Vimix and like to use a game controller for external hardware.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tidal-contributions">Tidal Contributions<a class="hash-link" href="#tidal-contributions" title="Direct link to heading">​</a></h2><p><strong>How do you contribute to Tidal Cycles? What have you worked on?</strong>  </p><ul><li><p>I had the opportunity to work on Tidal as part of the Haskell Summer of Code 2021. There, I mainly worked on packaging Tidal to allow users to use it without an installation of the whole Haskell environment. This led to me developing a whole code <a href="https://github.com/polymorphicengine/tidal-gui" target="_blank" rel="noopener noreferrer">editor/interpeter</a> with some features especially designed for Tidal, like the display of which patterns are playing/muted, the current cps/bpm and the ability to control all features of the editor via OSC.</p></li><li><p>I'm also working on the <a href="https://github.com/tidalcycles/Tidal/tree/main/tidal-listener" target="_blank" rel="noopener noreferrer">tidal-listener</a> which also provides a standalone intrepreter that editor plugins etc. can use as an alternative to ghci.</p></li><li><p>Now I am mostly working on things that are related to the mini-notation and how it is parsed and interpreted. Most notably, I found a way to make the chord notation patternable and made it easier to add new custom chord modifiers.</p></li></ul><p><strong>What motivates you to work on Tidal?</strong>   </p><p>Curiosity of the inner workings of Tidal and the great community!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music.</strong>  </p><ul><li>I often improvise together with people who play more traditional instruments. I find it very interesting to use microphones to get what the others are playing as an input that I can manipulate through coding.</li><li>I'm also interested in multi-channel sound / acousmatic music and the possibilities of live-coding in this context. I think live-coding could be a great tool to be able to precisely control an acousmonium (a speaker orchestra, where each speaker has it's seperate channel). This means to not just make the sounds that are being heard, but also to distribute them across the speakers in real-time (this is often called diffusion).</li></ul><p><strong>What samples or instruments do you like to work with?</strong>  </p><p>Recently, I like to use very tiny grains of samples and process them with Tidal. What I like about this approach is that it is easy to manipulate and add effects to each grain individually. I also like to record my own samples with various microphones.</p><p><strong>What projects are you currently working on or planning? What's next?</strong>  </p><ul><li>I would like to work on a bigger scale AV performance using Tidal, Hydra and Vimix together, to create something like a short film.</li><li>I'm also working on an interactive sound installation where I will probably use Tidal to generate the sound.</li><li>I'm working on a new acousmatic piece for a composition competition.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions:<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h3><ul><li><a href="https://flimmerhaar.bandcamp.com/album/cilia" target="_blank" rel="noopener noreferrer">Bandcamp</a></li><li><a href="https://www.youtube.com/watch?v=ieQ7fA7ah3s" target="_blank" rel="noopener noreferrer">Acousmatic Music</a></li><li><a href="https://www.youtube.com/watch?v=-oMwPdgxqiI" target="_blank" rel="noopener noreferrer">Algo10</a></li><li><a href="https://polymorphicengine.github.io/" target="_blank" rel="noopener noreferrer">Linktree</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="other">Other<a class="hash-link" href="#other" title="Direct link to heading">​</a></h3><p>I'm currently working on a live-coding language that will extend the mini-notation to a full programming language. It is still in early development, but maybe somebody is interested in helping me out! I'm working on it <a href="https://github.com/polymorphicengine/minilambda/tree/types" target="_blank" rel="noopener noreferrer">here</a>.</p><img loading="lazy" src="/assets/images/polymorphic_engine_blog_picture-348f0742a79fd2402c43981c674672ef.jpg" alt="youth photo with computer" width="600" class="img_ev3q"><p>Comments: <a href="https://club.tidalcycles.org/t/new-blog-profile-polymorphic-engine/4616" target="_blank" rel="noopener noreferrer">Club Tidal Forum Thread</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidal Profile - Pondskater (aka Axel Ganz)]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_pondskater</link>
            <guid>/tidal_profile_pondskater</guid>
            <pubDate>Fri, 10 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[| Tidal Cyclist  |  Pondskater (aka Axel Ganz)   |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">Pondskater (aka Axel Ganz)</th></tr></thead><tbody><tr><td align="right">aka</td><td align="left">ganz</td></tr><tr><td align="right">Location</td><td align="left">Düsseldorf, Germany and Telavi, Georgia</td></tr><tr><td align="right">Years with Tidal</td><td align="left">3 yrs</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">SonicPi, Hydra</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://pondskater-music.bandcamp.com/" target="_blank" rel="noopener noreferrer">Bandcamp</a></td></tr><tr><td align="right">Other music/audio sw</td><td align="left">Audacity, Ableton Live with Granulator 2 and Wavetable</td></tr><tr><td align="right">Hardware</td><td align="left">Sequential Circuits Six-Trak, Faderfox PC4</td></tr></tbody></table><img loading="lazy" src="/assets/images/aganz-04da91f1e1d17068e5daa3523b15ce7d.jpg" alt="pondskater with controller" width="600" class="img_ev3q"><p>(photo: Heike Kurth)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><p><strong>What do you like about livecoding in Tidal? What inspires you?</strong>   </p><ul><li>Although I have been making electronic music for decades, I have never been the analytical type of music producer. I have always found it difficult to create more complex rhythmic structures and work out arrangements. And although I am not a developer and have no knowledge of programming at all, I was able to get into TC very quickly and find the approach very intuitive. In particular, I now find it easy to create complete rhythmic structures. Sometimes I don't know exactly what I'm doing, but some results speak for themselves. This fascinates and motivates me, even after three years. Tidal never gets boring. Besides, I have always been interested in new approaches and new musical territory. Live coding offers a great and ever-expandable field of experimentation.</li></ul><p><strong>How do you approach your livecoding sessions?</strong>  </p><ul><li>I usually start with a new feature, or an example or snippet of a new feature. I read a lot in the Tidal Club and often find inspiration in other people's questions and examples. Since my repertoire of tracks has been growing, I've also started to put key elements of previous tracks that I particularly like back on the dissecting table of my editor and vary them again and again. Variation, variation, variation. And - after three years, I find that my code tends to get simpler - but in do blocks.</li></ul><p><strong>What functions and coding approaches do you like to use?</strong>  </p><ul><li>I am a fan of <code>echoWith, chop, degradeBy, repeatCycles, mask</code>. And it changes. Some days ago I was very busy with <code>while</code> which I now rediscover. Now I like <code>cat</code> combined with euclidian rhythms very much.</li></ul><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">cat</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"tabla:04(3,8) tabla:04(5,8)"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.9</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.25</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">d2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">cat</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"kick(3,8)"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"kick(2,8)"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"kick(3,8)"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I also like to work with isorhythms, especially to get a tonal dynamic into a percussion pattern.</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">struct</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"7(7,8)"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sound</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"tah"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">nCountTo</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"list"</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;7 7 7 7 7 8 9&gt;"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.9</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">room</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.3</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">size</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.5</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">shape</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">range</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.0</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.5</span><span class="token plain"> </span><span class="token hvariable">tri</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">pan</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">slow</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">range</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.1</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.9</span><span class="token plain"> </span><span class="token hvariable">saw</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Recently I started to experiment with @jwaldmann's fantastic random-not-random ideas.
<a href="https://club.tidalcycles.org/t/random-not-random/4522" target="_blank" rel="noopener noreferrer">https://club.tidalcycles.org/t/random-not-random/4522</a></p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> </span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">getScale</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">scaleTable</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">++</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"wavemorphian"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">7</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">10</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token number" style="color:rgb(247, 140, 108)">11</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">d1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"r808(5,8)"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.9</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">room</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.5</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">size</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.9</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">d2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">jux</span><span class="token plain"> </span><span class="token hvariable">rev</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">stack</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"> </span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"wavemorphian"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">cat</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">replicate</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;4&gt;"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">irand</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sxt22"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"> </span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"wavemorphian"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">cat</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">replicate</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;4&gt;"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">irand</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sxt31"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"> </span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"wavemorphian"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">cat</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">replicate</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;4&gt;"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">irand</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sxt50"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.5</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">legato</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1.25</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"> </span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"wavemorphian"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">cat</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">replicate</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;2&gt;"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">irand</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sxt31"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.6</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2.0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"> </span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"wavemorphian"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">cat</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">replicate</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;3&gt;"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">irand</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sxt42"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.5</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2.0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"> </span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"wavemorphian"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">cat</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">replicate</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;1&gt;"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">irand</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sxt60"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.7</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2.0</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">nudge</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.25</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token hvariable">n</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"> </span><span class="token hvariable">scale</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"wavemorphian"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">cat</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">replicate</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">segment</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;1&gt;"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">irand</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sxt69"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">gain</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.7</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2.0</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">nudge</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.675</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">room</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.5</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">#</span><span class="token plain"> </span><span class="token hvariable">size</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0.9</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this context, perhaps this could also be interesting: <a href="http://www.elizabethmargulis.com/on-repeat" target="_blank" rel="noopener noreferrer">Elizabeth Margulis On Repeat: How Music Plays the Mind</a>  </p><p><strong>Do you use Tidal with other tools / environments?</strong>  </p><ul><li>In the beginning, I really wanted to use Tidal to control hardware synthesizers (Six-Trak, Juno 106, etc.), based on sonic demands. In the meantime, I have largely discarded this approach. Instead, I create a sound on the Six-Trak, then sample a chromatic octave and continue working with these samples directly in TC. The many possibilities of sample chopping and editing functions within TC offer many more sonic possibilities that I don't have within the hardware. I also like to use a hardware controller to adjust parameters live in Tidal.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tidal-contributions">Tidal Contributions<a class="hash-link" href="#tidal-contributions" title="Direct link to heading">​</a></h2><p><strong>How do you contribute to Tidal Cycles? What have you worked on?</strong>  </p><ul><li>Since I don't have a clue about Haskell, I can't directly contribute to the further development of Tidal. I can only share my experiences as a user, which I do e.g. at Toplap Düsseldorf meetups. I also try to contribute to the development of the community and the use of Tidal Cycles by planning and running livecoding events and LiveCoding beginners workshops in Düsseldorf, Germany and in Tbilisi, Georgia. Not least for this reason, I would now like to take a look at Strudel.</li></ul><p><strong>What motivates you to work on Tidal?</strong>   </p><ul><li>Basically, it's the curiosity to scratch musical boundaries and - if it goes well - to enter new musical terrain here and there.</li></ul><p><strong>Future perspectives</strong></p><ul><li><p>Yaxu’s <a href="https://tidalcycles.org/docs/patternlib/tutorials/course1" target="_blank" rel="noopener noreferrer">Learning Tidal Cycles Course</a> was my general door opener to using Tidal. Thank you so much for this wonderful introduction, @Yaxu! And since then the <a href="https://club.tidalcycles.org/" target="_blank" rel="noopener noreferrer">Tidal Club</a> is a permanent resource of knowledge, which I receive as a great gift at any time. I hereby expressly would like to thank the entire Tidal community!</p></li><li><p>On the other hand, many more advanced techniques and knowledge about Haskell and Tidal have remained hidden from me until now. For example, the type signatures are still a mystery to me. I can't really use them. I could imagine that I'm not the only musician who likes to work with Tidal but has no basic knowledge of programming or Haskell and would welcome the opportunity for some kind of further self-help training.</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music.</strong>  </p><ul><li>It's never easy to talk about your music. I think I hang somewhere in between. Between dancefloor music on the one hand and really abstract conceptual contemporary music on the other. My music is certainly more influenced by a pop music context than an academic one. Maybe you could call it downbeat electronic, somehow influenced by industrial and IDM. I want to counterbalance this with a certain melodic touch and erratic voices.</li></ul><p><strong>How has your music evolved since you have been livecoding?</strong>  </p><ul><li>Hm, I hope that since then at least the rhythms have become a bit more interesting.</li></ul><p><strong>What samples or instruments do you like to work with?</strong>  </p><ul><li>In order not to succumb to the danger of repeating classic analogue sounds over and over again, I process the Six-Trak sounds in Robert Henke's Granulator 2 within Live. Alternatively, I now also create sounds and loops with the Ableton Live Wavetable Synthesizer.</li></ul><p><strong>What projects are you currently working on or planning? What's next?</strong>  </p><ul><li>I thought I should take the opportunity of the proximity of this years ICLC in Utrecht, so I am currently planning a small live tour of Europe for April and May. I am also helping to organize another satellite event on 05 and 06 May 2023 in Düsseldorf. After that I would like to finally try the MrReason's <a href="https://github.com/thgrund/tidal-looper" target="_blank" rel="noopener noreferrer">Tidal Looper</a>.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions:<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h3><ul><li><a href="https://pondskater-music.bandcamp.com/" target="_blank" rel="noopener noreferrer">https://pondskater-music.bandcamp.com/</a></li><li><a href="https://www.instagram.com/pondskater_music/" target="_blank" rel="noopener noreferrer">https://www.instagram.com/pondskater_music/</a></li><li><a href="https://www.youtube.com/@toplapddorf/streams" target="_blank" rel="noopener noreferrer">https://www.youtube.com/@toplapddorf/streams</a></li><li><a href="https://www.youtube.com/watch?v=9i_7vZgVXsw&amp;list=PLMBIpibV-wQIdS6D1vdijRZPfLBrRP9A_&amp;index=25&amp;t=933s" target="_blank" rel="noopener noreferrer">Solstice Stream - Dec 2022</a></li><li><a href="https://www.youtube.com/watch?v=UA7Ca6gaSvc&amp;t=974s" target="_blank" rel="noopener noreferrer">Toplap Düsseldorf Stream 31.12.2021</a></li><li><a href="https://www.youtube.com/watch?v=qGXQVNUWFc0&amp;t=1845s" target="_blank" rel="noopener noreferrer">Toplap Düsseldorf Concert 29.10.2021</a> from about minute 31:30:</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidal Profile - ndr_brt]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_ndr_brt</link>
            <guid>/tidal_profile_ndr_brt</guid>
            <pubDate>Fri, 03 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[| Tidal Cyclist  |  ndr_brt   |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">ndr_brt</th></tr></thead><tbody><tr><td align="right">Location</td><td align="left">Italy</td></tr><tr><td align="right">Years with Tidal</td><td align="left">4  yrs</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">Hydra, Supercollider, Threnoscope, ByteBeat</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://umanoudito.bandcamp.com/" target="_blank" rel="noopener noreferrer">Bandcamp</a></td></tr><tr><td align="right">Code online</td><td align="left"><a href="https://github.com/ndr-brt/sc-adente" target="_blank" rel="noopener noreferrer">GitHub</a></td></tr><tr><td align="right">Other music/audio sw</td><td align="left">sox, ffmpeg, Ardour, Audacity</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><p><strong>What do you like about livecoding in Tidal? What inspires you?</strong>   </p><ul><li>When I met it for the first time everything was a wow, the cycle concept, function composition, mini-notation, patternization...
Nowadays I'm still able to find inspiration watching other people livecoding or reading the posts on tidal club, especially when there are custom functions listed.</li></ul><p><strong>How do you approach your livecoding sessions?</strong>  </p><ul><li>I always try to start from scratch, when I code alone I usually focus on a single function and try to get everything out of it, while I'm in front of an audience I just go with the flow.</li></ul><p><strong>What functions and coding approaches do you like to use?</strong></p><ul><li>I'm a huge fan of <code>superimpose</code> (used with the <code>si</code> shortand), especially mixed with <code>hurry</code>, in my "single sample runs" I create layers of the same sample playing at different speed/density to create rhythm and melodic patterns.
For example:</li></ul><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token hvariable">t</span><span class="token plain"> </span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">p</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">superimpose</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">hurry</span><span class="token plain"> </span><span class="token hvariable">t</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token hvariable">f</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token hvariable">p</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"e"</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sine"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>this is a really simple example, and from here you can start and mixup all sort of other functions, I also love <code>chunk</code>, that moves things a lot:</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">chunk</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">7</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">|*</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1.5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"e"</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sine"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The fun is that, if you replace <code>sin</code> with, for example, a percussive sample like <code>bd</code>, here you have a nice drum pattern.</p><p>Then to completely unhinge the structure, <code>chew</code> and <code>bite</code> are also good friends:</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">chew</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">iter</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"3 1 0"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">chunk</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">7</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">|*</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1.5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"e"</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sine"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">-- or</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">d1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">bite</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">4</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">iter</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"3 0 1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">chunk</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">7</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">|*</span><span class="token plain"> </span><span class="token hvariable">speed</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1.5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"e"</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">sh</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token operator" style="color:rgb(137, 221, 255)">$</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sine"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I often try to escape from this mindset but at the end I fall into it most of the times.</p><p><strong>Do you use Tidal with other tools / environments?</strong></p><ul><li>I tried it to control some drum machines circuit bent by me but at the end I find the hardware overcomplicated and I prefer to play soft-synths, especially Supercollider: everything in a box and controllable with the keyboard.</li><li>I used Tidal also to <a href="https://www.youtube.com/watch?v=lbUCSVC4GPs" target="_blank" rel="noopener noreferrer">draw stuff with p5 during some sessions</a>.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tidal-contributions">Tidal Contributions<a class="hash-link" href="#tidal-contributions" title="Direct link to heading">​</a></h2><p><strong>How do you contribute to Tidal Cycles? What have you worked on?</strong></p><ul><li>I learned Haskell only to contribute to Tidal. I'm passionate about reading code and get the insights of the software, on the main codebase I solved some bugs and added some features mainly in the mini-notation section (<a href="https://github.com/tidalcycles/Tidal/commits?author=ndr-brt" target="_blank" rel="noopener noreferrer">tidal commits</a>).</li><li>I took care of the migration from Travis CI to GitHub Actions.</li><li>Atom -&gt; Pulsar: At a certain point I noticed that the Atom Plugin was practically unmaintained so I proposed to be its maintainer, and I brought it back on track. Now Atom has been disbanded but luckily the Pulsar community is vibrant and the Tidal plugin is already fully compatible with it. It was a pretty satisfying migration (<a href="https://github.com/tidalcycles/pulsar-tidalcycles" target="_blank" rel="noopener noreferrer">Pulsar-tidalcycles</a>).</li></ul><p><strong>What motivates you to work on Tidal?</strong></p><ul><li>Not to be selfish but most of the work I did had direct impact on the use I'm doing of Tidal, I guess because it's easy to contribute when you know why something needs to be improved/fixed.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music.</strong></p><ul><li>Well, most of the time it is noisy, sometimes mellow, always not danceable.</li></ul><p><strong>How has your music evolved since you have been livecoding?</strong></p><ul><li>For sure it changed, I'm not sure it "evolved", sometimes I think I was more creative when I was learning how to use the instrument, now it's easier to get into the loop of being repetitive.</li></ul><p><strong>What samples or instruments do you like to work with?</strong></p><ul><li>I try not to use the default samples nor the default synths, I sometimes write my own synths, sometimes I record my own samples or I get them from various sources.  </li></ul><p><strong>What projects are you currently working on or planning? What's next?</strong></p><ul><li>I recently finished a record that was a collaboration with Naotodate, that's a non-livecoding noise friend from Italy (<a href="https://umanoudito.bandcamp.com/album/a-letter-is-a-number-a-feeling-is-a-code" target="_blank" rel="noopener noreferrer">on bandcamp</a>).</li><li>Now I'm working to another collaboration record, this time with ETOL, an amazing italian livecoder. To be fair the project it is still in an embryonic state.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions:<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h3><ul><li><a href="https://umanoudito.bandcamp.com/" target="_blank" rel="noopener noreferrer">Bandcamp</a></li><li><a href="https://www.youtube.com/@ndrbrt" target="_blank" rel="noopener noreferrer">YouTube</a> (not only livecoding) - here are a few of them using TidalCycles<ul><li><a href="https://www.youtube.com/watch?v=XYk096aDOcU&amp;t=54s" target="_blank" rel="noopener noreferrer">single sample run #4: gtr [u-mano u-dito]</a></li><li><a href="https://www.youtube.com/watch?v=CrOfleUR5-c" target="_blank" rel="noopener noreferrer">single sample run #6: uxay [u-mano u-dito]</a></li><li><a href="https://www.youtube.com/watch?v=Zk3ICtit3tM" target="_blank" rel="noopener noreferrer">TidalCycles + Mutable Instruments Clouds droning sounds</a></li><li><a href="https://www.youtube.com/watch?v=3vUXVsh0ICY" target="_blank" rel="noopener noreferrer">Pinging filters</a></li></ul></li><li><a href="https://soundcloud.com/umanoudito" target="_blank" rel="noopener noreferrer">Soundcloud</a> (not really updated)</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="other">Other<a class="hash-link" href="#other" title="Direct link to heading">​</a></h3><ul><li>I'm a software engineer by day and a punk "musician" by night, I played and still play guitar/drums/bass in various bands</li><li>I'm also part of Toplap Italia, I organize livecoding shows sometimes</li><li>I've been a Linux user for like 20 years</li><li>I like diy electronics, circuit bending and fixing broken stuff found in the trash</li><li>Either I talk too much or I don't talk at all</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidal Profile - BuboBubo (Raphaël Maurice Forment )]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_bubobubo</link>
            <guid>/tidal_profile_bubobubo</guid>
            <pubDate>Tue, 28 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[| Tidal Cyclist  | Raphaël Maurice Forment |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">Raphaël Maurice Forment</th></tr></thead><tbody><tr><td align="right">aka</td><td align="left">BuboBubo</td></tr><tr><td align="right">Location</td><td align="left">Lyon/Paris, France</td></tr><tr><td align="right">Years with Tidal</td><td align="left">4 yrs</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">SuperCollider, ORCA, FoxDot</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://bubobubo.bandcamp.com/album/archive-grrrnd-zero" target="_blank" rel="noopener noreferrer">Bandcamp</a></td></tr><tr><td align="right">Code online</td><td align="left"><a href="https://github.com/Bubobubobubobubo" target="_blank" rel="noopener noreferrer">GitHub</a></td></tr><tr><td align="right">Other music/audio sw</td><td align="left">SuperCollider, MaxMSP, SunVox, VCVRack</td></tr></tbody></table><img loading="lazy" src="https://cookie.paris/static/2691e91b9da74087ddb672eb917bec9e/04f58/8.webp" width="600" height="450" class="img_ev3q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><p><strong>What do you like about livecoding in Tidal? What inspires you?</strong>   </p><p>TidalCycles taught me a lot about music and improvisation. I used not to care too much about rhythm and structures when improvising. The emphasis that Tidal is putting on rhythm can actually be beneficial. It pushes you to explore some aspects of music you might be neglecting: complex time signatures, intriguing rhythms, etc... I also like the fact that it feels like a "metaphoric" language to talk about music that ends up taking shape while typing on the keyboard. Making music with Tidal, you quickly start to put a name on specific patterning concepts.</p><p>Tidal is also super fun: I usually have a great time when improvising during a jam session using it, especially when it blends with other non algorithmihc instruments :)</p><p><strong>How do you approach your livecoding sessions?</strong>  </p><p>I like to setup a system that I find interesting or playful. I spend quite some time organising my instruments, effects, mixing desk, controllers, etc... Whenever I find a system that I find interesting to play with, I'm generally not preparing much more. I know that music will just flow if I really start improvising and exploring the system. I just start tinkering to discover what I have on my hands. Preparing such systems takes most of my time before gigs. I think that I've never played twice with the same exact setup!</p><p>I really like jamming with friends as well without preparing much, using my own collection of audio samples. When coding alone, you almost mechanically end up doing too much for your own sake. Friends will not allow such things to happen. You must listen and adapt! Nowadays, synchronizing Tidal with pretty much anything has also became much more simpler than it used to be. One more reason to do it!</p><p>One other thing is that.. I usually don't record my stuff! I play live, and then boom, I'm gone. Live coding is great because it's ephemeral. Once you stop coding, you should start again to get the same result.. except it's never the same.</p><p><strong>What functions and coding approaches do you like to use?</strong>  </p><p>I'm not very good at learning the standard library, which is why I ended up writing documentation to actually discover more of it! I have some techniques I always like to play with:</p><ul><li>playing with a large collection of samples, without ordering or sorting them beforehand. Iterating through a directory, finding iterations that sound good.</li><li>writing structures: using <code>cat</code>, <code>ur</code>, <code>stack</code>, etc...</li><li>Nesting groupings (<code>[]</code>) and using <code>&lt;&gt;</code> a lot to get the most out of patterns that are short to write.</li><li>using <code>superimpose</code> and <code>sometimes</code> too much, to the point where your pattern ends up being a totally different thing compared to what you started with.</li><li><em>soloing</em> by just writing a one-note pattern that I edit really fast.</li></ul><p>Some people use extensive collections of custom functions. I never could quite grasp Haskell, so I ended up maximising what I truly understood in the language!</p><p><strong>Do you use Tidal with other tools / environments?</strong>  </p><p>All the time. I usually separate my orbits (stereo tracks) to a DAW or to another software for post-processing. I end up adding some controls to Tidal to control send/returns and effects without leaving the keyboard. Tidal is now also one of my favorite way to interact with any piece of gear that I can lay my hands on.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tidal-contributions">Tidal Contributions<a class="hash-link" href="#tidal-contributions" title="Direct link to heading">​</a></h2><p><strong>How do you contribute to Tidal Cycles? What have you worked on?</strong>  </p><p>I used to contribute a lot to the documentation ~1 year ago. When I first started playing with Tidal, all the good stuff was documented in the old wiki website. My first "invisible" contribution was to write some amount of french translation that wasn't easily accessible because the system had its quirks. When the new website suddenly appeared, I ported most of the old website to the new website, reorganising pretty much everything to my liking :)</p><p>I was very cautious, trying to make information easy to discover, specifically because I spent so much time digging in the past! This effort has now turned into a very healthy collective effort and the Tidal documentation is something to proud of for everyone who contributed to it!</p><p><strong>What motivates you to work on Tidal?</strong>   </p><p>Nowadays, I don't contribute that often by writing/coding stuff so I can't say that I'm motivated to make the system any better! However, I really love to teach Tidal whenever I can. I had the opportunity to teach it in a graduate class at my current university. I also teach Tidal to whoever is interested and sometimes during formal/informal workshops, etc...</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music.</strong>  </p><p>I love it when the music I play serves as an outlet and a release. I don't really play the music I enjoy listening which is something that I always found intriguing... I've learned to somehow accept it. I usually listen to folk / rock music with a fair amount of jazz but what I love playing the most with Tidal is hard/fast rhythmic music! Meaning a deluge of drums, saturation and distortion, mangled samples, etc... I also think that Tidal forces you to go in that direction but it's a topic for another day!</p><p><strong>How has your music evolved since you have been livecoding?</strong>  </p><p>It changed a LOT about the way I approach music-making. Before I started learning Tidal, I had a mild interest in computers and synthesizers. Nowadays, I'm living in a room full of audio cables / computers. Tidal was very influencial in the way I think about music, but that's also because I've read a lot of the things Alex wrote about livecoding / Tidal. The most important thing that Tidal has taught me is that algorithmic music can actually be simple. Its simplicity is what allows you to go deep, by combining simple ideas and processes and ending up with fascinating results.</p><p>I also don't play much piano anymore, and it forced me to pick up my guitar again... just to stretch my fingers after typing so much on a keyboard!</p><p><strong>What samples or instruments do you like to work with?</strong>  </p><ul><li>I like "joke" samples. I ended up soloing with the sound of my oven cooking a pizza a few months ago. <code>crow</code>, without doubt, is the best audio sample in the default library. By trying hard enough, you can make them sound like the best thing you've ever heard, or fail!</li><li>Nowadays, I'm specifically looking for instruments with few parameters to tweak. Few parameters means that you are more likely to remember all of them when writing a pattern!</li><li>I feel like I'm repeating myself but: large collections of unsorted samples!</li></ul><p>Sometimes, I also try to play with having the minimum amount of control on the Tidal side and relying more on real instrumentst that I can tweak with my hands: modular synthesizers (sending CV and GATE only), drum machines, etc... It feels more natural to launch a pattern and to tweak its output afterhands.</p><p><strong>What projects are you currently working on or planning? What's next?</strong>  </p><p>I'm working on my PhD manuscript... which is about live coding! I've been studying live coding languages and techniques for quite some time now and I'm trying to write about this delicate topic by giving it justice! It's an incredibly dense topic and I feel inclined not to give up on any detail that I find fascinating about this art practice. To be more specific, my angle is to think about how live coding languages are inspired by certain aesthetical/political/technical ideas or concepts and how the implementation of these are giving rise to a new range of ideas inspired by the result we're now experiencing :)</p><p>I've also been working for quite some time on my own live coding environment named <a href="https://sardine.raphaelforment.fr" target="_blank" rel="noopener noreferrer">Sardine</a>. It started out as an experiment to reimplement some of the things I saw during my study; trying to understand them by doing! Then.. it started to mutate into its own thing! I'm still actively working on it and I use it for my own performances nowadays. I have a group of friends and contributors that have been helping me to make it, and they also added their own ideas to it. I love to craft things where you put so much energy and craft! Alex was right saying that patterns are a valuable area of study! I see patterns all the time, and sometimes cross the path with some ideas already explored by Tidal! Sardine is also quite inspired by Tidal, it can even piggy-back on SuperDirt!</p><p>My current plan is to end all of this! Being done with both developing Sardine -- at least most of what I would like it to be -- and writing my manuscript!</p><p>... If I have one thing to confess ...</p><p>My wildest dream would be to actually play bossa nova with grace using a live coding language. I don't think that I'll ever succeed but dreams are never big enough! I feel that live coding performances are missing some of that expressivity that "real" musicians have!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions:<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h3><ul><li>Your Website : <a href="https://raphaelforment.fr" target="_blank" rel="noopener noreferrer">Personal</a> | <a href="https://sardine.raphaelforment.fr" target="_blank" rel="noopener noreferrer">Sardine</a></li><li><a href="https://www.youtube.com/@raphaelforment7668" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a href="https://cookie.paris" target="_blank" rel="noopener noreferrer">Cookie Collective</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="other">Other<a class="hash-link" href="#other" title="Direct link to heading">​</a></h3><p>Big shout out to my friends from the <a href="https://cookie.paris" target="_blank" rel="noopener noreferrer">Cookie Collective</a> and from the Digital Audio Community in Lyon! They are also part of why I find live coding so interesting nowadays. It's a treat to make music / chat / collaborate with them. The french scene is more alive than ever but I feel that not much is said about it. Hope to meet with other live coders from all accross the world in the coming years!</p><p>Thanks to the Tidal community and to the wider TOPLAP / live coding community as well!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidal Profile - tedthetrumpet (J Simon van der Walt)]]></title>
            <link>https://doc.tidalcycles.org/blog/tidal_profile_tedthetrumpet</link>
            <guid>/tidal_profile_tedthetrumpet</guid>
            <pubDate>Sat, 25 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[| Tidal Cyclist  | J Simon van der Walt |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">J Simon van der Walt</th></tr></thead><tbody><tr><td align="right">aka</td><td align="left">tedthetrumpet</td></tr><tr><td align="right">Time with Tidal</td><td align="left">3  yrs</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">SuperCollider, Hydra, Strudel, Punctual</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://tedthetrumpet.bandcamp.com/" target="_blank" rel="noopener noreferrer">Bandcamp</a>, <a href="https://soundcloud.com/tedthetrumpet" target="_blank" rel="noopener noreferrer">SoundCloud</a>, <a href="https://www.youtube.com/tedthetrumpet" target="_blank" rel="noopener noreferrer">YouTube</a></td></tr><tr><td align="right">Other music/audio sw</td><td align="left">Audacity, MuseScore, Logic</td></tr></tbody></table><img loading="lazy" src="/assets/images/jsvdw-birdhide-5c84e770ba6ca3d6b19c7a072a7f3c33.jpg" alt="ttt birding" width="600" class="img_ev3q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><p><strong>What do you like about livecoding in Tidal?</strong></p><ul><li>I have no background in computer science, but I find the syntax suprisingly intuitive. Also, by comparison with SuperCollider, you can get a lot of music going with very little typing.</li></ul><p><strong>How do you approach your livecoding sessions?</strong></p><ul><li>Two main approaches, I guess. Usually it's just <a href="https://diode.zone/w/ocNZjYtoL54a1rcymwH2Gg" target="_blank" rel="noopener noreferrer">quick improvisations</a> on the spur of the moment, often ending up with nothing more than a one minute long sketch. I'm not particularly trying to create anything specific, and I just stop when I have something that sounds interesting.</li><li>The other approach is when I have an idea for a particular sound or gesture or structure that I want to create. This is usually less succesful: I've got a lot of <a href="https://youtu.be/zQwASJEnYEY" target="_blank" rel="noopener noreferrer">abandoned projects</a> where I tried and failed over a period of days or weeks to achieve some aim or other.</li></ul><p><strong>What functions and coding approaches do you like to use?</strong></p><ul><li>My favourite technique is one that some people frown on: making random but fixed patterns that repeat themselves. So, for instance, rather than explicitly creating a pattern in the mini notation, I usually start with something like <code>d1 $ n (loopFirst $ shuffle 8 $ run 8) # s "peri"</code>. (Which is actually one place where SuperCollider wins in conciseness, it's basically <a href="http://doc.sccode.org/Classes/Pshuf.html" target="_blank" rel="noopener noreferrer">Pshuf</a>).</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music. What musical genre(s) or style(s) describe it best?</strong></p><ul><li>Three main approaches: er… <a href="https://youtu.be/yN1STGvmRqY" target="_blank" rel="noopener noreferrer">gamelan</a>, <a href="https://soundcloud.com/tedthetrumpet/twaytee" target="_blank" rel="noopener noreferrer">algorave</a>, and <a href="https://youtu.be/ID4Zh3C2Oso" target="_blank" rel="noopener noreferrer">abstract</a>? I should say 'gamelan': in other words music that may use gamelan samples and ideas from Javanese or Balinese music without <em>really</em> being gamelan music. I have no proper skills, knowledge or understanding when it comes to dance music, but it's always fun to try to improvise an algorave banger live. 'Abstract' might be when I use something like <code>slowstripe</code> to defeat any sense of pulse and start pitching samples down a couple of octaves.</li></ul><p><strong>How has your music evolved since you have been livecoding?</strong></p><ul><li>I could say that livecoding saved my musical creativity after I finished my <a href="https://archive.org/details/TheOtherOtherHand" target="_blank" rel="noopener noreferrer">PhD</a>! I got kind of burned out after spending seven years creating a conventional portfolio of 'compositions'. With code I was able to just make stuff for myself without having to score it or get other people to play it or justify it to anyone.</li></ul><p><strong>What samples or instruments do you like to work with?</strong></p><ul><li>My own samples. For me, creating and using my <a href="https://github.com/tedthetrumpet/testpage/tree/master/samples/tptm" target="_blank" rel="noopener noreferrer">own</a> <a href="https://github.com/tedthetrumpet/testpage/tree/master/samples/longwhistles" target="_blank" rel="noopener noreferrer">sets</a> of sounds is kind of fundamental to the creative process. For the purposes of a quick rave-up I'll happily turn to the standard Tidal set, but for me to really feel ownership of a piece I need to use samples and synths that I have a personal stake in.</li></ul><p><strong>What projects are you currently working on / planning? What's next?</strong></p><ul><li>I need to find a way to release my <a href="https://soundcloud.com/tedthetrumpet/thealbumteaser" target="_blank" rel="noopener noreferrer">actual first album</a>. I finished it several years ago, but the label who were going to release it stopped functioning, so… I don't feel like I want to release it myself but I haven't found anyone else who is interested. Yet.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tidal-contributions">Tidal Contributions<a class="hash-link" href="#tidal-contributions" title="Direct link to heading">​</a></h2><p><strong>How do you contribute to Tidal Cycles? What have you worked on?</strong></p><ul><li>I'm a musician not a developer, so I'm not really able to 'contribute' in the sense of code! However, I have made some <a href="https://github.com/tedthetrumpet/testpage/tree/master/nmsamples" target="_blank" rel="noopener noreferrer">gamelan sample banks</a> available, asked (hopefully useful) questions on forums, taught Tidal at <a href="https://pure.rcs.ac.uk/portal/en/persons/j-simon-van-der-walt(449d6ab3-50fe-4a02-bc83-76e1f88b2769).html" target="_blank" rel="noopener noreferrer">my institution</a>, and initiated the <a href="http://www.nagamas.co.uk/floatinggold/" target="_blank" rel="noopener noreferrer">Floating Gold</a> project that used MiniTidal in <a href="https://github.com/dktr0/estuary" target="_blank" rel="noopener noreferrer">Estuary</a>.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions:<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h2><ul><li>Most of the things I've put out are actually in SuperCollider, but these are Tidal/MiniTidal –<ul><li>Improvising 'gamelan' music in Estuary <a href="https://diode.zone/w/ppenMJ4p9W2b41pDe7ZNiA" target="_blank" rel="noopener noreferrer">https://diode.zone/w/ppenMJ4p9W2b41pDe7ZNiA</a></li><li>Short Estuary piece 'brarnarnarnarnard' <a href="https://www.youtube.com/watch?v=tV4G1z55ePA" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=tV4G1z55ePA</a></li><li>Solstice Night Stream Dec 2022 - Livecoding with Audacity <a href="https://www.youtube.com/watch?v=0YpgHdJY-Kw&amp;list=PLMBIpibV-wQIdS6D1vdijRZPfLBrRP9A_&amp;index=6" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=0YpgHdJY-Kw&amp;list=PLMBIpibV-wQIdS6D1vdijRZPfLBrRP9A_&amp;index=6</a></li><li>Part of a longer jam I'd forgotten about, starts abstract and gets a bit more rave later  <a href="https://youtu.be/jDl_ALEq4Zs?t=575" target="_blank" rel="noopener noreferrer">https://youtu.be/jDl_ALEq4Zs?t=575</a></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other">Other<a class="hash-link" href="#other" title="Direct link to heading">​</a></h2><img loading="lazy" src="/assets/images/jspcanscrop-0939c06bfd788d5dce343d57362f0d8a.png" alt="youth photo with vintage synth" width="600" class="img_ev3q"><ul><li>With my brother, late 1970s, homebrew <a href="http://pcbunn.cithep.caltech.edu/jjb/Synthesizers/Minisonic2/default.htm" target="_blank" rel="noopener noreferrer">analog synth</a>.</li><li><a href="https://jsimonvanderwalt.com" target="_blank" rel="noopener noreferrer">jsimonvanderwalt.com</a></li><li><a href="https://tedthetrumpet.hotglue.me/" target="_blank" rel="noopener noreferrer">tedthetrumpet.hotglue.me</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tidal Profile - cleary (Bernard Gray)]]></title>
            <link>https://doc.tidalcycles.org/blog/contributor_profile_cleary</link>
            <guid>/contributor_profile_cleary</guid>
            <pubDate>Thu, 16 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[| Tidal Cyclist  | Bernard Gray |]]></description>
            <content:encoded><![CDATA[<table><thead><tr><th align="right">Tidal Cyclist</th><th align="left">Bernard Gray</th></tr></thead><tbody><tr><td align="right">aka</td><td align="left">cleary</td></tr><tr><td align="right">Time with Tidal</td><td align="left">3  yrs</td></tr><tr><td align="right">Contributor since</td><td align="left">2017</td></tr><tr><td align="right">Other LiveCoding env</td><td align="left">Estuary, Punctual, Hydra, ORCA</td></tr><tr><td align="right">Music available online</td><td align="left"><a href="https://soundcloud.com/bergra" target="_blank" rel="noopener noreferrer">SoundCloud</a></td></tr><tr><td align="right">Code online</td><td align="left"><a href="https://github.com/cleary/livecode/" target="_blank" rel="noopener noreferrer">GitHub</a></td></tr><tr><td align="right">Other music/audio sw</td><td align="left">Ubuntu Studio/Ardour/Carla/Vital/mi-ugens</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tidal-contributions">Tidal Contributions<a class="hash-link" href="#tidal-contributions" title="Direct link to heading">​</a></h2><p><strong>How do you contribute to Tidal Cycles? What have you worked on?</strong></p><p>I think I've had a go at just about everything:</p><ul><li>I developed and maintain a <a href="https://github.com/cleary/ansible-tidalcycles" target="_blank" rel="noopener noreferrer">Linux installer</a> in Ansible</li><li>I've added a few <a href="https://github.com/tidalcycles/Tidal/commits?author=cleary" target="_blank" rel="noopener noreferrer">simple patches to</a>/nutted out ideas for tidal itself, particularly around the <a href="https://club.tidalcycles.org/t/rfc-working-on-making-chord-naming-chordlist-more-consistent/2717" target="_blank" rel="noopener noreferrer">chords module</a></li><li>I've written <a href="https://github.com/tidalcycles/tidal-doc/commits?author=cleary" target="_blank" rel="noopener noreferrer">documentation</a></li><li>I often <a href="https://youtube.com/playlist?list=PLt8O3WdGnQjdg8PPpRgsw4w9bSmX5JY7b" target="_blank" rel="noopener noreferrer">play in</a>, and have helped organise some of the Solstice Marathon Livestreams</li><li>I am active and support others on the <a href="https://club.tidalcycles.org/u/cleary/summary" target="_blank" rel="noopener noreferrer">forums</a> and the discord support channels</li><li>For the last 2 years I've been hosting a weekly collaborative (mostly tidal) livecoding session called <a href="https://youtube.com/playlist?list=PLt8O3WdGnQjfCNVBK2O0W0_nwiSgWIoFR" target="_blank" rel="noopener noreferrer">WeekendJam</a> for anyone to come along and have a jam with me</li><li>I've written and run tidal-based <a href="https://decoded.livecode.au" target="_blank" rel="noopener noreferrer">workshops</a>, online and <a href="https://allevents.in/griffith/decoded-%E2%80%94%E2%80%94-an-artistic-livecoding-workshop/200022125384118" target="_blank" rel="noopener noreferrer">in</a> <a href="https://infrequency.au/" target="_blank" rel="noopener noreferrer">person</a> to try and network/raise the profile of the <a href="http://www.ozchi.org/2022/creativity.html" target="_blank" rel="noopener noreferrer">livecoding scene in Australia</a></li></ul><p><strong>What motivates you to be a Tidal contributor?</strong></p><ul><li>The community is lovely, they give/have given me a lot and I like to return that where I can. The project allows for such vast and varied possibilities in learning and creation, and that's what keeps me interested. The focus on inclusivity, sharing and generally "anti-gatekeeping" is a huge drawcard for me too.</li><li>I particularly enjoy the WeekendJams - I get to meet new people, share inspirations with all the different ideas all mashed together, learn, and just generally have a great time. I've made some great friends through jams.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="livecoding">Livecoding<a class="hash-link" href="#livecoding" title="Direct link to heading">​</a></h2><img loading="lazy" src="https://photos.smugmug.com/photos/i-7r8LGsw/0/O/i-7r8LGsw.jpg" width="600" height="450" class="img_ev3q">(photo: Jason Richardson)<p><strong>What do you like about livecoding in Tidal?</strong></p><ul><li>It's concise, it's (fairly) self-explanatory, and it's very easy to be both creatively specific and random as required.</li></ul><p><strong>How do you approach your livecoding sessions?</strong></p><ul><li>For solo performances, I prepare something - usually a "scaffolded" set of code which allows for creative path choosing during the set.</li><li>For the WeekendJam sessions, I never prepare anything beyond the occasional group idea for exploration (which is broached 5 mins before start time).</li></ul><p><strong>What functions and coding approaches do you like to use?</strong></p><ul><li>I tend to make a point to separate my rhythmic and harmonic elements for easy reuse (<code>struct</code> and <code>n</code>/<code>note</code>) - which is a hangover from the collaborative nature of the WeekendJam sessions. I keep the code for most sets I play on <a href="https://github.com/cleary/livecode/tree/main/sets" target="_blank" rel="noopener noreferrer">Github</a>.</li></ul><p><strong>Do you use Tidal with other tools / environments?</strong></p><ul><li>I've done some external software synth control (Vital/Yoshimi), I also have a Midi Fighter Twister controller which sometimes gets a run. I tend to keep it pretty vanilla though, particularly since doing the workshop tours last year. Also, <a href="https://estuary.mcmaster.ca" target="_blank" rel="noopener noreferrer">estuary</a> of course.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="music">Music<a class="hash-link" href="#music" title="Direct link to heading">​</a></h2><p><strong>Tell us about your livecoding music. What musical genre(s) or style(s) describe it best?</strong></p><ul><li>Varied? I don't really know much about genres - for more musical stuff, I tend to make use of western music theory. If I'm doing solely rhythmic stuff I tend to try and push myself <a href="https://youtu.be/to1_4id_oyc" target="_blank" rel="noopener noreferrer">outside my common use 4/4 6/8 time signatures</a> - the few patterns I did for <a href="https://youtube.com/playlist?list=PLt8O3WdGnQjdh9SJqIQeku8u9g1acI5Y5" target="_blank" rel="noopener noreferrer">#patternuary this year</a> probably highlight that variety fairly well.</li></ul><p><strong>How has your music evolved since you have been livecoding?</strong></p><ul><li>Yeah, <em>a lot</em> - I played "traditional" instruments before I started. The biggest evolution has involved trying to break out of all the subconscious composer lockin that comes with that (fixed tempos, chords limited by number of fingers/how far they can stretch, increasing the number of simultaneous voices). It's moved from what I could do on a guitar/bass/piano with 10 fingers and a looper to beyond orchestral possibilities (and exposed my lack of compositional knowledge in that area!).</li></ul><p><strong>What samples or instruments do you like to work with?</strong></p><ul><li>Anything :) I've been trying to get more comfortable <a href="https://youtu.be/JsZPN3yqu2s" target="_blank" rel="noopener noreferrer">working with break samples</a> a bit lately.</li></ul><p><strong>What projects are you currently working on / planning? What's next?</strong></p><ul><li>I'd like to develop the livecode.au domain into a tool for organisation/promotion of Australian livecoding events/personalities, that one is going to take more time than I currently have available, so it's on the backburner for now (unless anyone wants to give me hand!)</li><li>To try and claw back a little time, I'm looking at sharing the WeekendJam load a little, and hopefully moving it into a general stream/yt account so that multiple organisers can have control depending on availability.</li><li>I'd also like to finish and release some music, just to learn a bit more about the whole process chain - that's a hope item for this year :)</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="links-to-your-music--recorded-livecoding-sessions">Links to your music / recorded livecoding sessions:<a class="hash-link" href="#links-to-your-music--recorded-livecoding-sessions" title="Direct link to heading">​</a></h2><ul><li>YouTube: <a href="https://www.youtube.com/@clearyss" target="_blank" rel="noopener noreferrer">https://www.youtube.com/@clearyss</a></li><li>Soundcloud: <a href="https://soundcloud.com/bergra" target="_blank" rel="noopener noreferrer">https://soundcloud.com/bergra</a></li><li>Twitch: <a href="https://www.twitch.tv/clearyss" target="_blank" rel="noopener noreferrer">https://www.twitch.tv/clearyss</a></li><li>Github (code): <a href="https://github.com/cleary/livecode" target="_blank" rel="noopener noreferrer">https://github.com/cleary/livecode</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other">Other<a class="hash-link" href="#other" title="Direct link to heading">​</a></h2><p>Just a big thank you for all the people I've chatted to/jammed with/learned from over the years, you've all been a huge inspiration, and I'm very glad to have been able to share my livecoding journey with you.  </p><img loading="lazy" src="https://photos.smugmug.com/photos/i-Tkwbk75/0/O/i-Tkwbk75.jpg" width="600" height="450" class="img_ev3q">(photo: Jason Richardson)]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Blog Archive]]></title>
            <link>https://doc.tidalcycles.org/blog/blogArchive</link>
            <guid>/blogArchive</guid>
            <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[The older site had a Blog feature with posts from 2017 - 2020.]]></description>
            <content:encoded><![CDATA[<p>The older site had a Blog feature with posts from 2017 - 2020.<br>
<a href="https://blog.tidalcycles.org/index.html" target="_blank" rel="noopener noreferrer">TidalCycles Blog Archive</a></p><p>Content to explore:</p><ul><li><a href="https://blog.tidalcycles.org/category/interviews/index.html" target="_blank" rel="noopener noreferrer">Interviews</a><ul><li>Malitzin Cortes aka CNDSD</li><li>Kindohm aka Mike Hodnick</li></ul></li><li><a href="https://blog.tidalcycles.org/index.html%3Fp=1280.html" target="_blank" rel="noopener noreferrer">Autonomous Live Coding: Summer of Haskell Project</a></li><li><a href="https://blog.tidalcycles.org/index.html%3Fp=346.html" target="_blank" rel="noopener noreferrer">Six Months of Tidal</a></li></ul><p>Some of the posts may be dated, or refer to older versions of Tidal. But it is still interesting to reflect on how things have evolved.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[New Documentation]]></title>
            <link>https://doc.tidalcycles.org/blog/2019/05/30/welcome</link>
            <guid>/2019/05/30/welcome</guid>
            <pubDate>Thu, 30 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[I've started working on a major overhaul / reorganization of the old Tidal Userbase website. I think that this new documentation is now pretty much on par with the old one. I hope that you will like it.]]></description>
            <content:encoded><![CDATA[<p>I've started working on a major overhaul / reorganization of the old <a href="https://tidalcycles.org/Userbase" target="_blank" rel="noopener noreferrer">Tidal Userbase</a> website. I think that this new documentation is now pretty much on par with the old one. I hope that you will like it.</p>]]></content:encoded>
        </item>
    </channel>
</rss>