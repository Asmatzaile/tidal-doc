(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{216:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return h}));var a=n(0),l=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=l.a.createContext({}),b=function(e){var t=l.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=b(e.components);return l.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},u=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=b(n),u=a,h=c["".concat(i,".").concat(u)]||c[u]||d[u]||r;return n?l.a.createElement(h,s(s({ref:t},p),{},{components:n})):l.a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return b}));var a=n(3),l=n(7),r=(n(0),n(216)),i={title:"Time",id:"time"},s={unversionedId:"patternlib/tour/time",id:"patternlib/tour/time",isDocsHomePage:!1,title:"Time",description:"This page will present you all the functions that can be used to play with time",source:"@site/docs/patternlib/tour/time.md",slug:"/patternlib/tour/time",permalink:"/docs/patternlib/tour/time",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/patternlib/tour/time.md",version:"current",lastUpdatedBy:"Maurice Panchaud",lastUpdatedAt:1641076871,sidebar:"docs",previous:{title:"Conditions",permalink:"/docs/patternlib/tour/conditions"},next:{title:"Harmony & Melody",permalink:"/docs/patternlib/tour/harmony_melody"}},o=[{value:"Speeding up, slowing down",id:"speeding-up-slowing-down",children:[{value:"fast",id:"fast",children:[]},{value:"fastGap",id:"fastgap",children:[]},{value:"slow",id:"slow",children:[]},{value:"hurry",id:"hurry",children:[]}]},{value:"Zooming in, Zooming Out",id:"zooming-in-zooming-out",children:[{value:"compress",id:"compress",children:[]},{value:"zoom",id:"zoom",children:[]},{value:"within",id:"within",children:[]}]},{value:"Shifting time",id:"shifting-time",children:[{value:"off",id:"off",children:[]},{value:"rotL",id:"rotl",children:[]},{value:"rotR",id:"rotr",children:[]}]},{value:"Reversing time",id:"reversing-time",children:[{value:"rev",id:"rev",children:[]},{value:"jux",id:"jux",children:[]},{value:"juxBy",id:"juxby",children:[]}]},{value:"Swing",id:"swing",children:[{value:"swingBy",id:"swingby",children:[]},{value:"swing",id:"swing-1",children:[]},{value:"ghost",id:"ghost",children:[]}]},{value:"Inside and outside",id:"inside-and-outside",children:[{value:"inside",id:"inside",children:[]},{value:"outside",id:"outside",children:[]}]}],p={toc:o};function b(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This page will present you all the functions that can be used to play with time: slowing it down, speeding it up, reversing time, offsetting in time, etc... Each function will be presented following the same model:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Type signature"),": how the function is declared on the ",Object(r.b)("strong",{parentName:"li"},"Haskell")," side."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Description"),": verbal description of the function."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Examples"),": a small list of examples that you can copy/paste in your editor.")),Object(r.b)("h2",{id:"speeding-up-slowing-down"},"Speeding up, slowing down"),Object(r.b)("h3",{id:"fast"},"fast"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: fast :: Pattern Time -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"fast")," speeds up a pattern. For example, the following will play the sound pattern ",Object(r.b)("inlineCode",{parentName:"p"},'"bd sn kurt"')," twice as fast (i.e. so it repeats twice per cycle), and the vowel pattern three times as fast:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound (fast 2 "bd sn kurt")\n   # fast 3 (vowel "a e o")\n')),Object(r.b)("p",null,"The first parameter can be patterned, for example to play the pattern at twice the speed for the first half of each cycle and then four times the speed for the second half:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ fast "2 4" $ sound "bd sn kurt cp"\n')),Object(r.b)("p",null,"You can also use this function by its older alias, ",Object(r.b)("inlineCode",{parentName:"p"},"density"),". "),Object(r.b)("h3",{id:"fastgap"},"fastGap"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: fastGap :: Pattern Time -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"fastGap")," (alias ",Object(r.b)("inlineCode",{parentName:"p"},"densityGap"),") speeds up a pattern like ",Object(r.b)("inlineCode",{parentName:"p"},"fast"),", but rather than it playing multiple times as fast would it instead leaves a gap in the remaining space of the cycle. For example, the following will play the sound pattern ",Object(r.b)("inlineCode",{parentName:"p"},'"bd sn"')," only once but compressed into the first half of the cycle, i.e. twice as fast."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound (fastGap 2 "bd sn")\n')),Object(r.b)("h3",{id:"slow"},"slow"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: slow :: Pattern Time -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"slow")," slows down a pattern. For example, the following will play the sound pattern ",Object(r.b)("inlineCode",{parentName:"p"},'"bd sn kurt"')," twice as slow (i.e. so it repeats once every two cycles), and the vowel pattern three times as slow:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound (slow 2 "bd sn kurt")\n   # slow 3 (vowel "a e o")\n')),Object(r.b)("h3",{id:"hurry"},"hurry"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: hurry :: Pattern Time -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"hurry")," is similiar to fast, in that it speeds up a pattern, but it also increases the speed control by the same factor, so if you're triggering samples, the sound gets higher in pitch. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ every 2 (hurry 2) $ sound "bd sn:2 ~ cp"\n')),Object(r.b)("h2",{id:"zooming-in-zooming-out"},"Zooming in, Zooming Out"),Object(r.b)("h3",{id:"compress"},"compress"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"compress")," takes a pattern and squeezes it within the specified time span (i.e. the 'arc'). The new resulting pattern is a sped up version of the original."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ compress (1/4, 3/4) $ s "[bd sn]!"\n')),Object(r.b)("p",null,"In the above example, the pattern will play in an arc spanning from 25% to 75% of the duration of a cycle. It is equivalent to:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "~ [bd sn]! ~"\n')),Object(r.b)("p",null,"Another example, where all events are different:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ compress (1/4, 3/4) $ n (run 4) # s "arpy"\n')),Object(r.b)("p",null,"It differs from ",Object(r.b)("inlineCode",{parentName:"p"},"zoom")," in that it preserves the original pattern but it speeds up its events so to match with the new time period. "),Object(r.b)("h3",{id:"zoom"},"zoom"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: zoom :: (Time, Time) -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,"Plays a portion of a pattern, specified by the beginning and end of a time span (known as an 'arc'). The new resulting pattern is played over the time period of the original pattern:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ zoom (0.25, 0.75) $ sound "bd*2 hh*3 [sn bd]*2 drum"\n')),Object(r.b)("p",null,"In the pattern above, zoom is used with an arc from 25% to 75%. It is equivalent to this pattern:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "hh*3 [sn bd]*2"\n')),Object(r.b)("p",null,"Here\u2019s an example of it being used with a conditional:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ every 4 (zoom (0.25, 0.75)) $ sound "bd*2 hh*3 [sn bd]*2 drum"\n')),Object(r.b)("h3",{id:"within"},"within"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: within :: Arc -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"within")," to apply a function to only a part of a pattern. within takes two arguments: a start time and an end time, specified as floats between ",Object(r.b)("inlineCode",{parentName:"p"},"0")," and ",Object(r.b)("inlineCode",{parentName:"p"},"1"),", which are applied to the relevant pattern. Note that the second argument must be greater than the first for the function to have any effect."),Object(r.b)("p",null,"For example, to apply ",Object(r.b)("inlineCode",{parentName:"p"},"fast 2")," to only the first half of a pattern:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ within (0, 0.5) (fast 2) $ sound "bd*2 sn lt mt hh hh hh hh"\n')),Object(r.b)("p",null,"Or, to apply ",Object(r.b)("inlineCode",{parentName:"p"},'(# speed "0.5")')," to only the last quarter of a pattern:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ within (0.75, 1) (# speed "0.5") $ sound "bd*2 sn lt mt hh hh hh hh"\n')),Object(r.b)("h2",{id:"shifting-time"},"Shifting time"),Object(r.b)("h3",{id:"off"},"off"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: Pattern Time -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"off")," is similar to superimpose, in that it applies a function to a pattern, and layers up the results on top of the original pattern. The difference is that ",Object(r.b)("inlineCode",{parentName:"p"},"off")," takes an extra pattern being a time (in cycles) to shift the transformed version of the pattern by."),Object(r.b)("p",null,"The following plays a pattern on top of itself, but offset by an eighth of a cycle, with a distorting bitcrush effect applied:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ off 0.125 (# crush 2) $ sound "bd [~ sn:2] mt lt*2"\n')),Object(r.b)("p",null,"The following makes arpeggios by adding offset patterns that are shifted up the scale:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ \n  n (off 0.25 (+12) $ off 0.125 (+7) $ slow 2 "c(3,8) a(3,8,2) f(3,8) e(3,8,4)") \n  # sound "superpiano"\n')),Object(r.b)("h3",{id:"rotl"},"rotL"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: rotL :: Time -> Pattern a -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"rotL")," Shifts a pattern back in time by the given amount, expressed in cycles. This will skip to the fourth cycle when evaluated:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'do\n{\n  resetCycles;\n  d1 $ rotL 4 $ seqP [ \n    (0, 12, sound "bd bd*2"), \n    (4, 12, sound "hh*2 [sn cp] cp future*4"), \n    (8, 12, sound (samples "arpy*8" (run 16)))\n  ]\n}\n')),Object(r.b)("p",null,"Useful when building and testing out longer sequences."),Object(r.b)("h3",{id:"rotr"},"rotR"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"rotR")," is the opposite of ",Object(r.b)("inlineCode",{parentName:"p"},"rotL")," as it shifts the pattern forwards in time. "),Object(r.b)("h2",{id:"reversing-time"},"Reversing time"),Object(r.b)("h3",{id:"rev"},"rev"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: rev :: Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"rev")," returns a 'reversed' version of the given pattern."),Object(r.b)("p",null,"For example ",Object(r.b)("inlineCode",{parentName:"p"},'rev "1 [~ 2] ~ 3"')," is equivalent to rev ",Object(r.b)("inlineCode",{parentName:"p"},'"3 ~ [2 ~] 1"'),"."),Object(r.b)("p",null,"Note that ",Object(r.b)("inlineCode",{parentName:"p"},"rev")," reverses on a cycle-by-cycle basis. This means that ",Object(r.b)("inlineCode",{parentName:"p"},'rev (slow 2 "1 2 3 4")')," would actually result in ",Object(r.b)("inlineCode",{parentName:"p"},'(slow 2 "2 1 4 3")'),". This is because the ",Object(r.b)("inlineCode",{parentName:"p"},"slow 2 "),"makes the repeating pattern last two cycles, each of which is reversed independently."),Object(r.b)("p",null,"In practice ",Object(r.b)("inlineCode",{parentName:"p"},"rev")," is generally used with conditionals, for example with ",Object(r.b)("inlineCode",{parentName:"p"},"every"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ every 3 rev $ n "0 1 [~ 2] 3" # sound "arpy"\n')),Object(r.b)("p",null,"or ",Object(r.b)("inlineCode",{parentName:"p"},"jux"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ jux rev $ n (iter 4 "0 1 [~ 2] 3") # sound "arpy"\n')),Object(r.b)("h3",{id:"jux"},"jux"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: jux :: (ControlPattern -> ControlPattern) -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"jux")," function creates strange stereo effects, by applying a function to a pattern, but only in the right-hand channel. For example, the following reverses the pattern on the righthand side:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 32 $ jux (rev) $ striate\' 32 (1/16) $ sound "bev"\n')),Object(r.b)("p",null,"When passing functions to functions like ",Object(r.b)("inlineCode",{parentName:"p"},"jux")," and ",Object(r.b)("inlineCode",{parentName:"p"},"every"),", it\u2019s possible to chain multiple transforms together with ., for example this both reverses and halves the playback speed of the pattern in the righthand channel:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 32 $ jux ((# speed "0.5") . rev) $ striate\' 32 (1/16) $ sound "bev"\n')),Object(r.b)("h3",{id:"juxby"},"juxBy"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: juxBy :: Pattern Double -> (ControlPattern -> ControlPattern) -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,"With ",Object(r.b)("inlineCode",{parentName:"p"},"jux"),", the original and effected versions of the pattern are panned hard left and right (i.e., panned at 0 and 1). This can be a bit much, especially when listening on headphones. The variant ",Object(r.b)("inlineCode",{parentName:"p"},"juxBy")," has an additional parameter, which brings the channel closer to the centre. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ juxBy 0.5 (fast 2) $ sound "bd sn:1"\n')),Object(r.b)("p",null,"In the above, the two versions of the pattern would be panned at ",Object(r.b)("inlineCode",{parentName:"p"},"0.25")," and ",Object(r.b)("inlineCode",{parentName:"p"},"0.75"),", rather than ",Object(r.b)("inlineCode",{parentName:"p"},"0")," and ",Object(r.b)("inlineCode",{parentName:"p"},"1"),". "),Object(r.b)("h2",{id:"swing"},"Swing"),Object(r.b)("h3",{id:"swingby"},"swingBy"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: swingBy :: Pattern Time -> Pattern Time -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,"The function ",Object(r.b)("inlineCode",{parentName:"p"},"swingBy x n")," breaks each cycle into ",Object(r.b)("inlineCode",{parentName:"p"},"n")," slices, and then delays events in the second half of each slice by the amount ",Object(r.b)("inlineCode",{parentName:"p"},"x"),", which is relative to the size of the (half) slice. So if ",Object(r.b)("inlineCode",{parentName:"p"},"x")," is ",Object(r.b)("inlineCode",{parentName:"p"},"0")," it does nothing, ",Object(r.b)("inlineCode",{parentName:"p"},"0.5")," delays for half the note duration, and ",Object(r.b)("inlineCode",{parentName:"p"},"1")," will wrap around to doing nothing again. The end result is a shuffle or swing-like rhythm. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ swingBy (1/3) 4 $ sound "hh*8"\n')),Object(r.b)("p",null,"will delay every other ",Object(r.b)("inlineCode",{parentName:"p"},'"hh" 1/3')," of the way to the next ",Object(r.b)("inlineCode",{parentName:"p"},'"hh"'),"."),Object(r.b)("h3",{id:"swing-1"},"swing"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: swing :: Pattern Time -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"swing")," is an alias for ",Object(r.b)("inlineCode",{parentName:"p"},"swingBy (1/3)"),"."),Object(r.b)("h3",{id:"ghost"},"ghost"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: ghost :: Pattern ControlMap -> Pattern ControlMap\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"ghost")," adds quieter, pitch-shifted, copies of an event after the event, emulating ghost notes that are common in drumming patterns."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ stack [ ghost $ sound "~ sn", sound "bd*2 [~ bd]" ]\n')),Object(r.b)("p",null,"The example above creates a kick snare pattern with ghost notes applied to the snare hit. "),Object(r.b)("h2",{id:"inside-and-outside"},"Inside and outside"),Object(r.b)("h3",{id:"inside"},"inside"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: inside :: Pattern Time -> (Pattern a -> Pattern b) -> Pattern a -> Pattern b\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"inside")," carries out an operation 'inside' a cycle. For example, ",Object(r.b)("inlineCode",{parentName:"p"},'while rev "0 1 2 3 4 5 6 7"')," is the same as ",Object(r.b)("inlineCode",{parentName:"p"},'"7 6 5 4 3 2 1 0"'),", ",Object(r.b)("inlineCode",{parentName:"p"},'inside 2 rev "0 1 2 3 4 5 6 7"')," gives ",Object(r.b)("inlineCode",{parentName:"p"},'"3 2 1 0 7 6 5 4"'),"."),Object(r.b)("p",null,"What this function is really doing is 'slowing down' the pattern by a given factor, applying the given function to it, and then 'speeding it up' by the same factor. In other words, this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'inside 2 rev "0 1 2 3 4 5 6 7"\n')),Object(r.b)("p",null,"Is doing this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'fast 2 $ rev $ slow 2 "0 1 2 3 4 5 6 7"\n')),Object(r.b)("p",null,".. so rather than whole cycles, each half of a cycle is reversed."),Object(r.b)("h3",{id:"outside"},"outside"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: outside :: Pattern Time -> (Pattern a -> Pattern b) -> Pattern a -> Pattern b\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"outside")," is the inverse of the ",Object(r.b)("inlineCode",{parentName:"p"},"inside")," function. ",Object(r.b)("inlineCode",{parentName:"p"},"outside")," applies its function outside the cycle. Say you have a pattern that takes 4 cycles to repeat and apply the ",Object(r.b)("inlineCode",{parentName:"p"},"rev")," function:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ rev $ cat [s "bd bd sn",s "sn sn bd", s"lt lt sd", s "sd sd bd"]\n')),Object(r.b)("p",null,"The above generates: "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ rev $ cat [s "sn bd bd",s "bd sn sn", s "sd lt lt", s "bd sd sd"]\n')),Object(r.b)("p",null,"However if you apply ",Object(r.b)("inlineCode",{parentName:"p"},"outside"),": "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ outside 4 (rev) $ cat [s "bd bd sn",s "sn sn bd", s"lt lt sd", s "sd sd bd"]\n')),Object(r.b)("p",null,"The result` is:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ rev $ cat [s "bd sd sd", s "sd lt lt", s "sn sn bd", s "bd bd sn"]\n')),Object(r.b)("p",null,"Notice the whole idea has been reversed. What this function is really doing is 'speeding up' the pattern by a given factor, applying the given function to it, and then 'slowing it down' by the same factor. In other words, this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 4 $ rev $ fast 4 $ cat [s "bd bd sn",s "sn sn bd", s"lt lt sd", s "sd sd bd"]\n')),Object(r.b)("p",null,"This compresses the idea into a single cycle before ",Object(r.b)("inlineCode",{parentName:"p"},"rev")," operates and then slows it back to the original speed. "))}b.isMDXComponent=!0}}]);