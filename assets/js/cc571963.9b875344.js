"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5318],{3905:(e,a,r)=>{r.d(a,{Zo:()=>c,kt:()=>d});var t=r(7294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function p(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=t.createContext({}),u=function(e){var a=t.useContext(o),r=a;return e&&(r="function"==typeof e?e(a):s(s({},a),e)),r},c=function(e){var a=u(e.components);return t.createElement(o.Provider,{value:a},e.children)},i="mdxType",k={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),i=u(r),m=n,d=i["".concat(o,".").concat(m)]||i[m]||k[m]||l;return r?t.createElement(d,s(s({ref:a},c),{},{components:r})):t.createElement(d,s({ref:a},c))}));function d(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=r.length,s=new Array(l);s[0]=m;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p[i]="string"==typeof e?e:n,s[1]=p;for(var u=2;u<l;u++)s[u]=r[u];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},202:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>i,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var t=r(3117),n=(r(7294),r(3905));const l={title:"Transforming Patterns",permalink:"wiki/Transforming_Patterns/",layout:"wiki"},s=void 0,p={unversionedId:"Tidal_workshop_worksheet/Transforming_Patterns",id:"Tidal_workshop_worksheet/Transforming_Patterns",title:"Transforming Patterns",description:"We can start to make much more complex",source:"@site/docs/Tidal_workshop_worksheet/Transforming_Patterns.md",sourceDirName:"Tidal_workshop_worksheet",slug:"/Tidal_workshop_worksheet/Transforming_Patterns",permalink:"/docs/Tidal_workshop_worksheet/Transforming_Patterns",draft:!1,editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/Tidal_workshop_worksheet/Transforming_Patterns.md",tags:[],version:"current",lastUpdatedBy:"HighHarmonics",lastUpdatedAt:1671484966,formattedLastUpdatedAt:"Dec 19, 2022",frontMatter:{title:"Transforming Patterns",permalink:"wiki/Transforming_Patterns/",layout:"wiki"}},o={},u=[{value:"Feeling brave?",id:"feeling-brave",level:2}],c={toc:u};function i(e){let{components:a,...r}=e;return(0,n.kt)("wrapper",(0,t.Z)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"We can start to make much more complex\npatterns using transformations"),(0,n.kt)("p",null,"Using functions like"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"slow\n")),(0,n.kt)("p",null,"you can start to transcend the cycle"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"slow\n")),(0,n.kt)("p",null,"stretches the pattern over more cycles"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "arpy arpy:1 arpy:2 arpy:3"\n\n\x3c!--T:5--\x3e\nd1 $ slow 2 $ sound "arpy arpy:1 arpy:2 arpy:3"\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"fast\n")),(0,n.kt)("p",null,"squashes the pattern into less than one cycle"),(0,n.kt)("p",null,"You might also see people writing"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"density\n")),(0,n.kt)("p",null,"-"," it\u2019s the same thing!"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"fast 0.5\n")),(0,n.kt)("p",null,"is the same as"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"slow 2\n")),(0,n.kt)("p",null,"!"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ fast 2 $ sound "arpy arpy:1 arpy:2 arpy:3"\n\n\x3c!--T:10--\x3e\nd1 $ fast 0.5 $ sound "arpy arpy:1 arpy:2 arpy:3"\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"hurry\n")),(0,n.kt)("p",null,"is similar to fast, but also applies a speed transformation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "arpy arpy arpy:1 arpy:2"\n\n\x3c!--T:13--\x3e\nd1 $ hurry 2 $ sound "arpy arpy arpy:1 arpy:2"\n\n\x3c!--T:14--\x3e\nd1 $ hurry 0.5 $ sound "arpy arpy arpy:1 arpy:2"\n')),(0,n.kt)("p",null,"You can reverse a pattern with \u2018rev\u2019"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ rev $ sound "arpy arpy:1 arpy:2 arpy:3"\n')),(0,n.kt)("p",null,"Or play it forwards and then backwards with \u2018palindrome\u2019"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ palindrome $ sound "arpy arpy:1 arpy:2 arpy:3"\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"iter\n")),(0,n.kt)("p",null,"starts the pattern at a different point each cycle, shifting it the\ngiven number of times until it gets back to where it started"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ iter 4 $ sound "arpy arpy:1 arpy:2 arpy:3"\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"every\n")),(0,n.kt)("p",null,"allows us to schedule transformations or effects in different cycles\ne.g. every fourth cycle, play twice as fast:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ every 4 (fast 2) $ sound "arpy arpy:1 arpy:2 arpy:3"\n')),(0,n.kt)("p",null,"... or you could schedule an effect in the same way, using"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"#\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ every 4 (# vowel "a o") $ sound "arpy arpy:1 arpy:2 arpy:3"\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"jux\n")),(0,n.kt)("p",null,"(short for 'juxtapose') takes a transformation or an effect and plays it\nin one speaker the original pattern plays in the other speaker."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "arpy arpy:1 arpy:2 arpy:3"\nd1 $ jux (rev) $ sound "arpy arpy:1 arpy:2 arpy:3"\nd1 $ jux (hurry 2) $ sound "arpy arpy arpy:1 arpy:2"\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"chunk\n")),(0,n.kt)("p",null,"applies a transformation or an effect to a different part of the pattern\neach time. For example with"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},"4\n")),(0,n.kt)("p",null,"as a parameter, it will step through each quarter of the cycle."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ chunk 4 (hurry 2) $ sound  "arpy arpy:1 arpy:2 arpy:3"\nd1 $ chunk 4 (# speed 2) $ sound  "alphabet:0 alphabet:1 alphabet:2 alphabet:3"\n')),(0,n.kt)("h2",{id:"feeling-brave"},"Feeling brave?"),(0,n.kt)("p",null,"More than one transformation is possible! You can chain them together\nusing"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},".\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ jux (rev . (slow 1.5)) $ sound "arpy arpy:1 arpy:2 arpy:3"\n')),(0,n.kt)("p",null,"Remember that (almost) everything is a pattern so we can apply these\ntransformations to our effects too!"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "jvbass [jvbass jvbass] jvbass ~" # note "1 [3 5] 7"\nd1 $ sound "jvbass [jvbass jvbass] jvbass ~" # iter 3 (note "1 [3 5] 7")\n')),(0,n.kt)("p",null,"What about slowing down or scaling sine and saw?"))}i.isMDXComponent=!0}}]);