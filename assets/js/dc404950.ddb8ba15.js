(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{177:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),l=(a(0),a(196)),s={title:"Type signatures",permalink:"wiki/Type_signatures/",layout:"wiki",tags:["Reference"]},c={unversionedId:"advanced/understanding-innards/Type_signatures",id:"advanced/understanding-innards/Type_signatures",isDocsHomePage:!1,title:"Type signatures",description:"In Haskell (which Tidal lives in), a type signature tells you what kind",source:"@site/docs/advanced/understanding-innards/Type_signatures.md",slug:"/advanced/understanding-innards/Type_signatures",permalink:"/docs/advanced/understanding-innards/Type_signatures",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/advanced/understanding-innards/Type_signatures.md",version:"current",lastUpdatedBy:"Koji Ishimoto",lastUpdatedAt:1615136026,sidebar:"advanced",previous:{title:"What is a pattern",permalink:"/docs/advanced/understanding-innards/What_is_a_pattern"},next:{title:"Haskell resources",permalink:"/docs/advanced/understanding-innards/Haskell_resources"}},i=[],o={toc:i};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"In Haskell (which Tidal lives in), a type signature tells you what kind\nof thing a value or function is. They're particularly useful for finding\nout what a function expects from you, and what it gives back."),Object(l.b)("p",null,"You can find out the type of a function is with"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},":t\n")),Object(l.b)("p",null,", for example to find out the type signature for ",Object(l.b)("a",{parentName:"p",href:"rev",title:"wikilink"},"rev"),",\nyou could type"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},":t rev\n")),Object(l.b)("p",null,"into your editor, and evaluate it. You'll see this in the output window:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"rev :: Pattern a -> Pattern a\n")),Object(l.b)("p",null,"That's quite simple, it tells you that it takes a pattern as input, and\ngives you back a pattern as output. Let's have a look at the\n",Object(l.b)("a",{parentName:"p",href:"fast",title:"wikilink"},"fast")," function, via"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},":t fast\n")),Object(l.b)("p",null,":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"fast :: Pattern Time -> Pattern a -> Pattern a\n")),Object(l.b)("p",null,"That's a bit more complicated, there's three patterns there. The last\none is always the output, and the ones preceding it are the inputs. So"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"fast\n")),Object(l.b)("p",null,"takes a pattern of time, another pattern, and gives you a pattern in\nreturn. That makes some sense too, the first parameter says how fast it\nshould go in terms of time, and can be patterned. The second parameter\nis the pattern that is going to be made faster, but it doesn't say what\nkind of pattern it is, it just says"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Pattern a\n")),Object(l.b)("p",null,", and the same with the output. We saw the same"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Pattern a\n")),Object(l.b)("p",null,"type earlier with"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"rev\n")),Object(l.b)("p",null,". What does it mean?"),Object(l.b)("p",null,"Well the"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"a\n")),Object(l.b)("p",null,"in"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Pattern a\n")),Object(l.b)("p",null,"is unconstrained - it can be whatever you like. So the"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"rev\n")),Object(l.b)("p",null,"function can work on any kind of pattern. This is because"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"rev\n")),Object(l.b)("p",null,"doesn't deal with any particular values, it just manipulates time."),Object(l.b)("p",null,"So"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"a\n")),Object(l.b)("p",null,"is a kind of wildcard here, used in both the input and output of"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"rev\n")),Object(l.b)("p",null,". This means that if you can give it a pattern of anything, but if you\ngive it a pattern of integers, you are ",Object(l.b)("em",{parentName:"p"},"guaranteed")," to get a pattern of\nintegers back. So you can swap that"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"a\n")),Object(l.b)("p",null,"for another type but only if you swap all instances of it for the same\ntype."),Object(l.b)("p",null,"A more complicated example is ",Object(l.b)("a",{parentName:"p",href:"every",title:"wikilink"},"every"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"every :: Pattern Int -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a\n")),Object(l.b)("p",null,"Now,"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"every\n")),Object(l.b)("p",null,"takes three parameters, a whole number of cycles, a function to apply to\na pattern, and the pattern itself. We can see that the first parameter\nis a pattern of integers (aka whole numbers), fine. The second parameter\nis stranger -"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"(Pattern a -> Pattern a)\n")),Object(l.b)("p",null,". This is how functions that are parameters are shown - wrapped in\nparenthesis. We can see from this that the second parameter is a\nfunction, that takes a pattern of any type as input, and gives a pattern\nof the same type as output. If we look back at the type signature of"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"rev\n")),Object(l.b)("p",null,", it's pretty clear that we could give that as this second parameter, as\nthe types match.. Indeed it's quite common to do"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'every 3 rev (s "bd sn")\n')),Object(l.b)("p",null,", for example."),Object(l.b)("p",null,"Hopefully that gives you some insight into how to read type signatures.\nThey're really useful for understanding how to use functions, even\nwithout reading documentation."),Object(l.b)("p",null,"Feel free to add any questions to the discussion page."))}p.isMDXComponent=!0},196:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},u=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),u=p(a),d=n,m=u["".concat(s,".").concat(d)]||u[d]||b[d]||l;return a?r.a.createElement(m,c(c({ref:t},o),{},{components:a})):r.a.createElement(m,c({ref:t},o))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var o=2;o<l;o++)s[o]=a[o];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);