(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{109:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(216)),s={id:"tutorial",title:"Tutorial",tags:["Functions|functions category"]},l={unversionedId:"getting-started/tutorial",id:"getting-started/tutorial",isDocsHomePage:!1,title:"Tutorial",description:"You\u2019ve installed TidalCycles and (Super)Dirt,",source:"@site/docs/getting-started/Tutorial.md",slug:"/getting-started/tutorial",permalink:"/docs/getting-started/tutorial",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/getting-started/Tutorial.md",version:"current",lastUpdatedBy:"Koji Ishimoto",lastUpdatedAt:1615136026},i=[{value:"Creating Rhythmic Sequences",id:"creating-rhythmic-sequences",children:[{value:"Play a Single Sample",id:"play-a-single-sample",children:[]},{value:"Sequences From Multiple Samples",id:"sequences-from-multiple-samples",children:[]},{value:"Playing More Than One Sequence",id:"playing-more-than-one-sequence",children:[]},{value:"What is a Cycle?",id:"what-is-a-cycle",children:[]}]},{value:"Silence",id:"silence",children:[]},{value:"Patterns Within Patterns",id:"patterns-within-patterns",children:[{value:"Layering (Polyrhythms) Instead of Grouping",id:"layering-polyrhythms-instead-of-grouping",children:[]},{value:"Playing one step per cycle",id:"playing-one-step-per-cycle",children:[]}]},{value:"Pattern Repetition and Speed",id:"pattern-repetition-and-speed",children:[{value:"Repetition",id:"repetition",children:[]},{value:"Using * and / on Groups",id:"using--and--on-groups",children:[]}]},{value:"Modifying Sequences With Functions",id:"modifying-sequences-with-functions",children:[{value:"Where are all the functions?",id:"where-are-all-the-functions",children:[]}]},{value:"Applying effects with control patterns",id:"applying-effects-with-control-patterns",children:[{value:"Control values are patterns too",id:"control-values-are-patterns-too",children:[]},{value:"Control pattern order",id:"control-pattern-order",children:[]},{value:"Modifying control values",id:"modifying-control-values",children:[]},{value:"Some Common Effects",id:"some-common-effects",children:[]}]},{value:"Shorthand for numerical patterns",id:"shorthand-for-numerical-patterns",children:[]},{value:"Sample Playback Speed (and Pitch)",id:"sample-playback-speed-and-pitch",children:[{value:"Play a sample at multiple speeds simultaneously",id:"play-a-sample-at-multiple-speeds-simultaneously",children:[]},{value:"12-tone scale speeds",id:"12-tone-scale-speeds",children:[]}]},{value:"Euclidean Sequences",id:"euclidean-sequences",children:[]},{value:"Tempo",id:"tempo",children:[]},{value:"The Run Function",id:"the-run-function",children:[]},{value:"(Algorithmically) Selecting Samples",id:"algorithmically-selecting-samples",children:[]},{value:"Combining Types of Patterns",id:"combining-types-of-patterns",children:[]},{value:"Oscillation with Continuous Patterns",id:"oscillation-with-continuous-patterns",children:[{value:"Scaling Oscillation",id:"scaling-oscillation",children:[]}]},{value:"Rests",id:"rests",children:[]},{value:"Polymeters",id:"polymeters",children:[]},{value:"Shifting Time",id:"shifting-time",children:[]},{value:"Introducing Randomness",id:"introducing-randomness",children:[{value:"Random Decimal Patterns",id:"random-decimal-patterns",children:[]},{value:"Random Integer Patterns",id:"random-integer-patterns",children:[]},{value:"Removing or \u201cDegrading\u201d Pattern events",id:"removing-or-degrading-pattern-events",children:[]}]},{value:"Creating Variation in Patterns",id:"creating-variation-in-patterns",children:[]},{value:"Creating &quot;Fills&quot; and using &quot;const&quot;",id:"creating-fills-and-using-const",children:[]},{value:"Composing Multi-Part Patterns",id:"composing-multi-part-patterns",children:[{value:"Concatenating patterns in serial",id:"concatenating-patterns-in-serial",children:[]},{value:"Playing patterns together in parallel",id:"playing-patterns-together-in-parallel",children:[]}]},{value:"Truncating samples with &quot;cut&quot;",id:"truncating-samples-with-cut",children:[]},{value:"Transitions Between Patterns",id:"transitions-between-patterns",children:[]},{value:"Samples",id:"samples",children:[]},{value:"Synths",id:"synths",children:[]}],c={toc:i};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"You\u2019ve installed TidalCycles and (Super)Dirt,\nmaybe even made a few sounds, but now you\u2019re ready to get to business\nand start really learning. This guide will help you get started with\nsimple patterns and walk you through all the way to complex\ncompositions. If you want a super quick run-down of the syntax in\npatterns check ",Object(o.b)("a",{parentName:"p",href:"/wiki/Sequence_parser_syntax",title:"wikilink"},"Sequence parser\nsyntax")),Object(o.b)("p",null,"Why not play with the code as you read, running your own experiments by\nchanging the examples, and seeing where they take you?"),Object(o.b)("h2",{id:"creating-rhythmic-sequences"},"Creating Rhythmic Sequences"),Object(o.b)("h3",{id:"play-a-single-sample"},"Play a Single Sample"),Object(o.b)("p",null,"Tidal provides 16 'connections' to the SuperDirt synthesiser, named from\nd1 to d16. Here\u2019s a minimal example, that plays a kick drum every cycle:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},' d1 $ sound "bd"\n')),Object(o.b)("p",null,"Evaluate the above code in the Atom (or Emacs) editor by pressing\nCtrl+Enter. If you want to stop the sound again, look ahead to the\nsection on silence."),Object(o.b)("p",null,"In the code above,"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"sound\n")),Object(o.b)("p",null,"tells us we\u2019re making a pattern of sound samples, and"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"bd"\n')),Object(o.b)("p",null,"is a pattern that contains a single sound. bd is a sample of a kick\ndrum. Samples live inside the Dirt-Samples folder which came with\nSuperDirt, and each sub-folder under that corresponds to a sample name\n(like bd)."),Object(o.b)("p",null,"To find the SuperDirt samples on your system, in the SuperCollider IDE\nselect the File ",">"," Open User Support Directory menu item. From there,\nopen downloaded-quarks and finally Dirt-Samples in there. You should\nfind a lot of folders, each one is a sample bank containing standard wav\nfiles. Feel free to make new folders and add your own sounds to it, see\nthe ",Object(o.b)("a",{parentName:"p",href:"/wiki/Custom_Samples",title:"wikilink"},"Custom Samples")," userbase page for more\ninfo."),Object(o.b)("p",null,"We can pick a different sample in the bd folder by adding a colon (:)\nthen a number. For example, this picks the fourth kick drum (it counts\nfrom zero, so :3 gives you the fourth sound in the folder):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},' d1 $ sound "bd:3"\n')),Object(o.b)("p",null,"If you specify a number greater than the number of samples in a folder,\nthen Tidal just \u201cwraps\u201d around back to the first sample again (it starts\ncounting at zero, e.g. in a folder with five samples, \u201cbd:5\u201d would play\n\u201cbd:0\u201d)."),Object(o.b)("p",null,"It\u2019s also possible to specify the sample number separately:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd" # n "3"\n')),Object(o.b)("p",null,"The usefulness of doing this will become apparent later."),Object(o.b)("h3",{id:"sequences-from-multiple-samples"},"Sequences From Multiple Samples"),Object(o.b)("p",null,"Putting things in quotes allows you to define a sequence. For example,\nthe following gives you a pattern of kick drum then snare:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd sd:1"\n')),Object(o.b)("p",null,"When you run the code above, you are replacing the previous pattern with\nanother one on-the-fly. Congratulations, you\u2019re live coding."),Object(o.b)("h3",{id:"playing-more-than-one-sequence"},"Playing More Than One Sequence"),Object(o.b)("p",null,"The easiest way to play multiple sequences at the same time is to use\ntwo or more connections to the synthesizer:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd sd:1"\n\n\x3c!--T:19--\x3e\nd2 $ sound "hh hh hh hh"\n\n\x3c!--T:20--\x3e\nd3 $ sound "arpy"\n')),Object(o.b)("p",null,"NOTE: each connection must be evaluated separately in your text editor.\nThat is, you must press Ctrl+Enter three times, once for each line\nabove. ",Object(o.b)("em",{parentName:"p"},"Make sure that there is a blank line between them each pattern"),",\nor Tidal will evaluate them together and get confused (if you want to\nevaluate just one line, you can press shift-enter)."),Object(o.b)("p",null,"ANOTHER NOTE: If you prefer to refer to patterns by name, rather than by\nnumber, you can do that with"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"p\n")),Object(o.b)("p",null,", for example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'p "susan" $ sound "bd sd:1"\n\n\x3c!--T:24--\x3e\np "gerard" $ sound "hh hh hh hh"\n')),Object(o.b)("h3",{id:"what-is-a-cycle"},"What is a Cycle?"),Object(o.b)("p",null,"A cycle is the main \u201cloop\u201d of time in Tidal. The cycle repeats forever\nin the background, even when you\u2019ve stopped samples from playing. The\ncycle\u2019s duration always stays the same unless you modify it with setcps,\nwe\u2019ll cover this later. By default, there is one cycle per second."),Object(o.b)("p",null,"Note that this omniprescent cyclic looping doesn\u2019t necessary constrain\nyou, for example it\u2019s common to stretch a pattern outside of a single\nloop, and vary patterns from one loop to the next. We\u2019ll see several\nways to do this later, as well."),Object(o.b)("p",null,"All of the samples inside of a pattern get squashed into a single cycle.\nThe patterns below all loop over the same amount of time:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd sd"\n\n\x3c!--T:29--\x3e\nd1 $ sound "bd sd hh cp mt arpy drum"\n\n\x3c!--T:30--\x3e\nd1 $ sound "bd sd hh cp mt arpy drum odx bd arpy bass2 feel future"\n')),Object(o.b)("p",null,"Note how the more steps you add to the pattern, the faster it plays\nthem, in order to fit them all in. No matter how many samples you put in\na pattern in this way, they will always be distributed evenly within a\nsingle cycle."),Object(o.b)("h2",{id:"silence"},"Silence"),Object(o.b)("p",null,"At this point you probably want to know how to stop the patterns you\nstarted. An empty pattern is defined as silence, so if you want to\n\u2018switch off\u2019 a pattern, you can just set it to that:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"d1 silence\n")),Object(o.b)("p",null,"If you want to set all the connections (from d1 to d9) to be silent at\nonce, there\u2019s a single-word shortcut for that:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"hush\n")),Object(o.b)("p",null,"You can also isolate a single connection and silence all others with the"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"solo\n")),Object(o.b)("p",null,"function. You can do this like so:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd"\n\n\x3c!--T:38--\x3e\nd2 $ sound "~ cp"\n\n\x3c!--T:39--\x3e\n-- run this and only the bd plays\nsolo 1\n\n\x3c!--T:40--\x3e\n-- unsolo it and the cp plays again\nunsolo 1\n')),Object(o.b)("h2",{id:"patterns-within-patterns"},"Patterns Within Patterns"),Object(o.b)("p",null,"You can use Tidal\u2019s square brackets syntax to create a pattern grouping:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "[bd sd sd] cp"\n')),Object(o.b)("p",null,"Square brackets allow several events to be played inside of a single\nstep. You can think of the above pattern as having two steps, with the\nfirst step broken down into a subpattern, which has three steps.\nPractically, this means you can create denser sub-divisions of cycles:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd [sd sd]"\n\n\x3c!--T:46--\x3e\nd1 $ sound "bd [sd sd sd]"\n\n\x3c!--T:47--\x3e\nd1 $ sound "bd [sd sd sd sd]"\n\n\x3c!--T:48--\x3e\nd1 $ sound "[bd bd] [sd sd sd sd]"\n\n\x3c!--T:49--\x3e\nd1 $ sound "[bd bd bd] [sd sd]"\n\n\x3c!--T:50--\x3e\nd1 $ sound "[bd bd bd bd] [sd]"\n')),Object(o.b)("p",null,"You can even nest groups inside groups to create increasingly dense and\ncomplex patterns:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "[bd bd] [bd [sd [sd sd] sd] sd]"\n')),Object(o.b)("p",null,"A shorthand for this kind of grouping is to place a period . between\ngroups, rather than surrounding them in square brackets. We call this\ntechnique \u2018marking out feet\u2019. For example these two patterns are\nequivalent:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd bd . sd sd sd . bd sd"\n\n\x3c!--T:55--\x3e\nd1 $ sound "[bd bd] [sd sd sd] [bd sd]"\n')),Object(o.b)("p",null,"The former approach is often easier to type, but is a relatively new\naddition to TidalCycles, and so many examples will use the square\nbrackets."),Object(o.b)("h3",{id:"layering-polyrhythms-instead-of-grouping"},"Layering (Polyrhythms) Instead of Grouping"),Object(o.b)("p",null,"You can also layer up several loops, by using commas to separate the\ndifferent parts:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "[bd bd bd, sd cp sd cp]"\n')),Object(o.b)("p",null,"This would play the sequence bd bd bd at the same time as sd cp sd cp.\nNote that the first sequence only has three events, and the second one\nhas four. Because tidal ensures both loops fit inside the same cyclic\nduration, you end up with a polyrhythm."),Object(o.b)("p",null,"You can layer any number of these subpatterns to create many\npolyrhythms:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "[bd bd bd, sd cp sd cp, arpy arpy, odx]"\n')),Object(o.b)("p",null,"And of course you can use groupings inside of the layers:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "[bd bd bd, [sd sd] cp, arpy [arpy [arpy arpy] arpy arpy], odx]"\n')),Object(o.b)("h3",{id:"playing-one-step-per-cycle"},"Playing one step per cycle"),Object(o.b)("p",null,"To specify a group where only one step is played per cycle, use angle\nbrackets. For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd <arpy:1 arpy:2 arpy:3>"\n')),Object(o.b)("p",null,"The above will result in the sequence ",Object(o.b)("inlineCode",{parentName:"p"},"bd arpy:1 bd arpy:2 bd arpy:3"),",\nover three cycles."),Object(o.b)("h2",{id:"pattern-repetition-and-speed"},"Pattern Repetition and Speed"),Object(o.b)("h3",{id:"repetition"},"Repetition"),Object(o.b)("p",null,"There are two short-hand symbols you can use inside patterns to speed\nthings up or slow things down: ","*"," and /. You could think of these like\nmultiplication and division."),Object(o.b)("p",null,"Use the ","*"," symbol to make a pattern, or part of a pattern, repeat as\nmany times as you\u2019d like:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*2"\n')),Object(o.b)("p",null,"This is the same as doing ",Object(o.b)("inlineCode",{parentName:"p"},'d1 $ sound "bd bd"')),Object(o.b)("p",null,"The code above uses ","*","2 to make a sample play twice."),Object(o.b)("p",null,"You can use the / symbol to make a part of a pattern slow down, or occur\nless often:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd/2"\n')),Object(o.b)("p",null,"The code above uses /2 to make a sample play half as often, or once\nevery 2nd cycle."),Object(o.b)("p",null,"Using different numbers works as you\u2019d expect:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*3" -- plays the bd sample three times each cycle\nd1 $ sound "bd/3" -- plays the bd samples only once each third cycle\n')),Object(o.b)("h3",{id:"using--and--on-groups"},"Using ","*"," and / on Groups"),Object(o.b)("p",null,"You can apply the ","*"," and / symbols on groups of patterns:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "[bd sn]*2 cp"\n\n\x3c!--T:80--\x3e\nd1 $ sound "[bd sn] cp/2"\n\n\x3c!--T:81--\x3e\nd1 $ sound "[[bd sn] cp]*2" -- speeds up the entire pattern by 2\n\n\x3c!--T:82--\x3e\nd1 $ sound "[[bd sn] cp]/2" -- slows down the entire pattern by 2\n')),Object(o.b)("p",null,"You can also use the symbols on nested groups to create more complex\nrhythms:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "[bd sn sn*3]/2 [bd sn*3 bd*4]/3"\n\n\x3c!--T:85--\x3e\nd1 $ sound "[bd [sn sn]*2]/2 [bd [sn bd]/2]*2"\n')),Object(o.b)("h2",{id:"modifying-sequences-with-functions"},"Modifying Sequences With Functions"),Object(o.b)("p",null,"Tidal comes into its own when you start building things up with\nfunctions which transform the patterns in various ways."),Object(o.b)("p",null,"For example, ",Object(o.b)("inlineCode",{parentName:"p"},"rev")," reverses a pattern:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ rev (sound "bd*2 [bd [sn sn*2 sn] sn]")\n')),Object(o.b)("p",null,"That\u2019s not so exciting, but things get more interesting when this is\nused in combination with another function. For example every takes three\nparameters: a number, a function and a pattern to apply the function to.\nThe number specifies how often the function is applied to the pattern.\nFor example, the following reverses the pattern every fourth repetition:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 4 (rev) (sound "bd*2 [bd [sn sn*2 sn] sn]")\n')),Object(o.b)("p",null,"It takes a while to get used to how we\u2019re using parenthesis here. In the\nprevious example, rev takes one parameter, a pattern, and we had to\n\u2018wrap up\u2019 the pattern sound ",Object(o.b)("inlineCode",{parentName:"p"},'"[bd bd] [bd [sn [sn sn] sn] sn]"')," in\nbrackets to pass it to rev. In the above example every takes three\nparameters: a number, a function and a pattern. We had to wrap up the\npattern as before, but also rev in order to give it to every. This\nshould become clearer with practice."),Object(o.b)("p",null,"You can also slow down or speed up the playback of a pattern, this makes\nit a quarter of the speed:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ slow 4 $ sound "bd*2 [bd [sn sn*2 sn] sn]"\n')),Object(o.b)("p",null,"And this four times the speed:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ fast 4 $ sound "bd*2 [bd [sn sn*2 sn] sn]"\n')),Object(o.b)("p",null,"Note that slow 0.25 would do exactly the same as fast 4."),Object(o.b)("p",null,"Again, this can be applied selectively:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 4 (fast 4) $ sound "bd*2 [bd [sn sn*2 sn] sn]"\n')),Object(o.b)("p",null,"Note again the use of parenthesis, around fast 4. This is needed, to\ngroup together the function fast with its parameter 4, before being\npassed as a parameter to the function every."),Object(o.b)("p",null,"In the examples above, the sound function takes a pattern of sample\nnames, and turns it into a pattern of synthesizer triggers. This might\ntake a while to fully understand, but the important thing to remember is\nthat \u201cit\u2019s patterns all the way down\u201d. In this case, this means that you\ncan operate on the inner pattern of sample names, instead of the outer\npattern of synthesizer triggers that sound gives you:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound (every 4 (fast 4) "bd*2 [bd [sn sn*2 sn] sn]")\n')),Object(o.b)("p",null,"The fast function is also known as density, which is actually the older\nname, so a lot of examples will use it instead of the (slightly quicker\nto type) fast. They do exactly the same thing."),Object(o.b)("h3",{id:"where-are-all-the-functions"},"Where are all the functions?"),Object(o.b)("p",null,"There are many types of functions that help you change patterns. Some of\nthem re-order sequences, some alter time, some provide conditional\nlogic, and some can help compose more complex patterns."),Object(o.b)("p",null,"We\u2019ll introduce many of the core functions in this introduction, and a\nmore complete list of functions available in Tidal can be found on the\npage."),Object(o.b)("h2",{id:"applying-effects-with-control-patterns"},"Applying effects with control patterns"),Object(o.b)("p",null,"TidalCycles has a number of effects that you can apply to sounds. Some\nof them do simple things like change volume, and others do more complex\nthings like add delay or distortion. This is done with what we call\n",Object(o.b)("em",{parentName:"p"},"control patterns"),". In fact"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"sound\n")),Object(o.b)("p",null,"itself creates a control pattern, and we apply effects by combining\ncontrol patterns together."),Object(o.b)("p",null,"You can combine control patterns by adding the ","#"," operator between them:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*4" # crush "4"\n')),Object(o.b)("p",null,"The above code uses"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"crush\n")),Object(o.b)("p",null,"to create a bitcrushing control pattern with a value of 4 (which sounds\nreally grungy), and uses"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"#\n")),Object(o.b)("p",null,"to join that with the"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"sound\n")),Object(o.b)("p",null,"control pattern."),Object(o.b)("p",null,"You can combine multiple control patterns together, with the ","#","\noperator:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*4" # crush "4" # speed "2"\n')),Object(o.b)("p",null,"The code above both bitcrushes and speeds up sample playback (which\nincreases the \u2018pitch\u2019)."),Object(o.b)("h3",{id:"control-values-are-patterns-too"},"Control values are patterns too"),Object(o.b)("p",null,"You may notice that the values of effects are specified in double\nquotes. This means that you can pattern the effect values too:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*4" # gain "1 0.8 0.5 0.7"\n')),Object(o.b)("p",null,"The above"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"gain\n")),Object(o.b)("p",null,"effect changes how loud the sample is, good for patterns of emphasis as\nabove. Other control patterns follow all the same grouping rules as\nsound patterns:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*4 sn*4" # gain "[[1 0.8]*2 [0.5 0.7]]/2"\n')),Object(o.b)("p",null,"And you can also apply functions to control patterns:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*4" # (every 3 (rev) $ gain "1 0.8 0.5 0.7")\n')),Object(o.b)("p",null,"Like with the sound example earlier, you must use parenthesis after gain\nin order to specify a function on the gain pattern."),Object(o.b)("p",null,"This works too:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*4" # gain (every 3 (rev) $ "1 0.8 0.5 0.7")\n')),Object(o.b)("p",null,"In the above example,"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"every 3 (rev)\n")),Object(o.b)("p",null,"is being applied to"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'"1 0.8 0.5 0.7"\n')),Object(o.b)("p",null,", which is a pattern of numbers. In the example preceding it, the same\nfunction was applied to"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'gain "1 0.8 0.5 0.7"\n')),Object(o.b)("p",null,", which is a pattern of gain controls. In this case, whether you apply\nthe function before or after the numbers are turned into controls\ndoesn't matter too much, the outcome is exactly the same."),Object(o.b)("h3",{id:"control-pattern-order"},"Control pattern order"),Object(o.b)("p",null,"You can specify the effect control ",Object(o.b)("em",{parentName:"p"},"before")," the sound control:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ gain "1 0.8 0.5 0.7" # sound "bd"\n')),Object(o.b)("p",null,"The order that you put things matters; with"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"#\n")),Object(o.b)("p",null,"the structure of the pattern is given by the pattern on the ",Object(o.b)("em",{parentName:"p"},"left"),". In\nthis case, only one bd sound is given, but you hear four, because the\nstructure comes from the gain pattern on the left."),Object(o.b)("h3",{id:"modifying-control-values"},"Modifying control values"),Object(o.b)("p",null,"The ","#"," operator is just a shortcut to a longer form of operator called"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"|>\n")),Object(o.b)("p",null,". The"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"|>\n")),Object(o.b)("p",null,"operator is part of a family of operators, and means something special\nabout combining patterns, which we\u2019ll cover shortly. All you need to\nknow right now is that"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"|>\n")),Object(o.b)("p",null,"is used to combine patterns."),Object(o.b)("p",null,"You can use"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"|>\n")),Object(o.b)("p",null,"to combine patterns conditionally:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 2 (|> speed "2") $ sound "arpy*4" |> speed "1"\n')),Object(o.b)("p",null,"There are other types of operators that allow you to perform arithmetic:"),Object(o.b)("p",null,"|","+"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"|-"),"\n",Object(o.b)("inlineCode",{parentName:"p"},"|*"),"\n",Object(o.b)("inlineCode",{parentName:"p"},"|/")),Object(o.b)("p",null,"For example, using"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"|+\n")),Object(o.b)("p",null,"will perform an addition operation and add to an original value:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 2 (|+ speed "1") $ sound "arpy*4" |> speed "1"\n')),Object(o.b)("p",null,"The code above results in a speed of \u201c2\u201d every other cycle."),Object(o.b)("p",null,"The following will multiply values:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 2 (|* speed "1.5") $ sound "arpy*4" |> speed "1"\n')),Object(o.b)("p",null,"More complex patterns and chaining can be done, and with any effect, of\ncourse:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 3 (|- note "3") $ every 2 (|+ up "5") $ sound "arpy*4" |> note "0 2 4 5"\n')),Object(o.b)("p",null,"It might be worth sticking to just these ways of combining control\npatterns for now, but if you are curious, you can look into the ",Object(o.b)("a",{parentName:"p",href:"/wiki/Combining_pattern_structure",title:"wikilink"},"others\nthat are available"),"."),Object(o.b)("h3",{id:"some-common-effects"},"Some Common Effects"),Object(o.b)("p",null,"Here is a quick list of some effects you can use in Tidal (the full list\nis available in the Reference section):"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"gain - changes volume, values from 0 to 1"),Object(o.b)("li",{parentName:"ul"},"pan - pans sound right and left, values from 0 to 1"),Object(o.b)("li",{parentName:"ul"},"shape - a type of amplifier, values from 0 to 1"),Object(o.b)("li",{parentName:"ul"},"vowel - a vowel formant filter, values include a, e, i, o, and u"),Object(o.b)("li",{parentName:"ul"},"speed - changes playback speed of a sample, see below")),Object(o.b)("h2",{id:"shorthand-for-numerical-patterns"},"Shorthand for numerical patterns"),Object(o.b)("p",null,"From version 0.9 of Tidal, there are some nice ways of saving on\nkeypresses when working with numerical patterns."),Object(o.b)("p",null,"For example, when specifying patterns of single numbers, such as:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy(3,8)" # n "2"\n')),Object(o.b)("p",null,"you can miss off the double quotes, so this works fine:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy(3,8)" # n 2\n')),Object(o.b)("p",null,"However, if you wanted more than one value in that n pattern, you\u2019d have\nto put the quotes in:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy(3,8)" # n "2 5"\n')),Object(o.b)("p",null,"You can also treat patterns of numbers as simple numbers in other ways.\nFor example doing algebra:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy(3,8)" # n ("0 2" * 2)\n\n\x3c!--T:153--\x3e\nd1 $ sound "arpy(3,8)" # n (every 4 (* 2) "0 2")\n\n\x3c!--T:154--\x3e\nd1 $ n (off 0.125 (+12) $ off 0.25 (+7) $ slow 2 $ "0(3,8) [5 7]") # sound "supergong"\n')),Object(o.b)("p",null,"(The"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"supergong\n")),Object(o.b)("p",null,"sound requires"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"sc3-plugins\n")),Object(o.b)("p",null,"to be installed.)"),Object(o.b)("p",null,"This is still quite new to everyone, so you will not see it used much in\nthe documentation yet."),Object(o.b)("p",null,"You can also now specify increasing or decreasing numbers with a range,\nfor example this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},' d1 $ n "[0 .. 7] [3 .. 1]" # sound "supergong"\n')),Object(o.b)("p",null,"... is shorthand for:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ n "[0 1 2 3 4 5 6 7] [3 2 1]" # sound "supergong"\n')),Object(o.b)("h2",{id:"sample-playback-speed-and-pitch"},"Sample Playback Speed (and Pitch)"),Object(o.b)("p",null,"You can change the playback speed of a sample in TidalCycles by using\nthe speed effect. You can use speed to change pitches, to create a weird\neffect, or to match the length of a sample to a specific period of the\ncycle time (but see the loopAt function for an easy way of doing the\nlatter)."),Object(o.b)("p",null,"You can set a sample\u2019s speed by using the speed effect with a number."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},'speed "1" plays a sample at its original speed'),Object(o.b)("li",{parentName:"ul"},'speed "0.5" plays a sample at half of its original speed'),Object(o.b)("li",{parentName:"ul"},'speed "2" plays a sample at double its original speed')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy" # speed "1"\n\n\x3c!--T:166--\x3e\nd1 $ sound "arpy" # speed "0.5"\n\n\x3c!--T:167--\x3e\nd1 $ sound "arpy" # speed "2"\n')),Object(o.b)("p",null,"Just like other effects, you can specify a pattern for speed:"),Object(o.b)("p",null,'d1 $ speed "1 0.5 2 1.5" ',"#",' sound "arpy"'),Object(o.b)("p",null,"You can also reverse a sample by specifying negative values:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ speed "-1 -0.5 -2 -1.5" # sound "arpy"\n')),Object(o.b)("h3",{id:"play-a-sample-at-multiple-speeds-simultaneously"},"Play a sample at multiple speeds simultaneously"),Object(o.b)("p",null,"Use the pattern grouping syntax with a comma to cause speed to play a\nsample back at multiple speeds at the same time:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy" # speed "[1, 1.5]"\nd1 $ speed "[1 0.5, 1.5 2 3 4]" # sound "arpy"\n')),Object(o.b)("h3",{id:"12-tone-scale-speeds"},"12-tone scale speeds"),Object(o.b)("p",null,"You can also use the up function to change playback speed. up is a\nshortcut effect that matches speeds to half steps on a 12-tone scale.\nFor example, the following plays a chromatic scale:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ up "0 1 2 3 4 5 6 7 8 9 10 11" # sound "arpy"\n')),Object(o.b)("p",null,"You can also use the run function to create an incrementing pattern of\nintegers:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ up (run 12) # sound "arpy".\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"run")," function will be discussed later."),Object(o.b)("h2",{id:"euclidean-sequences"},"Euclidean Sequences"),Object(o.b)("p",null,"If you give two numbers in parenthesis after an element in a pattern,\nthen Tidal will distribute the first number of sounds equally across the\nsecond number of steps:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd(5,8)"\n')),Object(o.b)("p",null,"You can also use the ",Object(o.b)("a",{parentName:"p",href:"euclid",title:"wikilink"},"euclid")," function to do this.\n",Object(o.b)("a",{parentName:"p",href:"euclid",title:"wikilink"},"euclid")," takes the same two arguments as what is used\nin the parenthesis above:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ euclid 5 8 $ sound "bd"\n')),Object(o.b)("p",null,"You can use the parenthesis notation within a single element of a\npattern:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd(3,8) sn*2"\n\nd1 $ sound "bd(3,8) sn(5,8)"\n')),Object(o.b)("p",null,"You can also add a third parameter, which \u2018rotates\u2019 the pattern so it\nstarts on a different step:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd(5,8,2)"\n')),Object(o.b)("p",null,"You can also use the euclid function to apply a Euclidean algorithm over\na complex pattern, although the structure of that pattern will be lost:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ euclid 3 8 $ sound "bd*2 [sn cp]"\n')),Object(o.b)("p",null,"In the above, three sounds are picked from the pattern on the right\naccording to the structure given by the euclid 3 8. It ends up picking\ntwo bd sounds, a cp and missing the sn entirely."),Object(o.b)("p",null,"As a bonus, it is possible to pattern the parameters within the\nparenthesis, for example to alternate between 3 and 5 elements:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd([5 3]/2,8)"\n')),Object(o.b)("p",null,"These types of sequences use \u201cBjorklund\u2019s algorithm\u201d, which wasn\u2019t made\nfor music but for an application in nuclear physics, which is exciting.\nMore exciting still is that it is very similar in structure to the one\nof the first known algorithms written in Euclid\u2019s book of elements in\n300 BC. You can read more about this in the paper The Euclidean\nAlgorithm Generates Traditional Musical Rhythms by Toussaint. Some\nexamples from this paper are included below, including rotation in some\ncases."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"(2,5) : A thirteenth century Persian rhythm called Khafif-e-ramal."),Object(o.b)("li",{parentName:"ul"},"(3,4) : The archetypal pattern of the Cumbia from Colombia, as well\nas a Calypso rhythm from Trinidad."),Object(o.b)("li",{parentName:"ul"},"(3,5,2) : Another thirteenth century Persian rhythm by the name of\nKhafif-e-ramal, as well as a Rumanian folk-dance rhythm."),Object(o.b)("li",{parentName:"ul"},"(3,7) : A Ruchenitza rhythm used in a Bulgarian folk-dance."),Object(o.b)("li",{parentName:"ul"},"(3,8) : The Cuban tresillo pattern."),Object(o.b)("li",{parentName:"ul"},"(4,7) : Another Ruchenitza Bulgarian folk-dance rhythm."),Object(o.b)("li",{parentName:"ul"},"(4,9) : The Aksak rhythm of Turkey."),Object(o.b)("li",{parentName:"ul"},"(4,11) : The metric pattern used by Frank Zappa in his piece titled\nOutside Now."),Object(o.b)("li",{parentName:"ul"},"(5,6) : Yields the York-Samai pattern, a popular Arab rhythm."),Object(o.b)("li",{parentName:"ul"},"(5,7) : The Nawakhat pattern, another popular Arab rhythm."),Object(o.b)("li",{parentName:"ul"},"(5,8) : The Cuban cinquillo pattern."),Object(o.b)("li",{parentName:"ul"},"(5,9) : A popular Arab rhythm called Agsag-Samai."),Object(o.b)("li",{parentName:"ul"},"(5,11) : The metric pattern used by Moussorgsky in Pictures at an\nExhibition."),Object(o.b)("li",{parentName:"ul"},"(5,12) : The Venda clapping pattern of a South African children\u2019s\nsong."),Object(o.b)("li",{parentName:"ul"},"(5,16) : The Bossa-Nova rhythm necklace of Brazil."),Object(o.b)("li",{parentName:"ul"},"(7,8) : A typical rhythm played on the Bendir (frame drum)."),Object(o.b)("li",{parentName:"ul"},"(7,12) : A common West African bell pattern."),Object(o.b)("li",{parentName:"ul"},"(7,16,14) : A Samba rhythm necklace from Brazil."),Object(o.b)("li",{parentName:"ul"},"(9,16) : A rhythm necklace used in the Central African Republic."),Object(o.b)("li",{parentName:"ul"},"(11,24,14) : A rhythm necklace of the Aka Pygmies of Central Africa."),Object(o.b)("li",{parentName:"ul"},"(13,24,5) : Another rhythm necklace of the Aka Pygmies of the upper\nSangha.")),Object(o.b)("h2",{id:"tempo"},"Tempo"),Object(o.b)("p",null,"If you\u2019ve made it this far without changing the tempo in all these\nexamples, then you\u2019re probably ready to change it up."),Object(o.b)("p",null,"Tidal\u2019s core unit of time is cycles per second. By default it is set to\n0.5625 (or 135 BPM) It can be set with the"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"setcps\n")),Object(o.b)("p",null,"function:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"setcps 1\n")),Object(o.b)("p",null,"You can execute setcps just like a pattern (using Shift+Enter in your\neditor)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"setcps\n")),Object(o.b)("p",null,"accepts a positive numeric value that can include a decimal:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"setcps 1.5\nsetcps 0.75\nsetcps 10\n")),Object(o.b)("p",null,"Tidal\u2019s timing is based on cycles, rather than beats, however it is more\ncommon for people to think in terms of beats per minute (BPM). If you\nprefer to think in this way, you have to decide how many beats you want\nto have per cycle, and divide accordingly. For example if you wanted to\nplay at 140 bpm, with four beats per cycle, then you could do:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"setcps (140/60/4)\n")),Object(o.b)("p",null,"You can also pattern the tempo with the"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"cps\n")),Object(o.b)("p",null,"control function, for example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "cp(3,8)"\n  # cps (slow 8 $ range 0.8 1.6 saw)\n')),Object(o.b)("h2",{id:"the-run-function"},"The Run Function"),Object(o.b)("p",null,"There is a special utility function called run which will return a\npattern of integers up to a specified maximum. You can use run with\neffects to aid in automatically generating a linear pattern:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy*8" # up (run 8)\nd1 $ sound "arpy*8" # speed (run 8)\n')),Object(o.b)("p",null,"In the above we\u2019re specifying the number of sounds twice - in the sound\npattern as well as the up or speed pattern. There\u2019s actually a neat way\nof only having to specify this once, simply by switching them round, so\nthe effect parameter is on the left:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ up (run 8) # sound "arpy"\n')),Object(o.b)("p",null,"This works because TidalCycles always takes the structure of a pattern\nfrom the parameter that\u2019s on the left. We usually want the structure to\ncome from the sound parameter, but not always."),Object(o.b)("p",null,"Because run returns a pattern, you can apply functions to its result:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy*8" # up (every 2 (rev) $ run 8)\n')),Object(o.b)("p",null,"For a more practical example of using run, read below about selecting\nsamples from folders."),Object(o.b)("h2",{id:"algorithmically-selecting-samples"},"(Algorithmically) Selecting Samples"),Object(o.b)("p",null,"The sound parameter we\u2019ve been using up to now can actually be broken\ninto two separate parameters, making it easy to select samples with a\npattern. These parameters are s that gives the name of the sample set,\nand n which gives the number of the sample within that set. For example,\nthe following two patterns do exactly the same:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy:0 arpy:2 arpy:3"\nd1 $ n "0 2 3" # s "arpy"\n')),Object(o.b)("p",null,"It\u2019s possible to break the sound parameter into two different patterns,\nnamely s that gives the name of the sample set, and n which gives the\nindex of the sample within that set. For example, the following two\npatterns are the same:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy:0 arpy:2 arpy:3"\nd1 $ n "0 2 3" # s "arpy"\n')),Object(o.b)("p",null,"This allows us to separate the sample folder name from the index inside\nthe folder, possibly with surprising results!"),Object(o.b)("p",null,"There is also special function called samples that lets you do the same\nusing the sound parameter."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound $ samples "drum*4" "0 1 2 3"\n')),Object(o.b)("p",null,"the code above is the same as this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "drum:0 drum:1 drum:2 drum:3"\n')),Object(o.b)("p",null,"Whether you use n and s together, or sound with samples is up to you,\nalthough you might find the former to be more flexible."),Object(o.b)("p",null,"Remember the run function? Since run generates a pattern of integers, it\ncan be used with n to automatically \u201crun\u201d through the sample indices of\na folder:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ n (run 4) # s "drum"\nd1 $ sound $ samples "drum*4" (run 4) -- or with samples\n')),Object(o.b)("p",null,"And of course you can specify a different pattern of sample names:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ s "drum arpy cp hh" # n (run 10)\n')),Object(o.b)("p",null,"Again, by swapping the order of the s and n parameters, you can hear the\ndifference between taking the structure from one or the other:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ n (run 10) # s "drum arpy cp hh"\n')),Object(o.b)("p",null,"NOTE: if you specify a run value that is greater than the number of\nsamples in a folder, then the higher number index will \u201cwrap\u201d to the\nbeginning of the samples in the folder (just like with the colon\nnotation)."),Object(o.b)("p",null,"You might sometimes see the samples function wrapped in parenthesis:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound (samples "drum arpy cp hh" (run 10))\n')),Object(o.b)("h2",{id:"combining-types-of-patterns"},"Combining Types of Patterns"),Object(o.b)("p",null,"Ok, remember when we started adding effects:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd sn drum arpy" # pan "0 1 0.25 0.75"\n')),Object(o.b)("p",null,"What we\u2019re actually doing in the code above is combining two patterns\ntogether: the sound pattern, and the pan pattern. The special pipe\noperators (","|",">",", ","|","+, ","|","-, ","|","*",", ","|","/, ","|",">",", and so on), allow us to\ncombine two patterns. Remember that ","#"," is shorthand for ","|",">","."),Object(o.b)("p",null,"We can actually swap sides and it sounds the same:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ pan "0 1 0.25 0.75" # sound "bd sn drum arpy"\n')),Object(o.b)("p",null,"As we touched on earlier, the main thing to know when combining patterns\nlike this is that the left-most pattern determines the rhythmic\nstructure of the result. Removing one of the elements from the pan\npattern on the left results in a cycle with three samples played:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ pan "0 1 0.25" # sound "bd sn drum arpy"\n')),Object(o.b)("p",null,"In the code above, the pan pattern determines the rhythm because it is\nthe left-most pattern. The sound pattern now only determines what\nsamples are played at what time. The sound pattern gets mapped onto the\npan pattern."),Object(o.b)("p",null,"You might be wondering how TidalCycles decides which sound values get\nmatched with which pan values in the above. (If not, there is no need to\nread the rest of this paragraph just now!) The rule is, for each value\nin the pattern on the left, values from the right are matched where the\nstart (or onset) of the left value, fall within the timespan of the\nvalue on the right. For example, the second pan value of 1 starts one\nthird into its pattern, and the second sound value of sn starts one\nquarter into its pattern, and ends at the halfway point. Because the\nformer onset (one third) falls inside the timespan of the latter\ntimespan (from one quarter until one half), they are matched. The\ntimespan of arpy doesn\u2019t contain any onsets from the pan pattern, and so\nit doesn\u2019t match with anything, and isn\u2019t played."),Object(o.b)("p",null,"The rule described above may seem like a lot to keep in mind while\ncomposing patterns, but in practice there is no need. Our advice is to\nnot worry, write some patterns and get a feel for how they fit together."),Object(o.b)("p",null,"Anyway, this composition of pattern parameters allows us to do some\nunique things:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ up "0 0*2 0*4 1" # sound "[arpy, bass2, bd]"\n')),Object(o.b)("p",null,"Above, the sound pattern is merely specifying three samples to play on\nevery note. Both the rhythm and pitch of these notes is defined by the\nup pattern."),Object(o.b)("p",null,"It's also possible to switch things around so that structure comes from\nthe right, by using the operators ",">","|",", ","*","|",", +","|",", /","|"," and -","|",",\ninstead of ","|",">",", ","|","*",", ","|","+ and ","|","-, for example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "drum" >|  n "0 1*2 ~ 3"\n')),Object(o.b)("p",null,"The side of the operator that the ","|"," is on, is where the structure comes\nfrom. In fact, if you put the bar on both sides, structure comes from\nboth sides:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "drum cp" >|  n "0 1 2"\n')),Object(o.b)("h2",{id:"oscillation-with-continuous-patterns"},"Oscillation with Continuous Patterns"),Object(o.b)("p",null,"So far we\u2019ve only been working with discrete patterns, by which we mean\npatterns which containing events which begin and end. Tidal also\nsupports continuous patterns which instead vary continually over time.\nYou can create continuous patterns using functions which give sine, saw,\ntriangle, and square waves:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*16" # pan sine\n')),Object(o.b)("p",null,"The code above uses the sine pattern to specify a sine wave oscillation\nof values between 0 and 1 for the pan values, so the bass drum moves\nsmoothly between the left and right speakers."),Object(o.b)("p",null,"Tidal used to have sine and sine1 patterns with different ranges, but\nnow they are aliases, with both giving a range from 0 to 1."),Object(o.b)("p",null,"In addition to the sine pattern, Tidal also has saw, tri, and square,\nfor sawtooth, triangle and square waves respectively."),Object(o.b)("p",null,"Just like discrete patterns, you can control the speed of continuous\npatterns with slow or density:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*16" # pan (slow 8 $ saw)\nd1 $ sound "bd*8 sn*8" # pan (density 1.75 $ tri)\nd1 $ sound "bd*8 sn*8" # speed (density 2 $ tri)\n')),Object(o.b)("p",null,"You can also combine them in different ways:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*16" # pan (slowcat [sine, saw, square, tri])\nd1 $ sound "sn:2*16" # speed ((range 0.5 3 sine) * (slow 4 saw))\n')),Object(o.b)("h3",{id:"scaling-oscillation"},"Scaling Oscillation"),Object(o.b)("p",null,"You can tell the oscillation functions to scale themselves and oscillate\nbetween two values using range:"),Object(o.b)("p",null,"A recent change in tidal repurposed the old scale function to range, to\nfree scale to be used for other purposes."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*8 sn*8" # speed (range 1 3 $ tri)\nd1 $ sound "bd*8 sn*8" # speed (slow 4 $ range 1 3 $ tri)\n')),Object(o.b)("p",null,"You can also scale to negative values, but make sure to wrap negative\nvalues in parens (otherwise the interpreter thinks you\u2019re trying to\nsubtract 2 from something):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*8 sn*8" # speed (range (-2) 3 $ tri)\n')),Object(o.b)("p",null,"This technique works well for a slow low-pass filter cutoff:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "hh*32" # cutoff (range 300 1000 $ slow 4 $ sine) # resonance "0.4"\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE"),": Despite the fact that these oscillator patterns produce\ncontinuous values, you still need to combine them with discrete sound\npatterns."),Object(o.b)("h2",{id:"rests"},"Rests"),Object(o.b)("p",null,"So far we have produced patterns that keep producing more and more\nsound. What if you want a rest, or gap of silence, in your pattern? You\ncan use the \u201ctilde\u201d ","~"," character to do so:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd bd ~ bd"\n')),Object(o.b)("p",null,"Think of the ",Object(o.b)("inlineCode",{parentName:"p"},"~")," as an \u2018empty\u2019 step in a sequence, that just produces\nsilence."),Object(o.b)("h2",{id:"polymeters"},"Polymeters"),Object(o.b)("p",null,"We talked about polyrhythms earlier, but Tidal can also produce\npolymeter sequences. A polymeter pattern is one where two patterns have\ndifferent sequence lengths, but share the same pulse or tempo."),Object(o.b)("p",null,"You use curly brace syntax to create a polymeter rhythm:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "{bd hh sn cp, arpy bass2 drum notes can}"\n')),Object(o.b)("p",null,"The code above results in a five-note rhythm being played at the pulse\nof a four-note rhythm. If you switch the groups around, it results in a\nfour-note rhythm over a five-note rhythm:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "{arpy bass2 drum notes can, bd hh sn cp}"\n')),Object(o.b)("p",null,"Sometimes you might want to create an odd polymeter rhythm without\nhaving to explicitly create a base rhythm. You could do this with rests:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "{~ ~ ~ ~, arpy bass2 drum notes can}"\n')),Object(o.b)("p",null,"But a more efficient way is to use the % symbol after the closing curly\nbrace to specify the number of notes in the base pulse:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "{arpy bass2 drum notes can}%4"\n')),Object(o.b)("p",null,"the above is the same as this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "{~ ~ ~ ~, arpy bass2 drum notes can}"\n')),Object(o.b)("p",null,"If \u201cpolymeter\u201d sounds a bit confusing, there\u2019s a good explanation here:\n",Object(o.b)("a",{parentName:"p",href:"http://music.stackexchange.com/questions/10488/polymeter-vs-polyrhythm"},"http://music.stackexchange.com/questions/10488/polymeter-vs-polyrhythm")),Object(o.b)("h2",{id:"shifting-time"},"Shifting Time"),Object(o.b)("p",null,"You can use the ",Object(o.b)("inlineCode",{parentName:"p"},"~>")," and ",Object(o.b)("inlineCode",{parentName:"p"},"<~")," functions to shift patterns forwards or\nbackwards in time, respectively. With each of these functions, you can\nspecify an amount, in cycle units."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ (0.25 <~) $ sound "bd*2 cp*2 hh sn"\nd1 $ (0.25 ~>) $ sound "bd*2 cp*2 hh sn"\n')),Object(o.b)("p",null,"The above code shifts the patterns over by one quarter of a cycle."),Object(o.b)("p",null,"You can hear this shifting effect best when applying it conditionally.\nFor example, the below shifts the pattern every third cycle:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 3 (0.25 <~) $ sound "bd*2 cp*2 hh sn"\nd1 $ every 3 (0.25 ~>) $ sound "bd*2 cp*2 hh sn"\n')),Object(o.b)("p",null,"You can shift patterns as little or as much as you\u2019d like:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 3 (0.0625 <~) $ sound "bd*2 cp*2 hh sn"\nd1 $ every 3 (1000 ~>) $ sound "bd*2 cp*2 hh sn"\nd1 $ every 3 (1000.125 ~>) $ sound "bd*2 cp*2 hh sn"\n')),Object(o.b)("p",null,"However, in the above case every cycle is the same, so you won\u2019t here a\ndifference between shifting it 1 or 1000 cycles."),Object(o.b)("p",null,"You can also specify a pattern for the shift amount:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ "[0 0.25]/4" <~ (sound "bd*2 cp*2 hh sn")\n')),Object(o.b)("h2",{id:"introducing-randomness"},"Introducing Randomness"),Object(o.b)("p",null,"Tidal can produce random patterns of integers and decimals. It can also\nintroduce randomness into patterns by removing random events."),Object(o.b)("h3",{id:"random-decimal-patterns"},"Random Decimal Patterns"),Object(o.b)("p",null,"You can use the rand function to create a random value between 0 and 1.\nThis is useful for effects:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy*4" # pan (rand)\n')),Object(o.b)("p",null,"As with run and all numeric patterns, the values that rand give you can\nbe scaled, for example the below gives random numbers between 0.25 and\n0.75:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "arpy*4" # pan (range 0.25 0.75 $ rand)\n')),Object(o.b)("h3",{id:"random-integer-patterns"},"Random Integer Patterns"),Object(o.b)("p",null,"Use the irand function to create a random integer up to a given maximum.\nThe most common usage of irand is to produce a random pattern of sample\nindices (similar to run):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ s "arpy*8" # n (irand 30)\n')),Object(o.b)("p",null,"The code above randomly chooses from 30 samples in the \u201carpy\u201d folder."),Object(o.b)("p",null,"Hairy detail: rand and irand are actually continuous patterns, which in\npractical terms means they have infinite detail - you can treat them as\npure information! As with all patterns they are also deterministic,\nstateless functions of time, so that if you retriggered a pattern from\nthe same logical time point, exactly the same numbers would be produced.\nFurthermore, if you use a rand or irand in two different places, you\nwould get the same \u2018random\u2019 pattern - if this isn\u2019t what you want, you\ncan simply shift or slow down time a little for one of them, e.g. slow\n0.3 rand."),Object(o.b)("h3",{id:"removing-or-degrading-pattern-events"},"Removing or \u201cDegrading\u201d Pattern events"),Object(o.b)("p",null,"Tidal has a few ways to randomly remove events from patterns. You can\nuse the shorthand ? symbol if you want to give an event a 50/50 chance\nof happening or not on every cycle:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd? sd? sd? sd?"\n')),Object(o.b)("p",null,"In the code above, the whole sample has a 50% chance if it will be\nplayed or if the whole cycle will be silent."),Object(o.b)("p",null,"You can add the ? after the completion of any event or group in a\npattern:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*16?"\nd1 $ sound "bd sn? cp hh?"\nd1 $ sound "[bd sn cp hh]?"\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"?")," symbol is shorthand for the degrade function. The two lines\nbelow are equivalent:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound "bd*16?"\nd1 $ degrade $ sound "bd*16"\n')),Object(o.b)("p",null,"Related to degrade is the degradeBy function, where you can specify the\nprobability (from 0 to 1) that events will be removed from a pattern:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ degradeBy 0.25 $ sound "bd*16"\n')),Object(o.b)("p",null,"There is also sometimesBy, which executes a function based on a\nprobability:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sometimesBy 0.75 (# crush 4) $ sound "bd arpy sn ~"\n')),Object(o.b)("p",null,"The code above has a 75% chance of applying the bitcrush effect pattern\n","#"," crush 4 on every event in the sound pattern."),Object(o.b)("p",null,"There are other aliases for sometimesBy:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"sometimes = sometimesBy 0.5\noften = sometimesBy 0.75\nrarely = sometimesBy 0.25\nalmostNever = sometimesBy 0.1\nalmostAlways = sometimesBy 0.9\n")),Object(o.b)("p",null,"e.g.:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ rarely (# crush 4) $ sound "bd*8"\n')),Object(o.b)("h2",{id:"creating-variation-in-patterns"},"Creating Variation in Patterns"),Object(o.b)("p",null,"You can create a lot of cyclic variations in patterns by layering\nconditional logic:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 5 (|+| speed "0.5") $ every 4 (0.25 <~) $ every 3 (rev) $\n  sound "bd sn arpy*2 cp"\n  # speed "[1 1.25 0.75 -1.5]/3"\n')),Object(o.b)("p",null,"In addition to every you can also use the whenmod conditional function.\nwhenmod takes two parameters; it executes a function when the remainder\nof the current loop number divided by the first parameter is greater or\nequal than the second parameter."),Object(o.b)("p",null,"For example, the following will play a pattern normally for cycles 1-6,\nthen play it in reverse for cycles 7-8. Then normally again for six\ncycles, then in reverse for two, and so on:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ whenmod 8 6 (rev) $ sound "bd*2 arpy*2 cp hh*4"\n')),Object(o.b)("h2",{id:"creating-fills-and-using-const"},'Creating "Fills" and using "const"'),Object(o.b)("p",null,"You can think of a \u201cfill\u201d as a change to a regular pattern that happens\nregularly. e.g. every 4 cycles do \u201cxya\u201d, or every 8 cycles do \u201cabc\u201d."),Object(o.b)("p",null,"We\u2019ve already been using every and whenmod to do pattern function fills:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 8 (rev) $ every 4 (density 2) $ sound "bd hh sn cp"\nd1 $ whenmod 16 14 (# speed "2") $ sound "bd arpy*2 cp bass2"\n')),Object(o.b)("p",null,"However, what if you wanted to conditionally replace the pattern with a\nnew one? You can use the const function to completely replace a playing\npattern."),Object(o.b)("p",null,"Let\u2019s start with a trivial example where we use const to replace an\nentire pattern all the time:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ const (sound "arpy*3") $ sound "bd sn cp hh"\n')),Object(o.b)("p",null,"In the code above, we\u2019ve completely replaced the \u201cbd sn cp hh\u201d pattern\nwith an \u201carpy\u201d pattern. const specifies the new pattern."),Object(o.b)("p",null,"We can conditionally apply const using every or whenmod:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ whenmod 8 6 (const $ sound "arpy(3,8) bd*4") $ sound "bd sn bass2 sn"\nd1 $ every 12 (const $ sound "bd*4 sn*2") $ sound "bd sn bass2 sn"\n')),Object(o.b)("h2",{id:"composing-multi-part-patterns"},"Composing Multi-Part Patterns"),Object(o.b)("p",null,"There are a few ways that you can compose new patterns from multiple\nother patterns. You can concatenate or \u201cappend\u201d patterns in serial, or\nyou can \u201cstack\u201d them and play them together in parallel."),Object(o.b)("h3",{id:"concatenating-patterns-in-serial"},"Concatenating patterns in serial"),Object(o.b)("p",null,"You can use the ",Object(o.b)("inlineCode",{parentName:"p"},"fastcat")," function to add patterns one after another:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ fastcat [sound "bd sn:2" # vowel "[a o]/2",\n             sound "casio casio:1 casio:2*2"\n            ]\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"fastcat")," function squeezes all the patterns into the space of one.\nThe more patterns you add to the list, the faster each pattern will be\nplayed so that all patterns can fit into a single cycle."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ fastcat [sound "bd sn:2" # vowel "[a o]/2",\n             sound "casio casio:1 casio:2*2",\n             sound "drum drum:2 drum:3 drum:4*2"\n            ]\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"cat")," (also known as ",Object(o.b)("inlineCode",{parentName:"p"},"slowcat"),"), will maintain the original playback\nspeed of the patterns:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ cat [sound "bd sn:2" # vowel "[a o]/2",\n         sound "casio casio:1 casio:2*2",\n         sound "drum drum:2 drum:3 drum:4*2"\n        ]\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"cat")," is a great way to create a linear sequence of patterns (a sequence\nof sequences), giving a larger form to multiple patterns."),Object(o.b)("p",null,"There\u2019s also ",Object(o.b)("inlineCode",{parentName:"p"},"randcat"),", which will play a random pattern from the list."),Object(o.b)("h3",{id:"playing-patterns-together-in-parallel"},"Playing patterns together in parallel"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"stack")," function takes a list of patterns and combines them into a\nnew pattern by playing all of the patterns in the list simultaneously."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ stack [\n sound "bd bd*2",\n sound "hh*2 [sn cp] cp future*4",\n sound (samples "arpy*8" (run 16))\n]\n')),Object(o.b)("p",null,"This is useful if you want to apply functions or effects on the entire\nstack:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ every 4 (slow 2) $ whenmod 5 3 (# speed "0.75 1.5") $ stack [\n sound "bd bd*2",\n sound "hh*2 [sn cp] cp future*4",\n sound (samples "arpy*8" (run 16))\n] # speed "[[1 0.8], [1.5 2]*2]/3"\n')),Object(o.b)("h2",{id:"truncating-samples-with-cut"},'Truncating samples with "cut"'),Object(o.b)("p",null,"So far, all of our examples have used short samples. However, maybe\nyou\u2019ve experimented with some long samples. Maybe you\u2019ve noticed that\nreally long samples can cause a lot of bleed and unwanted sound."),Object(o.b)("p",null,"With Tidal\u2019s cut effect, you can \u201cchoke\u201d a sound and stop it from\nplaying when a new sample is triggered."),Object(o.b)("p",null,"Consider the following example where we have a pattern of \u201carpy\u201d sounds,\nplayed at a low speed, so there is a lot of bleed into each sample:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound (samples "arpy*8" (run 8)) # speed "0.25"\n')),Object(o.b)("p",null,"We can stop this bleed by using cut and assigning the pattern a cut\ngroup of \u201c1\u201d:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound (samples "arpy*8" (run 8)) # speed "0.25" # cut "1"\n')),Object(o.b)("p",null,"No more bleed!"),Object(o.b)("p",null,"You can use any number for the cut group."),Object(o.b)("p",null,"Cut groups are global, to the Tidal process, so if you have two Dirt\nconnections, use two different cut group values to make sure the\npatterns don\u2019t choke each other:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound (samples "arpy*8" (run 8)) # speed "0.25" # cut "1"\nd2 $ sound (samples "bass2*6" (run 6)) # speed "0.5" # cut "2"\n')),Object(o.b)("p",null,"This also works in a stack:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ stack [\n  sound (samples "arpy*8" (run 8)) # speed "0.25" # cut "1",\n  sound (samples "bass2*6" (run 6)) # speed "0.5" # cut "2" ]\n')),Object(o.b)("h2",{id:"transitions-between-patterns"},"Transitions Between Patterns"),Object(o.b)("p",null,"Changing the pattern on a channel takes effect (almost) immediately.\nThis may not be what you want, especially when performing live!"),Object(o.b)("p",null,"That\u2019s why Tidal allows you to choose a transition that will introduce\nanother pattern, eventually replacing the current one."),Object(o.b)("p",null,"So once we have something running on d1, we can use the same channel\nnumber (1), passed to a nice transition function:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ sound (samples "hc*8" (iter 4 $ run 4))\n\nanticipate 1 $ sound (samples "bd(3,8)" (run 3))\n')),Object(o.b)("p",null,"To transition from here, simply change the pattern, and in this case\nalso change the transition function:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'xfadeIn 1 16 $ sound "bd(5,8)"\n')),Object(o.b)("p",null,"The above will fade over 16 cycles from the former pattern to the given\nnew one."),Object(o.b)("p",null,"Apart from ",Object(o.b)("inlineCode",{parentName:"p"},"anticipate")," and ",Object(o.b)("inlineCode",{parentName:"p"},"xfadeIn")," there are a lot more transition\nfunctions e.g. some that will force you to keep changing your patterns\nto avoid repetitive performances."),Object(o.b)("h2",{id:"samples"},"Samples"),Object(o.b)("p",null,"If you\u2019re using SuperDirt, all the default samples can be found in the\nDirt-Samples folder - you can open it by running Quarks.gui in\nSuperCollider, clicking on \u201cDirt-Samples\u201d and then \u201copen folder\u201d. If\nyou\u2019re using classic dirt, look in its samples subfolder. Here\u2019s some\nyou could try:"),Object(o.b)("p",null,"flick sid can metal future gabba sn mouth co gretsch mt arp h cp cr\nnewnotes bass crow hc tabla bass0 hh bass1 bass2 oc bass3 ho odx\ndiphone2 house off ht tink perc bd industrial pluck trump printshort\njazz voodoo birds3 procshort blip drum jvbass psr wobble drumtraks koy\nrave bottle kurt latibro rm sax lighter lt arpy feel less stab ul"),Object(o.b)("p",null,"Each one is a folder containing one or more wav files. For example when\nyou put bd:1 in a sequence, you\u2019re picking up the second wav file in the\nbd folder. If you ask for the ninth sample and there are only seven in\nthe folder, it\u2019ll wrap around and play the second one."),Object(o.b)("p",null,"If you want to add your own samples, just create a new folder in the\nsamples folder, and put wav files in it."),Object(o.b)("h2",{id:"synths"},"Synths"),Object(o.b)("p",null,"For this section to work, you need to have installed the SuperCollider\nsc3-plugins. You can either install the latest version from git, or if\nyou are using Linux, you may find it in your package manager. On Fedora\nthe package is called supercollider-sc3-plugins."),Object(o.b)("p",null,"SuperDirt is created with SuperCollider, a fantastic synthesis engine\nand language with huge sonic possibilities. You can trigger custom\nSuperCollider synths from TidalCycles in much the same way as you\ntrigger samples. For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ midinote "60 62*2" # s "supersaw"\n')),Object(o.b)("p",null,"The above plays note 60 and 62 of the MIDI scale, using the midinote\nparameter. You can alternatively specify notes by name, using n:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ n "c5 d5*2" # s "supersaw"\n')),Object(o.b)("p",null,"For half tones you add the suffixes \u201cf\u201d or \u201cs\u201d (flat or sharp) to the\nnote in question."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ n "<[a5,cs5,e5,g5]*3 [d5,fs5,g5,c5]>" # s "supersquare" # gain "0.7"\n')),Object(o.b)("p",null,"Above is a two chord progression A7 D7. Notice cs5 and fs5 as C","#","5 and\nF","#","5, respectively."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d2 $ every 4 (rev) $ n "<[g5 df5 e5 a5] [gf5 d5 c5 g5]*3>" # s "supersaw"\n')),Object(o.b)("p",null,"Now the same chords (A7 D7) this time played as ascending and descending\narpeggios and cs5 written as df5and fs5 as gf5. Play both examples\ntogether for more fun!"),Object(o.b)("p",null,"You can also specify note numbers with n, but where 0 is middle c\n(rather than 60 with midinote)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ n "0 5" # s "supersaw"\n')),Object(o.b)("p",null,"The default sustain length is a bit long so the sounds will overlap, you\ncan adjust this using the sustain parameter"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ n "c5 d5*2" # s "supersaw" # sustain "0.4 0.2"\n')),Object(o.b)("p",null,"Many example synths can be found in the default-synths-extra.scd file in\nthe SuperDirt/library folder or in default-synths.scd and\ntutorial-synths.scd in the SuperDirt/synths folder. These include:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"a series of tutorials: tutorial1, tutorial2, tutorial3, tutorial4,\ntutorial5"),Object(o.b)("li",{parentName:"ul"},"examples of modulating with the cursor or sound input: pmsin, in,\ninr"),Object(o.b)("li",{parentName:"ul"},"physical modeling synths: supermandolin, supergong, superpiano,\nsuperhex"),Object(o.b)("li",{parentName:"ul"},"a basic synth drumkit: superkick, superhat, supersnare, superclap,\nsuper808"),Object(o.b)("li",{parentName:"ul"},"four analogue-style synths: supersquare, supersaw, superpwm,\nsupercomparator"),Object(o.b)("li",{parentName:"ul"},"two digital-style synths: superchip, supernoise")),Object(o.b)("p",null,"To find the SuperDirt folder, simply run Quarks.folder in supercollider.\nThe full folder location should appear in the postwindow (which is\nusually in the bottom right)."),Object(o.b)("p",null,"Many of the above synths accept additional Tidal Parameters or interpret\nthe usual parameters in a slightly different way. For complete\ndocumentation, see default-synths.scd, but here are some examples to\ntry:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'d1 $ jux (# accelerate "-0.1") $ s "supermandolin*8" # midinote "[80!6 78]/8"\n # sustain "1 0.25 2 1"\n\nd1 $ midinote (slow 2 $ (run 8) * 7 + 50) # s "supergong" # decay "[1 0.2]/4"\n # voice "[0.5 0]/8" # sustain (slow 16 $ range 5 0.5 $ saw1)\n\nd1 $ sound "superhat:0*8" # sustain "0.125!6 1.2" # accelerate "[0.5 -0.5]/4"\n\nd1 $ s "super808 supersnare" # n (irand 5)\n # voice "0.2" # decay "[2 0.5]/4" # accelerate "-0.1" # sustain "0.5" # speed "[0.5 2]/4"\n\nd1 $ n (slow 8 "[[c5 e5 g5 c6]*4 [b4 e5 g5 b5]*4]") # s "superpiano"\n # velocity "[1.20 0.9 0.8 1]"\n\nd1 $ n (slow 8 $ "[[c4,e4,g4,c5]*4 [e4,g4,b5,e5]*4]" + "<12 7>") # s "superpiano"\n # velocity (slow 8 $ range 0.8 1.1 sine) # sustain "8"\n\nd1 $ n "[c2 e3 g4 c5 c4 c3]/3" # s "[superpwm supersaw supersquare]/24" # sustain "0.5"\n # voice "0.9" # semitone "7.9" # resonance "0.3" # lfo "3" # pitch1 "0.5" # speed "0.25 1"\n\nd1 $ every 16 (density 24 . (|+| midinote "24") . (# sustain "0.3") . (# attack "0.05"))\n $ s "supercomparator/4" # midinote ((irand 24) + 24)\n # sustain "8" # attack "0.5" # hold "4" # release "4"\n # voice "0.5" # resonance "0.9" # lfo "1" # speed "30" # pitch1 "4"\n\nd1 $ n "[c2 e3 g4 c5 c4 c3]*4/3" # s "superchip" # sustain "0.1"\n # pitch2 "[1.2 1.5 2 3]" # pitch3 "[1.44 2.25 4 9]"\n # voice (slow 4 "0 0.25 0.5 0.75") # slide "[0 0.1]/8" # speed "-4"\n\nd2 $ every 4 (echo (negate 3/32)) $ n "c5*4" # s "supernoise"\n # accelerate "-2" # speed "1" # sustain "0.1 ! ! 1" # voice "0.0"\n\nd1 $ s "supernoise/8" # midinote ((irand 10) + 30) # sustain "8"\n # accelerate "0.5" # voice "0.5" # pitch1 "0.15" # slide "-0.5" # resonance "0.7"\n # attack "1" # release "20" # room "0.9" # size "0.9" # orbit "1"\n')),Object(o.b)("p",null,"This is all quite new and under ongoing development, but you can read\nabout modifying and adding your own synths to SuperDirt at its github\nrepository."))}p.isMDXComponent=!0},216:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,h=u["".concat(s,".").concat(d)]||u[d]||b[d]||o;return n?r.a.createElement(h,l(l({ref:t},c),{},{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);