(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{136:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return o}));var n=a(3),l=a(7),i=(a(0),a(219)),r={title:"Samplers",id:"samplers"},s={unversionedId:"reference/samplers",id:"reference/samplers",isDocsHomePage:!1,title:"Samplers",description:"This page presents many functions related to the use of samples inside TidalCycles.",source:"@site/docs/reference/samplers.md",slug:"/reference/samplers",permalink:"/docs/reference/samplers",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/reference/samplers.md",version:"current",lastUpdatedBy:"Joan Queralt",lastUpdatedAt:1665944158,sidebar:"reference",previous:{title:"Transitions",permalink:"/docs/reference/transitions"},next:{title:"Sampling",permalink:"/docs/reference/sampling"}},c=[{value:"Basic sample manipulation",id:"basic-sample-manipulation",children:[{value:"amp",id:"amp",children:[]},{value:"begin",id:"begin",children:[]},{value:"end",id:"end",children:[]},{value:"gain",id:"gain",children:[]},{value:"grain",id:"grain",children:[]},{value:"grain&#39;",id:"grain-1",children:[]}]},{value:"Sample effects",id:"sample-effects",children:[{value:"accelerate",id:"accelerate",children:[]},{value:"speed",id:"speed",children:[]},{value:"sustain",id:"sustain",children:[]},{value:"unit",id:"unit",children:[]}]},{value:"Time stretching",id:"time-stretching",children:[{value:"timescale",id:"timescale",children:[]},{value:"timescalewin",id:"timescalewin",children:[]}]}],p={toc:c};function o(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This page presents many functions related to the use of samples inside TidalCycles."),Object(i.b)("p",null,"For specific information about functions used to slice and loop samples see ",Object(i.b)("a",{parentName:"p",href:"https://tidalcycles.org/docs/reference/sampling"},"Sampling"),"."),Object(i.b)("p",null,"Each function will be presented following the same model:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Type signature"),": how the function is declared on the ",Object(i.b)("strong",{parentName:"li"},"Haskell")," side."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Description"),": verbal description of the function."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Examples"),": a small list of examples that you can copy/paste in your editor.")),Object(i.b)("h2",{id:"basic-sample-manipulation"},"Basic sample manipulation"),Object(i.b)("h3",{id:"amp"},"amp"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: amp :: Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"amp")," is used to control the amplitude (volume) of the sound. It's very similar\nto ",Object(i.b)("inlineCode",{parentName:"p"},"gain"),", but it uses a linear function. Its default value is ",Object(i.b)("inlineCode",{parentName:"p"},"0.4"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy" # amp 0.6\n')),Object(i.b)("p",null,"This will play the first ",Object(i.b)("inlineCode",{parentName:"p"},"arpy")," sample at a volume slightly louder than the default."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy" # amp "<0.4 0.8 0.2>"\n')),Object(i.b)("p",null,"In the above example, the volume changes at each cycle."),Object(i.b)("h3",{id:"begin"},"begin"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: begin :: Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"begin")," receives a pattern of numbers from 0 to 1. It skips the beginning of each sample. The numbers indicate the proportion of the samples that needs to be skipped (",Object(i.b)("inlineCode",{parentName:"p"},"0")," would play the sample from the start, ",Object(i.b)("inlineCode",{parentName:"p"},"1")," would skip the whole sample, ",Object(i.b)("inlineCode",{parentName:"p"},"0.25")," would cut off the first quarter from each sample). For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "bev" # begin 0.5 # legato 1\n')),Object(i.b)("p",null,"In the above example, the sample is started from the half of its total length."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ n "0 1 2" # s "ade" # begin "<0 0.25 0.5 0.75>" # legato 1\n')),Object(i.b)("p",null,"In this other example, the first ",Object(i.b)("inlineCode",{parentName:"p"},"3")," ",Object(i.b)("inlineCode",{parentName:"p"},"ade")," samples are playied on every cycle, but the start point from which they are playied changes on each cycle."),Object(i.b)("h3",{id:"end"},"end"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: end :: Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,"The same as ",Object(i.b)("inlineCode",{parentName:"p"},"begin"),", but cuts off the end of samples, shortening them. For example, ",Object(i.b)("inlineCode",{parentName:"p"},"0.75")," will cut off the last quarter of each sample."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "bev" # begin 0.5 # end 0.65\n')),Object(i.b)("p",null,"This will play only a small part of the sample: from ",Object(i.b)("inlineCode",{parentName:"p"},"50%")," its length to ",Object(i.b)("inlineCode",{parentName:"p"},"65%")," its length."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "bev" >| begin 0.5 >| end "[0.65 0.55]"\n')),Object(i.b)("p",null,"The example above will play the sample two times for cycle, but the second time will play a shorter segment than the first time, creating some kind of canon effect."),Object(i.b)("h3",{id:"gain"},"gain"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: gain :: Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"gain")," is used to control the amplitude (volume) of the sound. Values less than ",Object(i.b)("inlineCode",{parentName:"p"},"1")," make the sound quieter. Values greater than ",Object(i.b)("inlineCode",{parentName:"p"},"1")," make the sound louder."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"gain")," uses a power function, so the volume change around ",Object(i.b)("inlineCode",{parentName:"p"},"1")," is subtle, but it gets more noticable as it increases or decreases. Typical values for ",Object(i.b)("inlineCode",{parentName:"p"},"gain")," are between ",Object(i.b)("inlineCode",{parentName:"p"},"0")," and ",Object(i.b)("inlineCode",{parentName:"p"},"1.5"),". For the linear equivalent, see ",Object(i.b)("inlineCode",{parentName:"p"},"amp"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy" # gain 0.8\n')),Object(i.b)("p",null,"This plays the first ",Object(i.b)("inlineCode",{parentName:"p"},"arpy")," sample at a quieter level than the default."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "ab*16" # gain (range 0.8 1.3 $ sine)\n')),Object(i.b)("p",null,"This plays a hihat sound, ",Object(i.b)("inlineCode",{parentName:"p"},"16")," times per cycle, with a ",Object(i.b)("inlineCode",{parentName:"p"},"gain")," moving from ",Object(i.b)("inlineCode",{parentName:"p"},"0.8")," to ",Object(i.b)("inlineCode",{parentName:"p"},"1.3")," following a sine wave."),Object(i.b)("h3",{id:"grain"},"grain"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: grain :: Pattern Double -> Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"grain")," is another way to specify what part of samples we want to play. Instead of specifying the ",Object(i.b)("inlineCode",{parentName:"p"},"begin")," and ",Object(i.b)("inlineCode",{parentName:"p"},"end"),", here we write the ",Object(i.b)("inlineCode",{parentName:"p"},"begin")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"length"),"."),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "bev" # grain 0.2 0.1 # legato 1\n')),Object(i.b)("p",null,"is equivalent to:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "bev" # begin 0.2 # end 0.3 # legato 1\n')),Object(i.b)("h3",{id:"grain-1"},"grain'"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: grain' :: Pattern String -> ControlPattern\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"grain'")," is simply a fast shortcut to join a ",Object(i.b)("inlineCode",{parentName:"p"},"begin")," and an ",Object(i.b)("inlineCode",{parentName:"p"},"end"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "bev" # grain\' "0.2:0.3" # legato 1\n')),Object(i.b)("p",null,"This example is equivalent to:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "bev" # begin 0.2 # end 0.3 # legato 1\n')),Object(i.b)("h2",{id:"sample-effects"},"Sample effects"),Object(i.b)("h3",{id:"accelerate"},"accelerate"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: accelerate :: Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,"A pattern of numbers that speed up (or slow down) samples while they play."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy" # accelerate 2\n')),Object(i.b)("p",null,"In this example, the sound starts at the original pitch, and gets higher as it plays. You can use a negative number to make the sound get lower."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ arp "up" $ note "c\'maj\'4" # s "arpy" # accelerateTake "susan" [0.2,1,-1]\n')),Object(i.b)("p",null,"Using ",Object(i.b)("a",{parentName:"p",href:"https://tidalcycles.org/docs/reference/state_values/#introduction-to-state-values"},"state values"),", in this example we apply a different acceleration to each played note."),Object(i.b)("h3",{id:"speed"},"speed"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: speed :: Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,"A pattern of numbers which changes the speed of sample playback. As a result, the sample duration and pitch will be modified. Negative values will play the sample backwards."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 5 $ s "sax:5" # legato 1 # speed 0.5\n')),Object(i.b)("p",null,"This will play the ",Object(i.b)("inlineCode",{parentName:"p"},"sax:5")," sample at half its rate. As a result, the sample will last twice the normal time, and will be pitched a whole octave lower. This is equivalent to ",Object(i.b)("inlineCode",{parentName:"p"},'d1 $ slow 5 $ s "sax:5" # legato 1 |- note 12'),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ fast 2 $ s "breaks125:1" # cps (125/60/4) # speed (-2)\n')),Object(i.b)("p",null,"In the above example, the break (which lasts for exactly one bar at 125 BPM), will be played backwards, and at double speed (so, we use ",Object(i.b)("inlineCode",{parentName:"p"},"fast 2")," to fill the whole cycle)."),Object(i.b)("h3",{id:"sustain"},"sustain"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: sustain :: Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,"A pattern of numbers that indicates the total duration of sample playback in seconds."),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"This ",Object(i.b)("inlineCode",{parentName:"p"},"sustain")," refers to the whole playback duration, and is not to be confused with the sustain level of a typical ADSR envelope."))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ fast 2 $ s "breaks125:1" # cps (120/60/4) # sustain 1\n')),Object(i.b)("p",null,"At 120 BPM, a cycle lasts for two seconds. In the above example, we cut the sample so it plays just for one second, and repeat this part two times, so we fill the whole cycle. Note that sample pitch isn't modified."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "breaks125:2!3" # cps (120/60/4) # sustain "0.4 0.2 0.4" # begin "0 0 0.4"\n')),Object(i.b)("p",null,"Here, we take advantage that ",Object(i.b)("inlineCode",{parentName:"p"},"sustain")," receives a pattern to build a different break from the original sample."),Object(i.b)("h3",{id:"unit"},"unit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: unit :: Pattern String -> ControlPattern\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"unit")," is used in conjunction with ",Object(i.b)("inlineCode",{parentName:"p"},"speed"),'. It accepts values of "r" (rate), "c" (cycles), or "s" (seconds).'),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},'unit "r"')," is the default. See the above ",Object(i.b)("inlineCode",{parentName:"p"},"speed")," section."),Object(i.b)("p",null,"Using ",Object(i.b)("inlineCode",{parentName:"p"},'unit "c"')," means ",Object(i.b)("inlineCode",{parentName:"p"},"speed")," will be interpreted in cycles. For example, ",Object(i.b)("inlineCode",{parentName:"p"},"speed 2")," means samples will be stretched to fill half a cycle:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ stack [\ns "sax:5" # legato 1 # speed 2 # unit "c",\ns "bd*2"\n]\n')),Object(i.b)("h2",{id:"time-stretching"},"Time stretching"),Object(i.b)("p",null,"According to Wikipedia, ",Object(i.b)("em",{parentName:"p"},"time stretching")," is the process of changing the speed or duration of an audio signal without affecting its pitch."),Object(i.b)("p",null,"This section presents the functions available in TidalCycles that let us time-stretch our samples at real time."),Object(i.b)("h3",{id:"timescale"},"timescale"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: timescale :: Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"timescale")," is the main function used to activate time-stretching, and usually the only one you need. It receives a single parameter which is the stretching rate to apply."),Object(i.b)("p",null,"You can use any positive number as the ratio, but the particular method used is designed for ratios greater than 1, and work reasonably well for values between 0.1 and 3."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "breaks152" # legato 1 # timescale (152/130) # cps (130/60/4)\n')),Object(i.b)("p",null,"In the example above, we set tempo at 130 beats per minute. But we want to play one of the ",Object(i.b)("inlineCode",{parentName:"p"},"breaks152")," samples, which are, as indicated, at 152 BPM. So, the ratio we want is 152 over 130. This will slow down the sample to fit in our 130 BPM tempo."),Object(i.b)("h3",{id:"timescalewin"},"timescalewin"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"Type: timescalewin :: Pattern Double -> ControlPattern\n")),Object(i.b)("p",null,"The algorithm used to time-stretch a sample divides our sample in many little parts, modifies them, and puts them all together again. It uses one particular parameter, called ",Object(i.b)("inlineCode",{parentName:"p"},"windowSize"),", which is the length of each sample part."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"windowSize")," value is automatically calculated, but we can change it using ",Object(i.b)("inlineCode",{parentName:"p"},"timescalewin"),". The ",Object(i.b)("inlineCode",{parentName:"p"},"windowSize")," value is multiplied by the number we provide to ",Object(i.b)("inlineCode",{parentName:"p"},"timescalewin"),"."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"timescalewin")," can be used to improve the quality of time-stretching for some samples, or simply as an effect."),Object(i.b)("p",null,"Let's compare the next two code examples:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "breaks152" # legato 1 # timescale (152/130) # timescalewin 0.01 # cps (130/60/4)\n')),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "breaks152" # legato 1 # timescale (152/130) # timescalewin 10 # cps (130/60/4)\n')),Object(i.b)("p",null,"In the first one, passing ",Object(i.b)("inlineCode",{parentName:"p"},"0.01")," makes the window size a lot smaller, and the extreme chopping of the sample causes a rougher sound."),Object(i.b)("p",null,"In the second one, passing ",Object(i.b)("inlineCode",{parentName:"p"},"10")," makes the chunks a lot bigger. The method used overlaps the treated chunks when recomposing the sample, and, with the bigger window size, this overlap is noticeable and causes a kind of delay effect."))}o.isMDXComponent=!0},219:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var n=a(0),l=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=l.a.createContext({}),o=function(e){var t=l.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},b=function(e){var t=o(e.components);return l.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},d=l.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,r=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=o(a),d=n,u=b["".concat(r,".").concat(d)]||b[d]||m[d]||i;return a?l.a.createElement(u,s(s({ref:t},p),{},{components:a})):l.a.createElement(u,s({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var p=2;p<i;p++)r[p]=a[p];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);