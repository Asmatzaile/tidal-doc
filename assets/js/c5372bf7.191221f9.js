(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{186:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return s}));var a=t(3),r=t(7),o=(t(0),t(218)),l={title:"Randomness",id:"randomness"},i={unversionedId:"patternlib/tour/randomness",id:"patternlib/tour/randomness",isDocsHomePage:!1,title:"Randomness",description:"This page will present you all the functions that can be used to introduce some randomness in your musical patterns. Each function will be presented following the same model:",source:"@site/docs/patternlib/tour/randomness.md",slug:"/patternlib/tour/randomness",permalink:"/docs/patternlib/tour/randomness",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/patternlib/tour/randomness.md",version:"current",lastUpdatedBy:"Raphael Forment",lastUpdatedAt:1621810431,sidebar:"docs",previous:{title:"Sampling",permalink:"/docs/patternlib/tour/sampling"},next:{title:"Composition",permalink:"/docs/patternlib/tour/composition"}},p=[{value:"Pseudo-randomisation",id:"pseudo-randomisation",children:[{value:"rand",id:"rand",children:[]},{value:"irand",id:"irand",children:[]}]},{value:"Perlin noise",id:"perlin-noise",children:[{value:"perlin",id:"perlin",children:[]},{value:"perlinWith",id:"perlinwith",children:[]},{value:"perlin2",id:"perlin2",children:[]},{value:"perlin2With",id:"perlin2with",children:[]}]}],c={toc:p};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This page will present you all the functions that can be used to introduce some randomness in your musical patterns. Each function will be presented following the same model:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Type signature"),": how the function is declared on the ",Object(o.b)("strong",{parentName:"li"},"Haskell")," side."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Description"),": verbal description of the function."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Examples"),": a small list of examples that you can copy/paste in your editor.")),Object(o.b)("h2",{id:"pseudo-randomisation"},"Pseudo-randomisation"),Object(o.b)("h3",{id:"rand"},"rand"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},"Type: rand :: Fractional a => Pattern a\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"rand")," is an oscillator that generates a pattern of (pseudo-)random, floating point numbers between ",Object(o.b)("inlineCode",{parentName:"p"},"0.0")," and ",Object(o.b)("inlineCode",{parentName:"p"},"1.0"),". For example to randomly pan around the stereo field you can:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*8" # pan rand\n')),Object(o.b)("p",null,"Or to enjoy a randomised speed from ",Object(o.b)("inlineCode",{parentName:"p"},"0.5")," to ",Object(o.b)("inlineCode",{parentName:"p"},"1.5"),", you can add ",Object(o.b)("inlineCode",{parentName:"p"},"0.5")," to it."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "arpy*4" # speed (rand + 0.5)\n')),Object(o.b)("h3",{id:"irand"},"irand"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},"Type: irand :: Num a => Int -> Pattern a\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"irand")," is similar to ",Object(o.b)("inlineCode",{parentName:"p"},"rand"),", but generates a continuous oscillator of (pseudo-)random integers between ",Object(o.b)("inlineCode",{parentName:"p"},"0")," to ",Object(o.b)("inlineCode",{parentName:"p"},"n-1")," inclusive. Notably used to pick random samples from a folder."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "amencutup*8" # n (irand 8)\n')),Object(o.b)("h2",{id:"perlin-noise"},"Perlin noise"),Object(o.b)("h3",{id:"perlin"},"perlin"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},"Type: perlin :: Pattern Double\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"perlin")," produces 1D Perlin (smooth) noise. It works like rand but smoothly moves between random values each cycle. For example, you can smoothly and randomly change speed:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*32" # speed (perlin + 0.5)\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"perlin")," function produces a new random value to move to every cycle. If you want a new random value to be generated more or less frequently, you can use ",Object(o.b)("inlineCode",{parentName:"p"},"fast")," or ",Object(o.b)("inlineCode",{parentName:"p"},"slow"),", respectively:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*32" # speed (fast 4 $ perlin + 0.5)\nd1 $ sound "bd*32" # speed (slow 4 $ perlin + 0.5)\n')),Object(o.b)("h3",{id:"perlinwith"},"perlinWith"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"perlinWith")," allows you to specify a pattern as input to generate random values instead of using the default cycle count:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy*32" # cutoff (perlinWith (saw * 4) * 2000)\n')),Object(o.b)("h3",{id:"perlin2"},"perlin2"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"perlin2")," creates 2D noise by allowing you to specify a custom pattern as a second dimension (cycle number remains as the first dimension):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "bd*32" # speed (perlin2 (sine*4) + 1)\n')),Object(o.b)("h3",{id:"perlin2with"},"perlin2With"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"perlin2With")," is the same as ",Object(o.b)("inlineCode",{parentName:"p"},"perlinWith")," except allows you to provide two functions for 2D noise:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},'d1\n $ s "[arpy*32]"\n # lpf (range 60 5000 $ perlin2With (cosine*2) (sine*2))\n # lpq 0.3\n')))}s.isMDXComponent=!0},218:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),s=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(t),u=a,m=d["".concat(l,".").concat(u)]||d[u]||b[u]||o;return t?r.a.createElement(m,i(i({ref:n},c),{},{components:t})):r.a.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);