(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{218:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=u(n),d=r,m=b["".concat(i,".").concat(d)]||b[d]||p[d]||o;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(218)),i={title:"Contributing Tests",id:"contributing_test"},c={unversionedId:"innards/contributing_test",id:"innards/contributing_test",isDocsHomePage:!1,title:"Contributing Tests",description:"Unit tests are small bits of code that check that a function works as expected. You might want to contribute a test for one or more reasons:",source:"@site/docs/innards/contributing_tests.md",slug:"/innards/contributing_test",permalink:"/docs/innards/contributing_test",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/innards/contributing_tests.md",version:"current",lastUpdatedBy:"Raphael Forment",lastUpdatedAt:1621681058,sidebar:"docs",previous:{title:"Type Signatures",permalink:"/docs/innards/type_signatures"},next:{title:"What is a pattern?",permalink:"/docs/innards/what_is_a_pattern"}},s=[{value:"Test modules",id:"test-modules",children:[]},{value:"Contributing tests",id:"contributing-tests",children:[]},{value:"Running tests",id:"running-tests",children:[]},{value:"Writing and contributing your test",id:"writing-and-contributing-your-test",children:[]}],l={toc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Unit tests are small bits of code that check that a function works as expected. You might want to contribute a test for one or more reasons:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"To demonstrate a bug or other unexpected behaviour in a clear way"),Object(o.b)("li",{parentName:"ul"},"To explain how a new feature works"),Object(o.b)("li",{parentName:"ul"},"Because there's a feature you really like and you don't want it to break in the futrue"),Object(o.b)("li",{parentName:"ul"},"To generally help make Tidal more resilient")),Object(o.b)("h2",{id:"test-modules"},"Test modules"),Object(o.b)("p",null,"You can browse the test modules that already exist ",Object(o.b)("a",{parentName:"p",href:"https://github.com/tidalcycles/Tidal/tree/master/test/Sound/Tidal"},"here"),"."),Object(o.b)("p",null,"The test modules are named after the modules they are testing, e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"/test/Sound/Tidal/UITest.hs")," has tests for ",Object(o.b)("inlineCode",{parentName:"p"},"Sound.Tidal.UITest"),". Here's an example from that file:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},'describe "euclidFull" $ do\n  it "can match against silence" $ do\n    compareP (Arc 0 1)\n      (euclidFull 3 8 "bd" silence)\n      ("bd(3,8)" :: Pattern String)\n')),Object(o.b)("p",null,"This tests that ",Object(o.b)("inlineCode",{parentName:"p"},"euclidFull")," works OK if its fourth parameter was silence. There was one a bug where it didn't, and the existence of this test means that if this bug comes back, we'll know about it."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"compareP")," is for comparing two patterns. It takes three parameters - an ",Object(o.b)("inlineCode",{parentName:"p"},"Arc")," with a start and stop time -- in this case ",Object(o.b)("inlineCode",{parentName:"p"},"0")," and ",Object(o.b)("inlineCode",{parentName:"p"},"1"),", which means that all the events in the first cycle (i.e, between time position ",Object(o.b)("inlineCode",{parentName:"p"},"0")," and ",Object(o.b)("inlineCode",{parentName:"p"},"1"),") are compared. Then come the two patterns that are to be compared."),Object(o.b)("p",null,"You'll also see ",Object(o.b)("inlineCode",{parentName:"p"},"comparePD")," - the final 'D' stands for defragment. There are cases where a function event gets split into two parts, and ",Object(o.b)("inlineCode",{parentName:"p"},"comparePD")," simply joins such events back together before comparing the patterns with each other."),Object(o.b)("h2",{id:"contributing-tests"},"Contributing tests"),Object(o.b)("p",null,"To contribute a test, you'll have to fork the ",Object(o.b)("strong",{parentName:"p"},"Tidal")," project. You'll need to create a (free!) account on GitHub if you don't already have one, then go to the ",Object(o.b)("a",{parentName:"p",href:"https://github.com/tidalcycles/tidal"},"Tidal")," and click the ",Object(o.b)("inlineCode",{parentName:"p"},"fork")," button."),Object(o.b)("p",null,"Once you've done that, you'll need to ",Object(o.b)("inlineCode",{parentName:"p"},"clone")," your new fork to your computer, and set that folder to be your current working directory. You can do that with this command, being sure to replace ",Object(o.b)("inlineCode",{parentName:"p"},'"<your username>"')," in the above with whatever your username is on GitHub."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/<your username>/Tidal/\ncd Tidal\n")),Object(o.b)("h2",{id:"running-tests"},"Running tests"),Object(o.b)("p",null,"Before you do anything else, it's a good idea run the tests to make sure everything completes OK. You can do that with the following command:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-haskell"},"cabal test\n")),Object(o.b)("h2",{id:"writing-and-contributing-your-test"},"Writing and contributing your test"),Object(o.b)("p",null,"It's now time to make a 'branch' for creating your test, and then send it to the ",Object(o.b)("strong",{parentName:"p"},"Tidal")," maintainers as a ",Object(o.b)("inlineCode",{parentName:"p"},"pull request"),". This is general development stuff, so we'll defer to this handy guide. You can start with step 3 - ",Object(o.b)("inlineCode",{parentName:"p"},'"create a branch"'),". "))}u.isMDXComponent=!0}}]);