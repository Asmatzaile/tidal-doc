(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{146:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(219)),o={title:"The meaning of $\xa0",id:"meaning_of_dollar"},l={unversionedId:"innards/meaning_of_dollar",id:"innards/meaning_of_dollar",isDocsHomePage:!1,title:"The meaning of $\xa0",description:"What is the dollar?",source:"@site/docs/innards/meaning_of_dollar.md",slug:"/innards/meaning_of_dollar",permalink:"/docs/innards/meaning_of_dollar",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/innards/meaning_of_dollar.md",version:"current",lastUpdatedBy:"Josh Morrow",lastUpdatedAt:1627416806,sidebar:"docs",previous:{title:"Haskell",permalink:"/docs/innards/haskell"},next:{title:"The meaning of .",permalink:"/docs/innards/meaning_of_dot"}},s=[{value:"What is the dollar?",id:"what-is-the-dollar",children:[]},{value:"Comparing $ and #",id:"comparing--and-",children:[]}],c={toc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"what-is-the-dollar"},"What is the dollar?"),Object(i.b)("p",null,"The dollar (",Object(i.b)("inlineCode",{parentName:"p"},"$"),") is a mysterious thing. It doesn't really do anything, but is super useful. It's easy to get it mixed up with other operators in ",Object(i.b)("strong",{parentName:"p"},"Tidal"),", for example ",Object(i.b)("inlineCode",{parentName:"p"},"#"),", because in a way they both 'join things together'. But what is ",Object(i.b)("inlineCode",{parentName:"p"},"$"),", exactly?"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"$")," is used a lot in ",Object(i.b)("strong",{parentName:"p"},"Haskell")," (the language which ",Object(i.b)("strong",{parentName:"p"},"Tidal")," lives inside). Like a lot of things in Haskell, ",Object(i.b)("inlineCode",{parentName:"p"},"$")," is a function. Like all operators (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"+"),"), it has two inputs - the left side, and the right side, and has one output. The left input must be a function, and all that ",Object(i.b)("inlineCode",{parentName:"p"},"$")," does is pass what's on the right hand side, and give it to that function. In other words, in this expression:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'rev $ "1 2 3"\n')),Object(i.b)("p",null,"... the dollar takes ",Object(i.b)("inlineCode",{parentName:"p"},'"1 2 3"')," and passes it to the function ",Object(i.b)("inlineCode",{parentName:"p"},"rev"),". So actually the above is the same as this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'rev "1 2 3"\n')),Object(i.b)("p",null,"So if we can do without it, why is it useful? Lets look at a slightly more complex example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'fast 2 $ rev "1 2 3"\n')),Object(i.b)("p",null,"Here the dollar takes care of passing ",Object(i.b)("inlineCode",{parentName:"p"},'rev "1 2 3"')," to ",Object(i.b)("inlineCode",{parentName:"p"},"fast 2"),". If we missed it out, then we'd get an error."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'-- this gives an error!\nfast 2 rev "1 2 3"\n')),Object(i.b)("p",null,"That's because the computer will first read ",Object(i.b)("inlineCode",{parentName:"p"},"fast 2"),", then ",Object(i.b)("inlineCode",{parentName:"p"},"rev"),", and try to treat ",Object(i.b)("inlineCode",{parentName:"p"},"rev")," as a pattern to be speeded up. But on its own, ",Object(i.b)("inlineCode",{parentName:"p"},"rev")," isn't a pattern, but a function for transforming pattern."),Object(i.b)("p",null,"To avoid this error, we could use parenthesis:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'fast 2 (rev "1 2 3")\n')),Object(i.b)("p",null,"Here the brackets make sure ",Object(i.b)("inlineCode",{parentName:"p"},'rev "1 2 3"')," is calculated first, before it is passed as a pattern to ",Object(i.b)("inlineCode",{parentName:"p"},"fast 2"),"."),Object(i.b)("p",null,"So, both ",Object(i.b)("inlineCode",{parentName:"p"},"$")," and parenthesis can be used to control which code is calculated first. The ",Object(i.b)("inlineCode",{parentName:"p"},"$")," is often used to avoid having to match opening and closing brackets, but sometimes parenthesis makes more sense."),Object(i.b)("p",null,"Note that you can't use ",Object(i.b)("inlineCode",{parentName:"p"},"$")," with operators. For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"-- this doesn't work either!\n4 * $ 2 + 3\n-- but this does\n4 * (2 + 3)\n")),Object(i.b)("h2",{id:"comparing--and-"},"Comparing $ and ","#"),Object(i.b)("p",null,"So, ",Object(i.b)("inlineCode",{parentName:"p"},"$")," is used to join a parameter (on the right) with a function (on the left). ",Object(i.b)("inlineCode",{parentName:"p"},"#")," (and all its friends ",Object(i.b)("inlineCode",{parentName:"p"},"|+|"),", ",Object(i.b)("inlineCode",{parentName:"p"},"|*|"),", etc) are used to combine a pattern on the right with a pattern on the left. Check out the page ",Object(i.b)("inlineCode",{parentName:"p"},"Pattern structure")," in the ",Object(i.b)("inlineCode",{parentName:"p"},"Basics")," section."))}p.isMDXComponent=!0},219:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||i;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);