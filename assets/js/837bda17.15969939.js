(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{131:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),l=(a(0),a(197)),o={title:"Oscillators",id:"oscillators"},i={unversionedId:"reference/oscillators",id:"reference/oscillators",isDocsHomePage:!1,title:"Oscillators",description:"Oscillators are continuously varying patterns. Unless otherwise stated, oscillators give minimum values of 0 and maximum values of 1, and repeat once per cycle.",source:"@site/docs/reference/Oscillators.md",slug:"/reference/oscillators",permalink:"/docs/reference/oscillators",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/reference/Oscillators.md",version:"current",lastUpdatedBy:"Joan Queralt",lastUpdatedAt:1670757096,sidebar:"reference",previous:{title:"Mini Notation",permalink:"/docs/reference/mini_notation"},next:{title:"Synthesizers",permalink:"/docs/reference/synthesizers"}},s=[{value:"What is an oscillator?",id:"what-is-an-oscillator",children:[]},{value:"Using oscillators",id:"using-oscillators",children:[{value:"Periodic oscillators",id:"periodic-oscillators",children:[]},{value:"Non-periodic oscillators",id:"non-periodic-oscillators",children:[]}]},{value:"Scaling oscillators",id:"scaling-oscillators",children:[]},{value:"Speeding up/down oscillators",id:"speeding-updown-oscillators",children:[]}],c={toc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Oscillators are continuously varying patterns. Unless otherwise stated, oscillators give minimum values of ",Object(l.b)("inlineCode",{parentName:"p"},"0")," and maximum values of ",Object(l.b)("inlineCode",{parentName:"p"},"1"),", and repeat once per cycle."),Object(l.b)("h2",{id:"what-is-an-oscillator"},"What is an oscillator?"),Object(l.b)("p",null,"Oscillators are continuous patterns, which means they don't have any structure, and must be used with a pattern that does. For example ",Object(l.b)("inlineCode",{parentName:"p"},'d1 $ sound "bd*8" >| pan sine')," won't work well, because the ",Object(l.b)("inlineCode",{parentName:"p"},">|")," operator instructs ",Object(l.b)("strong",{parentName:"p"},"Tidal")," to take structure from the right, and ",Object(l.b)("inlineCode",{parentName:"p"},"sine")," doesn't have any structure, so ",Object(l.b)("strong",{parentName:"p"},"Tidal")," will simply trigger events at a fixed rate (depending on your configuration, this might be very fast). ",Object(l.b)("inlineCode",{parentName:"p"},'d1 $ sound "bd*8" |> pan sine')," is better, because ",Object(l.b)("inlineCode",{parentName:"p"},"|>")," takes structure from the left, so eight kick drums will play, with pan values sampled from the sine wave for each of the eight events. Where a pattern has the type ",Object(l.b)("inlineCode",{parentName:"p"},"Fractional a => Pattern a"),", that means that they can be used both as floating point numbers or (rational) time values."),Object(l.b)("h2",{id:"using-oscillators"},"Using oscillators"),Object(l.b)("h3",{id:"periodic-oscillators"},"Periodic oscillators"),Object(l.b)("h4",{id:"sine"},"Sine"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: sine :: Fractional a => Pattern a\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"sine")," is a sinusoidal wave. Playing this example, you should hear the sound slowly moving from your left to your right speaker:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*8" # pan sine\n')),Object(l.b)("h4",{id:"cosine"},"Cosine"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: cosine :: Fractional a => Pattern a\n")),Object(l.b)("p",null,"A ",Object(l.b)("inlineCode",{parentName:"p"},"cosine")," wave, is a ",Object(l.b)("inlineCode",{parentName:"p"},"sine")," shifted in time by a quarter of a cycle. It sounds similar to the ",Object(l.b)("inlineCode",{parentName:"p"},"sine")," above:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*8" # pan cosine # speed (sine + 0.5)\n')),Object(l.b)("h4",{id:"square"},"Square"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: square :: Fractional a => Pattern a\n")),Object(l.b)("p",null,"A Square wave, starting at 0, then going up to 1 halfway through a cycle."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*8" # pan (cat [square, sine])\n')),Object(l.b)("h4",{id:"tri"},"Tri"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: tri :: Fractional a => Pattern a\n")),Object(l.b)("p",null,"A triangle wave, starting at 0, then linearly rising to 1 halfway through a cycle, then down again:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*16" # speed (slow 2 $ range 0.5 2 tri)\n')),Object(l.b)("h4",{id:"saw"},"Saw"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: saw :: Fractional a => Pattern a\n")),Object(l.b)("p",null,"A sawtooth wave starting at 0, then linearly rising to 1 over one cycle, then jumping back to 0:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*8" # pan (slow 2 saw)\n')),Object(l.b)("h4",{id:"isaw"},"Isaw"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: isaw :: Fractional a => Pattern a\n")),Object(l.b)("p",null,"An inverted sawtooth, starting at 1, then linearly falling to 0 over one cycle, then jumping back to 1:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*8" # pan (slow 2 isaw)\n')),Object(l.b)("h4",{id:"smooth"},"Smooth"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: smooth :: Fractional a => Pattern a -> Pattern a\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Smooth")," receives a pattern of numbers and linearly goes from one to the next, passing through all of them. As time is cycle-based, after reaching the last number in the pattern, it will smoothly go to the first one again."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*4" # pan (slow 4 $ smooth "0 1 0.5 1")\n')),Object(l.b)("p",null,"Note how the sound goes gradually from left to right, then to the center, then to the right again, and finally comes back to the left."),Object(l.b)("h3",{id:"non-periodic-oscillators"},"Non-periodic oscillators"),Object(l.b)("h4",{id:"rand"},"Rand"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: rand :: Fractional a => Pattern a\n")),Object(l.b)("p",null,"An infinitely detailed stream of (pseudo-)random numbers. See the ",Object(l.b)("inlineCode",{parentName:"p"},"rand")," reference page for more details."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*8" # pan rand\n')),Object(l.b)("h4",{id:"irand"},"Irand"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: irand :: Num a => Pattern Int -> Pattern a\n")),Object(l.b)("p",null,"A function from an integer (giving the maximum) to a stream of (pseudo-)random integer numbers. For more details, head to the ",Object(l.b)("inlineCode",{parentName:"p"},"rand")," reference page:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "drum*8" # n (irand 8)\n')),Object(l.b)("h2",{id:"scaling-oscillators"},"Scaling oscillators"),Object(l.b)("p",null,"By default, the oscillators will output values scaled between ",Object(l.b)("inlineCode",{parentName:"p"},"0")," and ",Object(l.b)("inlineCode",{parentName:"p"},"1"),". You might want to use bigger or smaller values. You might want, for instance, to modulate the frequency of a filter or select a random midi note between ",Object(l.b)("inlineCode",{parentName:"p"},"0")," and ",Object(l.b)("inlineCode",{parentName:"p"},"127"),". To do so, you can use the ",Object(l.b)("inlineCode",{parentName:"p"},"range")," function:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $\xa0s "bass:5*8" # lpf (range 200 5000 $\xa0sine)\n')),Object(l.b)("h2",{id:"speeding-updown-oscillators"},"Speeding up/down oscillators"),Object(l.b)("p",null,"Oscillators are patterns! It means that you can speed them up or down using the same function as usual (",Object(l.b)("inlineCode",{parentName:"p"},"fast"),", ",Object(l.b)("inlineCode",{parentName:"p"},"slow"),", etc..):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $\xa0s "bass:5*8" # lpf (slow 4 $ range 200 5000 $\xa0sine)\n')),Object(l.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(l.b)("div",{parentName:"div",className:"admonition-heading"},Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",{parentName:"h5",className:"admonition-icon"},Object(l.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(l.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(l.b)("div",{parentName:"div",className:"admonition-content"},Object(l.b)("p",{parentName:"div"},"Notice that most of the time, the speed up/down will be in sync with your pattern. How convenient!"))))}p.isMDXComponent=!0},197:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(a),u=n,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||l;return a?r.a.createElement(m,i(i({ref:t},c),{},{components:a})):r.a.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var c=2;c<l;c++)o[c]=a[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);