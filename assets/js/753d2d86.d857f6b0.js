(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{136:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return i})),t.d(a,"metadata",(function(){return p})),t.d(a,"toc",(function(){return c})),t.d(a,"default",(function(){return s}));var n=t(3),l=t(7),r=(t(0),t(218)),i={title:"Samplers",id:"samplers"},p={unversionedId:"reference/samplers",id:"reference/samplers",isDocsHomePage:!1,title:"Samplers",description:"This page presents many functions related to the use of samples inside TidalCycles.",source:"@site/docs/reference/samplers.md",slug:"/reference/samplers",permalink:"/docs/reference/samplers",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/reference/samplers.md",version:"current",lastUpdatedBy:"Joan Queralt",lastUpdatedAt:1664564615,sidebar:"reference",previous:{title:"Transitions",permalink:"/docs/reference/transitions"},next:{title:"Sampling",permalink:"/docs/reference/sampling"}},c=[{value:"Basic sample manipulation",id:"basic-sample-manipulation",children:[{value:"amp",id:"amp",children:[]},{value:"begin",id:"begin",children:[]},{value:"end",id:"end",children:[]},{value:"gain",id:"gain",children:[]},{value:"grain",id:"grain",children:[]},{value:"grain&#39;",id:"grain-1",children:[]}]},{value:"Sample effects",id:"sample-effects",children:[{value:"accelerate",id:"accelerate",children:[]}]}],o={toc:c};function s(e){var a=e.components,t=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},o,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This page presents many functions related to the use of samples inside TidalCycles."),Object(r.b)("p",null,"For specific information about functions used to slice and loop samples see ",Object(r.b)("a",{parentName:"p",href:"https://tidalcycles.org/docs/reference/sampling"},"Sampling"),"."),Object(r.b)("p",null,"Each function will be presented following the same model:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Type signature"),": how the function is declared on the ",Object(r.b)("strong",{parentName:"li"},"Haskell")," side."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Description"),": verbal description of the function."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Examples"),": a small list of examples that you can copy/paste in your editor.")),Object(r.b)("h2",{id:"basic-sample-manipulation"},"Basic sample manipulation"),Object(r.b)("h3",{id:"amp"},"amp"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: amp :: Pattern Double -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"amp")," is used to control the amplitude (volume) of the sound. It's very similar\nto ",Object(r.b)("inlineCode",{parentName:"p"},"gain"),", but it uses a linear function. Its default value is ",Object(r.b)("inlineCode",{parentName:"p"},"0.4"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy" # amp 0.6\n')),Object(r.b)("p",null,"This will play the first ",Object(r.b)("inlineCode",{parentName:"p"},"arpy")," sample at a volume slightly louder than the default."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy" # amp "<0.4 0.8 0.2>"\n')),Object(r.b)("p",null,"In the above example, the volume changes at each cycle."),Object(r.b)("h3",{id:"begin"},"begin"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: begin :: Pattern Double -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"begin")," receives a pattern of numbers from 0 to 1. It skips the beginning of each sample. The numbers indicate the proportion of the samples that needs to be skipped (",Object(r.b)("inlineCode",{parentName:"p"},"0")," would play the sample from the start, ",Object(r.b)("inlineCode",{parentName:"p"},"1")," would skip the whole sample, ",Object(r.b)("inlineCode",{parentName:"p"},"0.25")," would cut off the first quarter from each sample). For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "bev" # begin 0.5 # legato 1\n')),Object(r.b)("p",null,"In the above example, the sample is started from the half of its total length."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ n "0 1 2" # s "ade" # begin "<0 0.25 0.5 0.75>" # legato 1\n')),Object(r.b)("p",null,"In this other example, the first ",Object(r.b)("inlineCode",{parentName:"p"},"3")," ",Object(r.b)("inlineCode",{parentName:"p"},"ade")," samples are playied on every cycle, but the start point from which they are playied changes on each cycle."),Object(r.b)("h3",{id:"end"},"end"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: end :: Pattern Double -> ControlPattern\n")),Object(r.b)("p",null,"The same as ",Object(r.b)("inlineCode",{parentName:"p"},"begin"),", but cuts off the end of samples, shortening them. For example, ",Object(r.b)("inlineCode",{parentName:"p"},"0.75")," will cut off the last quarter of each sample."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "bev" # begin 0.5 # end 0.65\n')),Object(r.b)("p",null,"This will play only a small part of the sample: from ",Object(r.b)("inlineCode",{parentName:"p"},"50%")," its length to ",Object(r.b)("inlineCode",{parentName:"p"},"65%")," its length."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "bev" >| begin 0.5 >| end "[0.65 0.55]"\n')),Object(r.b)("p",null,"The example above will play the sample two times for cycle, but the second time will play a shorter segment than the first time, creating some kind of canon effect."),Object(r.b)("h3",{id:"gain"},"gain"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: gain :: Pattern Double -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"gain")," is used to control the amplitude (volume) of the sound. Values less than ",Object(r.b)("inlineCode",{parentName:"p"},"1")," make the sound quieter. Values greater than ",Object(r.b)("inlineCode",{parentName:"p"},"1")," make the sound louder."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"gain")," uses a power function, so the volume change around ",Object(r.b)("inlineCode",{parentName:"p"},"1")," is subtle, but it gets more noticable as it increases or decreases. Typical values for ",Object(r.b)("inlineCode",{parentName:"p"},"gain")," are between ",Object(r.b)("inlineCode",{parentName:"p"},"0")," and ",Object(r.b)("inlineCode",{parentName:"p"},"1.5"),". For the linear equivalent, see ",Object(r.b)("inlineCode",{parentName:"p"},"amp"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy" # gain 0.8\n')),Object(r.b)("p",null,"This plays the first ",Object(r.b)("inlineCode",{parentName:"p"},"arpy")," sample at a quieter level than the default."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "ab*16" # gain (range 0.8 1.3 $ sine)\n')),Object(r.b)("p",null,"This plays a hihat sound, ",Object(r.b)("inlineCode",{parentName:"p"},"16")," times per cycle, with a ",Object(r.b)("inlineCode",{parentName:"p"},"gain")," moving from ",Object(r.b)("inlineCode",{parentName:"p"},"0.8")," to ",Object(r.b)("inlineCode",{parentName:"p"},"1.3")," following a sine wave."),Object(r.b)("h3",{id:"grain"},"grain"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: grain :: Pattern Double -> Pattern Double -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"grain")," is another way to specify what part of samples we want to play. Instead of specifying the ",Object(r.b)("inlineCode",{parentName:"p"},"begin")," and ",Object(r.b)("inlineCode",{parentName:"p"},"end"),", here we write the ",Object(r.b)("inlineCode",{parentName:"p"},"begin")," and the ",Object(r.b)("inlineCode",{parentName:"p"},"length"),"."),Object(r.b)("p",null,"For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "bev" # grain 0.2 0.1 # legato 1\n')),Object(r.b)("p",null,"is equivalent to:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "bev" # begin 0.2 # end 0.3 # legato 1\n')),Object(r.b)("h3",{id:"grain-1"},"grain'"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: grain' :: Pattern String -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"grain'")," is simply a fast shortcut to join a ",Object(r.b)("inlineCode",{parentName:"p"},"begin")," and an ",Object(r.b)("inlineCode",{parentName:"p"},"end"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "bev" # grain\' "0.2:0.3" # legato 1\n')),Object(r.b)("p",null,"This example is equivalent to:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ s "bev" # begin 0.2 # end 0.3 # legato 1\n')),Object(r.b)("h2",{id:"sample-effects"},"Sample effects"),Object(r.b)("h3",{id:"accelerate"},"accelerate"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: accelerate :: Pattern Double -> ControlPattern\n")),Object(r.b)("p",null,"A pattern of numbers that speed up (or slow down) samples while they play."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy" # accelerate 2\n')),Object(r.b)("p",null,"In this example, the sound starts at the original pitch, and gets higher as it plays. You can use a negative number to make the sound get lower."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ arp "up" $ note "c\'maj\'4" # s "arpy" # accelerateTake "susan" [0.2,1,-1]\n')),Object(r.b)("p",null,"Using ",Object(r.b)("a",{parentName:"p",href:"https://tidalcycles.org/docs/reference/state_values/#introduction-to-state-values"},"state values"),", in this example we apply a different acceleration to each played note."))}s.isMDXComponent=!0},218:function(e,a,t){"use strict";t.d(a,"a",(function(){return b})),t.d(a,"b",(function(){return d}));var n=t(0),l=t.n(n);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=l.a.createContext({}),s=function(e){var a=l.a.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},b=function(e){var a=s(e.components);return l.a.createElement(o.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return l.a.createElement(l.a.Fragment,{},a)}},m=l.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,i=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),b=s(t),m=n,d=b["".concat(i,".").concat(m)]||b[m]||u[m]||r;return t?l.a.createElement(d,p(p({ref:a},o),{},{components:t})):l.a.createElement(d,p({ref:a},o))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,i=new Array(r);i[0]=m;var p={};for(var c in a)hasOwnProperty.call(a,c)&&(p[c]=a[c]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var o=2;o<r;o++)i[o]=t[o];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);