"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9184],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>m});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},i=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),c=u(a),d=l,m=c["".concat(o,".").concat(d)]||c[d]||k[d]||r;return a?n.createElement(m,s(s({ref:t},i),{},{components:a})):n.createElement(m,s({ref:t},i))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,s=new Array(r);s[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[c]="string"==typeof e?e:l,s[1]=p;for(var u=2;u<r;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1614:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>u});var n=a(3117),l=(a(7294),a(3905));const r={title:"Understanding the $",permalink:"wiki/Understanding_the_$/",layout:"wiki",tags:["Reference|$"]},s=void 0,p={unversionedId:"working-with-patterns/Understanding_the_$",id:"working-with-patterns/Understanding_the_$",title:"Understanding the $",description:"The dollar (",source:"@site/docs/working-with-patterns/Understanding_the_$.md",sourceDirName:"working-with-patterns",slug:"/working-with-patterns/Understanding_the_$",permalink:"/docs/working-with-patterns/Understanding_the_$",draft:!1,editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/working-with-patterns/Understanding_the_$.md",tags:[{label:"Reference|$",permalink:"/docs/tags/reference"}],version:"current",lastUpdatedBy:"Joan Queralt",lastUpdatedAt:1672227121,formattedLastUpdatedAt:"Dec 28, 2022",frontMatter:{title:"Understanding the $",permalink:"wiki/Understanding_the_$/",layout:"wiki",tags:["Reference|$"]}},o={},u=[],i={toc:u};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("translate",null," The dollar (",(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,") is a mysterious thing. It doesn't really do anything, but is super\nuseful. It's easy to get it mixed up with other operators in Tidal, for\nexample"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"#\n")),(0,l.kt)("p",null,", because in a way they both 'join things together'. But what is"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,", exactly?"),(0,l.kt)("p",null,"The"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,"is used a ",(0,l.kt)("em",{parentName:"p"},"lot")," in Haskell (the language which Tidal lives inside). Like\na lot of things in Haskell,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,"is a ",(0,l.kt)("em",{parentName:"p"},"function"),". Like all operators (e.g."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"+\n")),(0,l.kt)("p",null,"), it has two inputs - the left side, and the right side, and has one\noutput. The left input must be a function, and all that"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,"does is pass what's on the right hand side, and give it to that\nfunction."),(0,l.kt)("p",null,"In other words, in this expression:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},'rev $ "1 2 3"\n')),(0,l.kt)("p",null,"... the dollar takes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},'"1 2 3"\n')),(0,l.kt)("p",null,"and passes it to the function"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"rev\n")),(0,l.kt)("p",null,". So actually the above is the same as this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},'rev "1 2 3"\n')),(0,l.kt)("p",null,"So if we can do without it, why is it useful? Lets look at a slightly\nmore complex example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},'fast 2 $ rev "1 2 3"\n')),(0,l.kt)("p",null,"Here the dollar takes care of passing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},'rev "1 2 3"\n')),(0,l.kt)("p",null,"to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"fast 2\n")),(0,l.kt)("p",null,". If we missed it out, then we'd get an error."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},'-- this gives an error!\nfast 2 rev "1 2 3"\n')),(0,l.kt)("p",null,"That's because the computer will first read"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"fast 2\n")),(0,l.kt)("p",null,", then"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"rev\n")),(0,l.kt)("p",null,", and try to treat"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"rev\n")),(0,l.kt)("p",null,"as a pattern to be speeded up. But on its own,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"rev\n")),(0,l.kt)("p",null,"isn't a pattern, but a function for transforming pattern."),(0,l.kt)("p",null,"To avoid this error, we could use parenthesis:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},'fast 2 (rev "1 2 3")\n')),(0,l.kt)("p",null,"Here the brackets make sure"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},'rev "1 2 3"\n')),(0,l.kt)("p",null,"is calculated first, before it is passed as a pattern to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"fast 2\n")),(0,l.kt)("p",null,"."),(0,l.kt)("p",null,"So, both"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,"and parenthesis can be used to control which code is calculated first.\nThe"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,"is often used to avoid having to match opening and closing brackets, but\nsometimes parenthesis makes more sense."),(0,l.kt)("p",null,"Note that you ",(0,l.kt)("em",{parentName:"p"},"can't")," use"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,"with operators. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"-- this doesn't work either!\n4 * $ 2 + 3\n-- but this does\n4 * (2 + 3)\n")),(0,l.kt)("p",null,"= Comparing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,"and"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"#\n")),(0,l.kt)("p",null,"="),(0,l.kt)("p",null,"So,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"$\n")),(0,l.kt)("p",null,"is used to join a parameter (on the right) with a function (on the\nleft)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"#\n")),(0,l.kt)("p",null,"(and all its friends"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"|+|\n")),(0,l.kt)("p",null,","),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-Haskell"},"|*|\n")),(0,l.kt)("p",null,", etc) are used to combine a pattern on the right with a pattern on the\nleft.")))}c.isMDXComponent=!0}}]);