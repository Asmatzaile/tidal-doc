(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{218:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),s=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),u=r,m=d["".concat(o,".").concat(u)]||d[u]||b[u]||l;return t?a.a.createElement(m,i(i({ref:n},p),{},{components:t})):a.a.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},94:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return s}));var r=t(3),a=t(7),l=(t(0),t(218)),o={title:"Randomness",id:"randomness"},i={unversionedId:"reference/randomness",id:"reference/randomness",isDocsHomePage:!1,title:"Randomness",description:"This page will present you all the functions that can be used to introduce some randomness in your musical patterns. Each function will be presented following the same model:",source:"@site/docs/reference/randomness.md",slug:"/reference/randomness",permalink:"/docs/reference/randomness",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/reference/randomness.md",version:"current",lastUpdatedBy:"Raphael Forment",lastUpdatedAt:1621864783,sidebar:"reference",previous:{title:"Sampling",permalink:"/docs/reference/sampling"},next:{title:"Composition",permalink:"/docs/reference/composition"}},c=[{value:"Pseudo-randomisation",id:"pseudo-randomisation",children:[{value:"rand",id:"rand",children:[]},{value:"irand",id:"irand",children:[]}]},{value:"Perlin noise",id:"perlin-noise",children:[{value:"perlin",id:"perlin",children:[]},{value:"perlinWith",id:"perlinwith",children:[]},{value:"perlin2",id:"perlin2",children:[]},{value:"perlin2With",id:"perlin2with",children:[]}]}],p={toc:c};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"This page will present you all the functions that can be used to introduce some randomness in your musical patterns. Each function will be presented following the same model:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Type signature"),": how the function is declared on the ",Object(l.b)("strong",{parentName:"li"},"Haskell")," side."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Description"),": verbal description of the function."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Examples"),": a small list of examples that you can copy/paste in your editor.")),Object(l.b)("h2",{id:"pseudo-randomisation"},"Pseudo-randomisation"),Object(l.b)("h3",{id:"rand"},"rand"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: rand :: Fractional a => Pattern a\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"rand")," is an oscillator that generates a pattern of (pseudo-)random, floating point numbers between ",Object(l.b)("inlineCode",{parentName:"p"},"0.0")," and ",Object(l.b)("inlineCode",{parentName:"p"},"1.0"),". For example to randomly pan around the stereo field you can:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*8" # pan rand\n')),Object(l.b)("p",null,"Or to enjoy a randomised speed from ",Object(l.b)("inlineCode",{parentName:"p"},"0.5")," to ",Object(l.b)("inlineCode",{parentName:"p"},"1.5"),", you can add ",Object(l.b)("inlineCode",{parentName:"p"},"0.5")," to it."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "arpy*4" # speed (rand + 0.5)\n')),Object(l.b)("h3",{id:"irand"},"irand"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: irand :: Num a => Int -> Pattern a\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"irand")," is similar to ",Object(l.b)("inlineCode",{parentName:"p"},"rand"),", but generates a continuous oscillator of (pseudo-)random integers between ",Object(l.b)("inlineCode",{parentName:"p"},"0")," to ",Object(l.b)("inlineCode",{parentName:"p"},"n-1")," inclusive. Notably used to pick random samples from a folder."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "amencutup*8" # n (irand 8)\n')),Object(l.b)("h2",{id:"perlin-noise"},"Perlin noise"),Object(l.b)("h3",{id:"perlin"},"perlin"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},"Type: perlin :: Pattern Double\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"perlin")," produces 1D Perlin (smooth) noise. It works like rand but smoothly moves between random values each cycle. For example, you can smoothly and randomly change speed:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*32" # speed (perlin + 0.5)\n')),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"perlin")," function produces a new random value to move to every cycle. If you want a new random value to be generated more or less frequently, you can use ",Object(l.b)("inlineCode",{parentName:"p"},"fast")," or ",Object(l.b)("inlineCode",{parentName:"p"},"slow"),", respectively:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ sound "bd*32" # speed (fast 4 $ perlin + 0.5)\nd1 $ sound "bd*32" # speed (slow 4 $ perlin + 0.5)\n')),Object(l.b)("h3",{id:"perlinwith"},"perlinWith"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"perlinWith")," allows you to specify a pattern as input to generate random values instead of using the default cycle count:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "arpy*32" # cutoff (perlinWith (saw * 4) * 2000)\n')),Object(l.b)("h3",{id:"perlin2"},"perlin2"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"perlin2")," creates 2D noise by allowing you to specify a custom pattern as a second dimension (cycle number remains as the first dimension):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ s "bd*32" # speed (perlin2 (sine*4) + 1)\n')),Object(l.b)("h3",{id:"perlin2with"},"perlin2With"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"perlin2With")," is the same as ",Object(l.b)("inlineCode",{parentName:"p"},"perlinWith")," except allows you to provide two functions for 2D noise:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-haskell"},'d1\n $ s "[arpy*32]"\n # lpf (range 60 5000 $ perlin2With (cosine*2) (sine*2))\n # lpq 0.3\n')))}s.isMDXComponent=!0}}]);