(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{138:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return p}));var n=a(3),l=a(7),r=(a(0),a(219)),s={title:"Sampling",id:"sampling"},o={unversionedId:"reference/sampling",id:"reference/sampling",isDocsHomePage:!1,title:"Sampling",description:"This page will present you all the functions that can be used to slice, cut, reverse or explode your audio samples, incoming signals or oscillators. Each function will be presented following the same model:",source:"@site/docs/reference/sampling.md",slug:"/reference/sampling",permalink:"/docs/reference/sampling",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/reference/sampling.md",version:"current",lastUpdatedBy:"Raphael Forment",lastUpdatedAt:1622039570,sidebar:"reference",previous:{title:"Samplers",permalink:"/docs/reference/samplers"},next:{title:"Randomness",permalink:"/docs/reference/randomness"}},i=[{value:"Audio sampling",id:"audio-sampling",children:[{value:"chop",id:"chop",children:[]},{value:"striate",id:"striate",children:[]},{value:"striateBy",id:"striateby",children:[]},{value:"slice",id:"slice",children:[]},{value:"splice",id:"splice",children:[]},{value:"randslice",id:"randslice",children:[]},{value:"chew",id:"chew",children:[]},{value:"loopAt",id:"loopat",children:[]},{value:"smash",id:"smash",children:[]},{value:"smash&#39;",id:"smash-1",children:[]}]},{value:"Signal sampling",id:"signal-sampling",children:[{value:"segment",id:"segment",children:[]},{value:"discretise",id:"discretise",children:[]},{value:"sig",id:"sig",children:[]}]}],c={toc:i};function p(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This page will present you all the functions that can be used to slice, cut, reverse or explode your audio samples, incoming signals or oscillators. Each function will be presented following the same model:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Type signature"),": how the function is declared on the ",Object(r.b)("strong",{parentName:"li"},"Haskell")," side."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Description"),": verbal description of the function."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Examples"),": a small list of examples that you can copy/paste in your editor.")),Object(r.b)("h2",{id:"audio-sampling"},"Audio sampling"),Object(r.b)("h3",{id:"chop"},"chop"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: chop :: Pattern Int -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"chop")," cuts each sample into the given number of parts, allowing you to explore a technique known as 'granular synthesis'. It turns a pattern of samples into a pattern of parts of samples. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ chop 16 $ sound "arpy ~ feel*2 newnotes"\n')),Object(r.b)("p",null,"In the above, each sample is chopped into 16 bits, resulting in 64 (16*4) events. You can pattern that first parameter:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ chop "<16 128 32>" $ sound "arpy ~ feel*2 newnotes"\n')),Object(r.b)("p",null,"You end up with a pattern of the chopped up bits of samples. You'll already be able to hear this more clearly if you for example reverse the pattern, as you'll reverse the order of the sample parts:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ rev $ chop 16 $ sound "breaks125"\n')),Object(r.b)("p",null,"Lets try that reverse in just one speaker:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 2 $ jux rev $ chop 16 $ sound "breaks125"\n')),Object(r.b)("p",null,"Different values of ",Object(r.b)("inlineCode",{parentName:"p"},"chop")," can yield very different results, depending on the samples used:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ chop 16 $ sound (samples "arpy*8" (run 16))\nd1 $ chop 32 $ sound (samples "arpy*8" (run 16))\nd1 $ chop 256 $ sound "bd*4 [sn cp] [hh future]*2 [cp feel]"\n')),Object(r.b)("p",null,"You can also use ",Object(r.b)("inlineCode",{parentName:"p"},"chop")," (or ",Object(r.b)("inlineCode",{parentName:"p"},"striate"),") with very long samples, to cut it into short chunks and pattern those chunks. The following cuts a sample into 32 parts, and plays it over 8 cycles:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ loopAt 8 $ chop 32 $ sound "bev"\n')),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"loopAt")," takes care of changing the speed of sample playback so that the sample fits in the given number of cycles perfectly. As a result, in the above the granules line up perfectly, so you can\u2019t really hear that the sample has been cut into bits. Again, this becomes more apparent when you do further manipulations of the pattern, for example ",Object(r.b)("inlineCode",{parentName:"p"},"rev")," to reverse the order of the cut up bits:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ loopAt 8 $ rev $ chop 32 $ sound "bev"\n')),Object(r.b)("h3",{id:"striate"},"striate"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: striate :: Pattern Int -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"striate")," is a kind of granulator, cutting samples into bits in a similar to ",Object(r.b)("inlineCode",{parentName:"p"},"chop"),", but the resulting bits are organised differently. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 4 $ striate 3 $ sound "numbers:0 numbers:1 numbers:2 numbers:3"\n')),Object(r.b)("p",null,"This plays the loop the given number of times, but triggering progressive portions of each sample. So in this case it plays the loop three times, the first time playing the first third of each sample, then the second time playing the second third of each sample, and then finally the last third of each sample.. Compare this with ",Object(r.b)("inlineCode",{parentName:"p"},"chop"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 4 $ chop 3 $ sound "numbers:0 numbers:1 numbers:2 numbers:3"\n')),Object(r.b)("p",null,"You can hear that the striate version 'interlaces' the cut up bits of samples together, whereas the chop version plays the bits from each chopped up sample in turn. It might be worth listening to the samples without granulation, in case that helps understand what\u2019s happening in the above:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 4 $ sound "numbers:0 numbers:1 numbers:2 numbers:3"\n')),Object(r.b)("h3",{id:"striateby"},"striateBy"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: striateBy :: Pattern Int -> Pattern Double -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"striateBy")," (formerly called ",Object(r.b)("inlineCode",{parentName:"p"},"striate'"),") is a variant of ",Object(r.b)("inlineCode",{parentName:"p"},"striate"),", with an extra parameter, which specifies the length of each part. ",Object(r.b)("inlineCode",{parentName:"p"},"striate")," still scans across the sample over a single cycle, but if each bit is longer, it creates a sort of stuttering effect. For example the following will cut the bev sample into 32 parts, but each will be 1/16th of a sample long:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow 32 $ striateBy 32 (1/16) $ sound "bev"\n')),Object(r.b)("p",null,"Note that striate uses the ",Object(r.b)("inlineCode",{parentName:"p"},"begin")," and ",Object(r.b)("inlineCode",{parentName:"p"},"end")," parameters internally. This means that if you\u2019re using ",Object(r.b)("inlineCode",{parentName:"p"},"striate")," or ",Object(r.b)("inlineCode",{parentName:"p"},"striateBy")," you probably shouldn\u2019t also specify begin or end."),Object(r.b)("h3",{id:"slice"},"slice"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: Pattern Int -> Pattern Int -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"slice")," is similar to ",Object(r.b)("inlineCode",{parentName:"p"},"chop")," and ",Object(r.b)("inlineCode",{parentName:"p"},"striate"),", in that it's used to slice samples up into bits. The difference is that it allows you to rearrange those bits as a pattern."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slice 8 "7 6 5 4 3 2 1 0" $ sound "breaks165"\n  # legato 1\n')),Object(r.b)("p",null,"The above slices the sample into eight bits, and then plays them backwards, equivalent of applying ",Object(r.b)("inlineCode",{parentName:"p"},"rev $ chop 8"),". Here's a more complex example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slice 8 "[<0*8 0*2> 3*4 2 4] [4 .. 7]" $ sound "breaks165"\n  # legato 1\n')),Object(r.b)("p",null,"Note that the order of the first two parameters changed since tidal version ",Object(r.b)("inlineCode",{parentName:"p"},"1.0.0"),"."),Object(r.b)("h3",{id:"splice"},"splice"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: splice :: Pattern Int -> Pattern Int -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"splice")," is similar to slice, but the slices are automatically pitched up or down to fit their 'slot'."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ splice 8 "[<0*8 0*2> 3*4 2 4] [4 .. 7]" $ sound "breaks165"\n')),Object(r.b)("h3",{id:"randslice"},"randslice"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: randslice :: Pattern Int -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"randslice")," chops the sample into the given number of pieces and then plays back a random one each cycle:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ randslice 32 $ sound "bev"\n')),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"fast")," to get more than one per cycle;"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ fast 4 $ randslice 32 $ sound "bev"\n')),Object(r.b)("h3",{id:"chew"},"chew"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: chew :: Int -> Pattern Int -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"chew")," works the same as bite, but speeds up/slows down playback of sounds as well as squeezing / contracting the slices of pattern."),Object(r.b)("p",null,"Compare these:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ bite 4 "0 1*2 2*2 [~ 3]" $ n "0 .. 7" # sound "drum"\n\nd1 $ chew 4 "0 1*2 2*2 [~ 3]" $ n "0 .. 7" # sound "drum"\n')),Object(r.b)("h3",{id:"loopat"},"loopAt"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: loopAt :: Pattern Time -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"loopAt"),' makes sample fit the given number of cycles. Internally, it works by setting the unit control to "c", changing the playback speed of the sample with the speed parameter, and setting the density of the pattern to match.'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ loopAt 4 $ sound "breaks125"\n')),Object(r.b)("p",null,"It\u2019s a good idea to use this in conjuction with ",Object(r.b)("inlineCode",{parentName:"p"},"chop"),", so the break is chopped into pieces and you don\u2019t have to wait for the whole sample to start/stop."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ loopAt 4 $ chop 32 $ sound "breaks125"\n')),Object(r.b)("p",null,"Like all ",Object(r.b)("strong",{parentName:"p"},"Tidal")," functions, you can mess about with this considerably. The below example shows how you can supply a pattern of cycle counts to ",Object(r.b)("inlineCode",{parentName:"p"},"loopAt"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ juxBy 0.6 (|* speed "2") $ loopAt "<4 6 2 3>" $ chop 12 $ sound "fm:14"\n')),Object(r.b)("h3",{id:"smash"},"smash"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: smash :: Pattern Int -> [Pattern Time] -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"smash")," is a combination of ",Object(r.b)("inlineCode",{parentName:"p"},"spread")," and ",Object(r.b)("inlineCode",{parentName:"p"},"striate")," - it cuts the samples into the given number of bits, and then cuts between playing the loop at different speeds according to the values in the list. So this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ smash 3 [2,3,4] $ sound "ho ho:2 ho:3 hc"\n')),Object(r.b)("p",null,"Is a bit like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ slow "<2 3 4>" $ striate 3 $ sound "ho ho:2 ho:3 hc"\n')),Object(r.b)("h3",{id:"smash-1"},"smash'"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: smash' :: Int -> [Pattern Time] -> ControlPattern -> ControlPattern\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"smash'")," is ",Object(r.b)("inlineCode",{parentName:"p"},"smash")," but based on ",Object(r.b)("inlineCode",{parentName:"p"},"chop")," instead of ",Object(r.b)("inlineCode",{parentName:"p"},"striate"),"."),Object(r.b)("p",null,"Compare:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ smash 6 [2,3,4] $ sound "ho ho:2 ho:3 hc"\n')),Object(r.b)("p",null,"to"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ smash\' 6 [2,3,4] $ sound "ho ho:2 ho:3 hc"\n')),Object(r.b)("p",null,"or"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ smash 12 [2,3,4] $ s "bev*4"\n')),Object(r.b)("p",null,"vs"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ smash\' 12 [2,3,4] $ s "bev*4"\n')),Object(r.b)("p",null,"for a dramatic difference."),Object(r.b)("h2",{id:"signal-sampling"},"Signal sampling"),Object(r.b)("h3",{id:"segment"},"segment"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: segment :: Pattern Time -> Pattern a -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"segment")," 'samples' the pattern at a rate of ",Object(r.b)("inlineCode",{parentName:"p"},"n")," events per cycle. Useful for turning a continuous pattern into a discrete one. In this example, the pattern originates from the shape of a sine wave, a continuous pattern. Without segment the samples will get triggered at an undefined frequency which may be very high."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ n (slow 2 $ segment 16 $ range 0 32 $ sine) # sound "amencutup"\n')),Object(r.b)("h3",{id:"discretise"},"discretise"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"segment")," used to be known as ",Object(r.b)("inlineCode",{parentName:"p"},"discretise"),". The old name remains as an alias and will still work, but may be removed or repurposed in a future version of ",Object(r.b)("strong",{parentName:"p"},"Tidal"),". "),Object(r.b)("h3",{id:"sig"},"sig"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"Type: sig :: (Time -> a) -> Pattern a\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"sig")," takes a function of time and turns it into a pattern. It's very useful for creating continuous patterns such as ",Object(r.b)("inlineCode",{parentName:"p"},"sine")," or ",Object(r.b)("inlineCode",{parentName:"p"},"perlin"),". For example, ",Object(r.b)("inlineCode",{parentName:"p"},"saw")," is defined as"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell"},"saw = sig $ \\t -> mod' (fromRational t) 1\n")))}p.isMDXComponent=!0},219:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),l=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var c=l.a.createContext({}),p=function(e){var t=l.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},b=function(e){var t=p(e.components);return l.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},d=l.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),b=p(a),d=n,m=b["".concat(s,".").concat(d)]||b[d]||u[d]||r;return a?l.a.createElement(m,o(o({ref:t},c),{},{components:a})):l.a.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<r;c++)s[c]=a[c];return l.a.createElement.apply(null,s)}return l.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);